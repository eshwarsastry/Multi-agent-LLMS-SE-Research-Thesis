{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n\n1. The system should filter incoming requests based on specific criteria.\n2. Requests starting with \"/api\" or \"/login\" should automatically pass the filter.\n3. For other requests, the system should validate a JWT token included in the request.\n4. The JWT token must contain the user's name at the beginning.\n5. The JWT token must include a timestamp indicating when the token was issued.\n6. The system should check if the token is not older than 72 hours (3 days).\n7. If the token is valid, the system should extract user information from the token.\n8. Users with a level greater than 2 should be granted access.\n9. Upon granting access, the system should log the user's name, address, and the current timestamp.\n10. The system should handle exceptions gracefully, returning false if any error occurs during the filtering process.",
  "AreaCalculator": "Title: Area Calculator\n1. The system shall provide a class named `AreaCalculator` that calculates areas of various geometric shapes.\n2. The `AreaCalculator` class shall accept a single parameter, `radius`, during initialization and throw an exception if the radius is negative.\n3. The `AreaCalculator` class shall have a method `calculate_circle_area` that returns the area of a circle using the formula πr².\n4. The `AreaCalculator` class shall have a method `calculate_sphere_area` that returns the surface area of a sphere using the formula 4πr².\n5. The `AreaCalculator` class shall have a method `calculate_cylinder_area` that accepts a parameter `height` and returns the surface area of a cylinder using the formula 2πr(r + h), throwing an exception if the height is negative.\n6. The `AreaCalculator` class shall have a method `calculate_sector_area` that accepts a parameter `angle` and returns the area of a sector using the formula 0.5r²θ.\n7. The `AreaCalculator` class shall have a method `calculate_annulus_area` that accepts parameters `inner_radius` and `outer_radius` and returns the area of an annulus using the formula π(R² - r²), throwing an exception if the inner radius is greater than the outer radius.\n8. The system shall use the constant π with a value of 3.14159265358979323846 unless a more precise definition is provided by the environment.\n9. The system shall include unit tests for each area calculation method using the Google Test framework.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of arrangements (permutations) of a given length from the input data.\n3. The system should provide a method to calculate the total number of arrangements (permutations) of all possible lengths from the input data.\n4. The system should provide a method to generate all possible arrangements (permutations) of a given length from the input data.\n5. The system should provide a method to generate all possible arrangements (permutations) of all possible lengths from the input data.\n6. The system should include a utility function to compute the factorial of a given integer.\n7. The system should handle cases where the requested arrangement length exceeds the size of the input data by returning an empty set of arrangements.\n8. The system should handle cases where no specific arrangement length is provided, defaulting to the size of the input data.\n9. The system should ensure that each generated arrangement is unique and contains no duplicate elements.\n10. The system should maintain the order of elements in the input data when generating permutations.",
  "AssessmentSystem": "Title: Assessment System\n\n1. The system should allow adding a student with their grade and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the GPA of a specific student based on their course scores.\n4. The system should identify and return a list of all students who have failed at least one course (a failing score is below 60).\n5. The system should calculate and return the average score for a specific course across all students who have taken that course.\n6. The system should identify and return the name of the student with the highest GPA.\n7. The system should handle cases where data might not be available (e.g., no scores for a student, no students in the system) by returning an appropriate optional value indicating the absence of data.",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n\n1. The system shall accept a string input representing guitar play instructions.\n2. The system shall parse the input string into segments, where each segment contains a chord and a corresponding tune.\n3. The system shall store each parsed segment as a `PlayItem` object containing the chord and tune.\n4. The system shall provide a method to interpret the input string and generate a list of `PlayItem` objects.\n5. The system shall have an option to display the interpreted chords and tunes in a formatted manner.\n6. The system shall output the formatted display of chords and tunes to the console if the display option is enabled.\n7. The system shall handle empty input strings gracefully by returning an empty list of `PlayItem` objects.\n8. The system shall correctly identify and separate alphabetic characters as chords and non-alphabetic characters as tunes within each segment.\n9. The system shall format the display of each chord and tune pair using the specified format: \"Normal Guitar Playing -- Chord: [chord], Play Tune: [tune]\".",
  "AvgPartition": "Title: AvgPartition Class\n\n1. The class should accept a list of integers and a limit as input during initialization.\n2. It should provide a method to determine the number of partitions and the remainder when dividing the list by the limit.\n3. It should provide a method to retrieve a specific partition of the list based on an index.\n4. The partitions should be as evenly distributed as possible, with any remainder elements being distributed one by one to the first few partitions.\n5. The class should not modify the original list of integers.\n6. The class should handle cases where the limit is greater than the number of elements in the list.\n7. The class should handle cases where the limit is zero or negative gracefully.\n8. The class should ensure that the sum of the sizes of all partitions equals the size of the original list.\n9. The class should provide consistent results for the same input parameters across multiple invocations.\n10. The class should be efficient in terms of time complexity, particularly for large lists and limits.",
  "BankAccount": "Title: Bank Account Management System\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide functionality to deposit a specified amount into the bank account, ensuring that the deposit amount is not negative.\n3. The system should provide functionality to withdraw a specified amount from the bank account, ensuring that the withdrawal amount is not negative and does not exceed the current balance.\n4. The system should provide functionality to view the current balance of the bank account.\n5. The system should provide functionality to transfer a specified amount from one bank account to another, ensuring that the transfer amount is not negative and does not exceed the sender's balance.\n6. The system should handle invalid operations by throwing exceptions with appropriate error messages.",
  "BinaryDataProcessor": "Title: Binary Data Processor\n1. The system should accept a binary string as input.\n2. The system should remove any non-binary characters ('0' or '1') from the input string.\n3. The system should calculate the percentage of zeroes and ones in the cleaned binary string.\n4. The system should provide the bit length of the cleaned binary string.\n5. The system should convert the cleaned binary string into an ASCII string.\n6. The system should convert the cleaned binary string into a UTF-8 string, which is identical to the ASCII conversion in this context.",
  "BitStatusUtil": "Title: BitStatusUtil Class\n\n1. The system shall provide functionality to add a status to a set of states using bitwise operations.\n2. The system shall provide functionality to check if a specific status is present in a set of states using bitwise operations.\n3. The system shall provide functionality to remove a status from a set of states using bitwise operations.\n4. The system shall validate that all input arguments are non-negative integers.\n5. The system shall validate that all input arguments are even integers.\n6. The system shall throw an exception if any input argument does not meet the validation criteria.\n7. The system shall ensure that the state values are manipulated without altering any other bits except those corresponding to the status being added, checked, or removed.",
  "BlackjackGame": "Title: Blackjack Game Implementation\n1. The system shall initialize a standard 52-card deck with cards represented as strings in the format \"RankSuit\".\n2. The system shall shuffle the deck randomly at the start of each game.\n3. The system shall calculate the value of a hand of cards, considering that an Ace can be worth either 1 or 11 points.\n4. The system shall determine the winner based on the values of the player's and dealer's hands, where the player wins if their hand value is closer to 21 without exceeding it, and the dealer wins otherwise.\n5. The system shall handle cases where both the player and dealer exceed 21, determining the winner based on who has a lower total over 21.\n6. The system shall maintain separate hands for the player and the dealer throughout the game.\n7. The system shall ensure that the deck is not modified during the game, only shuffled at the beginning.\n8. The system shall provide functionality to create a new deck of cards when a new game is initialized.\n9. The system shall accurately compute the value of a hand by summing the values of individual cards, adjusting for Aces as necessary.\n10. The system shall output the result of the game as either \"Player wins\", \"Dealer wins\", or a tie condition if applicable.",
  "BookManagement": "Title: Book Management System\n\n1. The system should allow adding books to the inventory with an optional quantity parameter, defaulting to 1 if not specified.\n2. The system should allow removing a specified quantity of a book from the inventory, throwing an error if the book does not exist or the quantity to remove exceeds the available stock.\n3. The system should provide a function to view the entire inventory, returning a mapping of book titles to their respective quantities.\n4. The system should provide a function to check the quantity of a specific book in the inventory, returning 0 if the book is not found.\n5. The system should maintain an internal data structure to store book titles and their corresponding quantities efficiently.\n6. The system should handle concurrent operations safely, ensuring data integrity during simultaneous read and write operations.\n7. The system should be robust against invalid inputs, such as negative quantities, and handle them appropriately.\n8. The system should provide meaningful error messages when exceptions occur, such as attempting to remove more books than are available or removing a non-existent book.",
  "BookManagementDB": "Title: Book Management Database\n\n1. The system shall manage a database of books with operations to add, remove, borrow, and return books.\n2. The system shall maintain a list of books where each book has an ID, title, author, and availability status.\n3. The system shall provide functionality to create a table for storing book information if it does not already exist.\n4. The system shall allow adding a new book to the database with a specified title and author, setting its availability status to true.\n5. The system shall allow removing a book from the database using its unique ID.\n6. The system shall allow marking a book as borrowed by updating its availability status to false using its unique ID.\n7. The system shall allow marking a book as returned by updating its availability status to true using its unique ID.\n8. The system shall provide a method to retrieve all books in the database along with their details.\n9. The system shall handle database connection management, opening the database on initialization and closing it upon destruction.\n10. The system shall throw exceptions with appropriate error messages when database operations fail.",
  "CalendarUtil": "Title: Calendar Utility\n\n1. The system should allow adding an event with a specific date, start time, end time, and description.\n2. The system should allow removing an event based on its exact match of date, start time, end time, and description.\n3. The system should provide a list of all events scheduled for a specific date.\n4. The system should check if a given time slot (defined by start and end times) is available for scheduling new events.\n5. The system should generate a list of available time slots (each 1 hour long) for a given date where no events are scheduled.\n6. The system should retrieve a specified number of upcoming events that have not yet started.\n7. Events should be stored in a way that allows efficient addition, removal, and querying based on date and time.\n8. The system should handle timestamps and convert them into `std::chrono::system_clock::time_point` for internal use.\n9. The system should ensure that all operations involving time comparisons and calculations are accurate and consistent.\n10. The system should maintain data integrity, ensuring that no duplicate events are added and that events can be accurately removed.",
  "ChandrasekharSieve": "Title: Chandrasekhar Sieve Algorithm\n\nFunctional Requirements:\n1. The system should accept an integer input `n` which represents the upper limit up to which prime numbers are to be found.\n2. The system should generate a list of all prime numbers less than or equal to `n`.\n3. The system should provide a method to retrieve the list of generated prime numbers.\n\nNon-Functional Requirements:\n1. The algorithm should efficiently handle large values of `n` without excessive memory usage.\n2. The algorithm should execute within a reasonable time frame even for large inputs.\n3. The system should not crash or produce incorrect results for invalid inputs such as negative numbers or zero.",
  "Chat": "Title: Chat System\n1. The system should allow adding a new user by providing a unique username.\n2. The system should allow removing an existing user by specifying their username.\n3. The system should enable sending a message from one user to another, including the sender's name, receiver's name, message content, and a timestamp.\n4. The system should provide functionality to retrieve all messages for a specific user.\n5. The system should provide functionality to retrieve all users and their associated messages.\n6. The system should generate a timestamp in the format \"YYYY-MM-DD HH:MM:SS\" for each message sent.\n7. The system should ensure that a user cannot be added if the username already exists.\n8. The system should ensure that a message cannot be sent if either the sender or receiver does not exist in the system.",
  "ClassRegistrationSystem": "Title: Class Registration System\n\n1. The system should allow the registration of new students with their name and major.\n2. The system should prevent duplicate student registrations based on the student's name.\n3. The system should allow students to register for classes by providing their name and the class name.\n4. The system should prevent a student from registering for the same class more than once.\n5. The system should provide a list of students enrolled in a specific major.\n6. The system should provide a list of all unique majors present in the system.\n7. The system should determine and return the most popular class within a specific major based on the number of students registered for each class.\n8. The system should maintain the integrity of student data, including their names and majors.\n9. The system should efficiently handle operations such as student registration, class registration, and data retrieval.\n10. The system should ensure that the data structures used for storing students and their class registrations are optimized for quick access and modification.",
  "Classroom": "Title: Classroom Management System\n\n1. The system should manage courses in a classroom.\n2. Each course should have a unique combination of name, start time, and end time.\n3. The system should allow adding a course to a classroom only if the course does not already exist in that classroom.\n4. The system should allow removing a course from a classroom if the course exists in that classroom.\n5. The system should check if a classroom is free at a specific time by comparing the given time with the scheduled courses' times.\n6. The system should check for conflicts when adding a new course by ensuring there are no overlapping times with existing courses.\n7. The system should verify if a specific course is already scheduled in a classroom.\n8. The system should convert time strings in the format \"HH:MM\" to `std::tm` structure for further processing.\n9. The system should convert `std::tm` structures to `std::time_t` for time comparison.\n10. The system should detect time conflicts between two time intervals represented by `std::tm` structures.\n11. The system should handle invalid time formats by throwing an exception.\n12. The system should handle errors during time conversion by throwing an exception.\n13. The system should output error messages to standard error stream in case of conversion failures.",
  "CookiesUtil": "Title: Cookies Management Utility\n1. The system shall provide a utility class named `CookiesUtil` for managing cookies stored in a JSON file.\n2. The `CookiesUtil` class shall be initialized with a path to a cookies file.\n3. The system shall have a method `get_cookies` that extracts cookies from a JSON response and saves them to the cookies file.\n4. The system shall have a method `load_cookies` that reads cookies from the cookies file and returns them as a JSON object.\n5. The system shall have a private method `_save_cookies` that writes the current cookies to the cookies file in a formatted JSON structure.\n6. The system shall have a method `set_cookies` that sets the cookies in a JSON request by converting the internal cookies map into a string format suitable for HTTP requests.\n7. The system shall handle exceptions during file operations and print error messages to standard error output.\n8. The cookies file shall be formatted as a JSON document with indentation of 4 spaces when saving cookies.\n9. The cookies in the JSON response shall be expected to be in the form of an unordered map where keys are cookie names and values are cookie values.\n10. The cookies in the HTTP request shall be represented as a single string with each cookie separated by a semicolon and space.",
  "CSVProcessor": "Title: CSV Processor\n\n1. The system should read a CSV file and return its header and data rows.\n2. The system should write data to a CSV file, where each row of data is written on a new line and columns are separated by commas.\n3. The system should process a specified column in a CSV file by converting all characters in that column to uppercase.\n4. The processed data should be saved in a new CSV file with the original filename appended with \"_process\".\n5. The system should handle cases where the specified column index does not exist in the data.\n6. The system should return an error code if the file cannot be opened for reading or writing.\n7. The system should ensure that the header row is preserved when processing and writing the CSV file.",
  "CurrencyConverter": "Title: Currency Converter\n1. The system should provide functionality to convert an amount from one currency to another.\n2. The system should maintain a list of supported currencies and their corresponding exchange rates.\n3. The system should allow users to retrieve a list of all supported currencies.\n4. The system should enable the addition of new currency rates, ensuring that no duplicate currencies are added.\n5. The system should allow for updating existing currency rates.\n6. The conversion function should handle cases where the source and target currencies are the same by returning the original amount.\n7. The conversion function should return an error or indication if either the source or target currency is not supported.\n8. The system should maintain the order of currencies as they are added or updated.",
  "DatabaseProcessor": "Title: DatabaseProcessor\n\n1. The system shall provide functionality to create a new table in a SQLite database with specified table name and two columns named 'key1' of type TEXT and 'key2' of type INTEGER.\n2. The system shall allow insertion of multiple records into a specified table, where each record contains values for 'name' and 'age'.\n3. The system shall support searching for records in a specified table based on the 'name' field and return all matching records.\n4. The system shall enable deletion of records from a specified table based on the 'name' field.\n5. The system shall handle errors during database operations by throwing exceptions with descriptive error messages.\n6. The system shall ensure that the database connection is properly closed after each operation.\n7. The system shall use parameterized queries to prevent SQL injection attacks.\n8. The system shall be able to handle concurrent database operations without causing data corruption or inconsistencies.\n9. The system shall maintain the integrity of the database by ensuring that all operations either complete successfully or fail gracefully without leaving the database in an inconsistent state.\n10. The system shall be compatible with the SQLite database engine and utilize its API for database operations.",
  "DataStatistics": "Title: DataStatistics Class\n\n1. The system shall provide a method to calculate the mean of a dataset, rounding the result to two decimal places.\n2. The system shall provide a method to calculate the median of a dataset, rounding the result to two decimal places if necessary.\n3. The system shall provide a method to determine the mode(s) of a dataset, returning all modes in a vector.\n4. The system shall throw an exception if any of the statistical methods are called with an empty dataset.\n5. The system shall handle datasets containing both positive and negative numbers accurately.\n6. The system shall maintain the integrity of the input dataset by not modifying it during operations that do not require sorting or altering the original data.\n7. The system shall be able to handle large datasets efficiently without causing performance degradation.\n8. The system shall ensure that the calculated mean, median, and modes are accurate within the constraints of floating-point arithmetic and integer precision.\n9. The system shall be implemented in C++ using standard library features such as vectors, maps, and algorithms.\n10. The system shall provide clear and descriptive error messages when exceptions are thrown due to invalid input.",
  "DiscountStrategy": "Title: Discount Calculation System\n1. The system should accept customer information and a shopping cart as input.\n2. The system should calculate the total price of items in the shopping cart.\n3. The system should apply a discount based on the type of promotion selected (Fidelity, Bulk Item, Large Order).\n4. The system should calculate the final amount due after applying the appropriate discount.\n5. The system should support different types of promotions: Fidelity Promotion, Bulk Item Promotion, and Large Order Promotion.\n6. For Fidelity Promotion, a 5% discount should be applied if the customer's fidelity points are 1000 or more.\n7. For Bulk Item Promotion, a 10% discount should be applied to each item with a quantity of 20 or more.\n8. For Large Order Promotion, a 7% discount should be applied if the number of items in the cart is 10 or more.\n9. The system should not apply any discount if no promotion is selected.\n10. The system should handle cases where the required keys (\"quantity\", \"price\", \"fidelity\") are missing from the input data gracefully.",
  "EmailClient": "Title: Email Client System\n\n1. The system should allow creation of an email client with a specified email address and storage capacity.\n2. The system should enable sending emails from one email client to another, provided the recipient's inbox has sufficient space.\n3. The system should store each email with details including sender, receiver, content, size, timestamp, and read state.\n4. The system should allow fetching the first unread email from the inbox and mark it as read.\n5. The system should check if adding another email would exceed the storage capacity of the inbox.\n6. The system should calculate the total size of all emails currently stored in the inbox.\n7. The system should clear emails from the inbox to free up space when necessary, starting with the oldest emails first.\n8. The system should generate a timestamp for each email indicating the time it was sent.\n9. The system should handle cases where the inbox is empty during email fetching.\n10. The system should ensure that no email is sent if the recipient's inbox cannot accommodate it, and attempt to free up space by removing older emails.",
  "ExcelProcessor": "Title: Excel Processor\n\n1. The system shall provide functionality to read data from an Excel file named by the user.\n2. The system shall support reading both string and integer values from the Excel file.\n3. The system shall provide functionality to write data to an Excel file named by the user.\n4. The system shall support writing both string and integer values to the Excel file.\n5. The system shall process data from an Excel file by transforming the N-th column based on specific rules.\n6. If the N-th column contains a string that does not start with a digit, the system shall convert all characters to uppercase and append the transformed string to the end of each row.\n7. If the N-th column contains a string that starts with a digit, the system shall append only the first character of the string to the end of each row.\n8. If the N-th column contains an integer, the system shall append the integer to the end of each row.\n9. The processed data shall be saved in a new Excel file with the same name as the original file but with \"_process\" appended before the file extension.\n10. The system shall handle exceptions during file operations and return appropriate status codes.\n11. The system shall ensure that the Excel file is properly closed after reading or writing operations.\n12. The system shall validate the input file name and column index to prevent errors during processing.",
  "FitnessTracker": "Title: FitnessTracker Application\n1. The system shall accept user input for height, weight, age, and sex to initialize a FitnessTracker object.\n2. The system shall calculate and provide the Body Mass Index (BMI) based on the user's height and weight.\n3. The system shall determine the user's condition relative to a standard BMI range, returning -1 if underweight, 0 if within the normal range, and 1 if overweight.\n4. The system shall calculate the daily calorie intake based on the user's sex, age, height, weight, and BMI condition.\n5. The system shall use the Mifflin-St. Jeor equation to compute Basal Metabolic Rate (BMR).\n6. The system shall adjust the calculated BMR by activity level factors to determine the daily calorie intake, with different multipliers for underweight, normal, and overweight conditions.\n7. The system shall store predefined BMI standard ranges for males and females.\n8. The system shall handle invalid inputs gracefully without causing runtime errors.\n9. The system shall ensure that all calculations are performed with sufficient precision to maintain accuracy.\n10. The system shall provide clear and understandable output for BMI, condition, and daily calorie intake.",
  "GomokuGame": "Title: Gomoku Game Implementation\n1. The game should be initialized with a specified board size.\n2. Players should be able to make moves on the board by specifying a row and column.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and determine if there are five of the same symbols in a row horizontally, vertically, or diagonally.\n5. If a player achieves five in a row, the game should return that player as the winner.\n6. If no player has won and the board is full, the game should indicate a draw.\n7. The game should provide a method to retrieve the current state of the board.\n8. The game should handle invalid moves (e.g., placing a piece on an already occupied spot) gracefully.\n9. The game should ensure that all moves are within the bounds of the board.\n10. The game should support different board sizes, allowing for flexibility in gameplay.",
  "Hotel": "Title: Hotel Management System\n\nFunctional Requirements:\n1. The system should allow the creation of a hotel with a specified name and initial room availability by room type.\n2. The system should provide functionality to book rooms by specifying the room type, number of rooms, and the guest's name.\n3. The system should allow guests to check in by specifying the room type, number of rooms, and their name, ensuring that the number of rooms checked in does not exceed the number of rooms booked under their name.\n4. The system should enable guests to check out by specifying the room type and number of rooms, thereby increasing the availability of those rooms.\n5. The system should provide a way to retrieve the number of available rooms for a specific room type.\n\nNon-Functional Requirements:\n1. The system should handle concurrent booking and checking operations efficiently.\n2. The system should ensure data consistency and integrity during booking, checking in, and checking out processes.\n3. The system should provide clear and concise feedback to users regarding the success or failure of their actions.\n4. The system should be scalable to accommodate an increase in the number of room types and guests.",
  "HRManagementSystem": "Title: HR Management System\n\n1. The system should allow adding an employee with unique employee ID, name, position, department, and salary.\n2. The system should prevent adding an employee if the employee ID already exists.\n3. The system should allow removing an employee by their unique employee ID.\n4. The system should allow updating an employee's details using their unique employee ID and a map of attributes to update.\n5. The system should validate that only existing attributes can be updated for an employee.\n6. The system should provide the ability to retrieve an employee's details by their unique employee ID.\n7. The system should return an empty result if an employee with the specified ID does not exist.\n8. The system should provide a function to list all employees with their details.\n9. The system should ensure that employee data is stored and retrieved efficiently.\n10. The system should handle concurrent operations safely to avoid data corruption.",
  "Interpolation": "Title: Interpolation Class\n\n1. The system shall provide a method to perform linear interpolation on a set of 1D data points.\n2. The system shall provide a method to perform bilinear interpolation on a set of 2D data points.\n3. The interpolation methods shall accept vectors of input data points and corresponding interpolated points.\n4. The output of the interpolation methods shall be a vector of interpolated values.\n5. The system shall handle cases where the interpolated point falls outside the range of the input data points by not including those points in the output.\n6. The system shall ensure that the interpolated values are calculated using linear interpolation for 1D data and bilinear interpolation for 2D data.\n7. The system shall maintain the order of interpolated points as they appear in the input vectors.\n8. The system shall be efficient in handling large datasets without significant performance degradation.\n9. The system shall be robust against invalid inputs, such as empty vectors or mismatched dimensions between input vectors.\n10. The system shall provide consistent results across multiple invocations with the same input data.",
  "JobMarketplace": "Title: Job Marketplace System\n\n1. Users can post jobs with a title, company name, and a list of requirements.\n2. Users can remove jobs from the marketplace.\n3. Users can submit their resumes with their name, skills, and experience.\n4. Users can withdraw their submitted resumes from the marketplace.\n5. Users can search for jobs based on criteria that match either the job title or any of the job requirements.\n6. The system can retrieve a list of resumes that match the requirements of a specific job.\n7. The system checks if a resume meets all the requirements of a job by comparing the skills listed in the resume against the job requirements.\n8. Jobs and resumes are stored in separate lists within the system.\n9. Equality operators are defined for both Job and Resume structures to facilitate comparison and removal operations.",
  "JSONProcessor": "Title: JSON Processor\n\n1. The system shall provide functionality to read a JSON file from a specified file path and store its contents in a JSON object.\n2. The system shall provide functionality to write a JSON object to a specified file path in a formatted manner with an indentation of 4 spaces.\n3. The system shall provide functionality to process a JSON file by removing a specified key from it and then writing the modified JSON back to the same file.\n4. The system shall return a status code indicating success or failure when reading a JSON file.\n5. The system shall return a status code indicating success or failure when writing a JSON file.\n6. The system shall return a status code indicating success or failure when processing a JSON file to remove a key.\n7. The system shall handle cases where the JSON file cannot be opened for reading or writing.\n8. The system shall handle cases where the JSON file is empty or contains invalid JSON data.\n9. The system shall handle cases where the specified key does not exist in the JSON data.",
  "KappaCalculator": "Title: Kappa Calculator\n1. The system should calculate Cohen's Kappa coefficient given a matrix of test data and the number of categories.\n2. The system should calculate Fleiss' Kappa coefficient given a matrix of test data, the number of subjects, the number of categories, and the number of ratings per subject.\n3. The system should handle input data in the form of a vector of vectors of integers.\n4. The system should utilize the Eigen library for matrix operations.\n5. The system should compute the observed agreement probability (P0) for both Cohen's and Fleiss' Kappa calculations.\n6. The system should compute the expected agreement probability (Pe) for both Cohen's and Fleiss' Kappa calculations.\n7. The system should return the calculated Kappa coefficient as a double value.\n8. The system should ensure numerical stability during the calculation of probabilities and the final Kappa coefficient.\n9. The system should be efficient in handling large datasets without significant performance degradation.\n10. The system should provide accurate results consistent with statistical definitions of Cohen's and Fleiss' Kappa coefficients.",
  "MahjongConnect": "Title: MahjongConnect Game\n\n1. The game initializes with a board of specified dimensions filled with randomly selected icons from a given set.\n2. Players can select two positions on the board to attempt a move.\n3. A valid move requires both positions to be within the board boundaries, not identical, and contain matching icons.\n4. A valid move also requires that there exists a path between the two positions consisting of adjacent cells with the same icon.\n5. Upon a valid move, the icons at the selected positions are removed from the board.\n6. The game checks if all icons have been removed from the board to determine if the game is over.\n7. The game should handle invalid moves gracefully without altering the board state.",
  "Manacher": "Title: Manacher Algorithm Implementation\n1. The system should accept a string as input.\n2. The system should identify the longest palindromic substring within the input string.\n3. The system should handle strings of varying lengths and characters.\n4. The system should return the longest palindromic substring found in the input string.\n5. The system should efficiently compute the longest palindromic substring using the Manacher's algorithm.\n6. The system should correctly handle edge cases such as empty strings or strings with no palindromic substrings longer than one character.\n7. The system should maintain the integrity of the original input string during processing.\n8. The system should not modify the input string directly but work on a modified version that includes separators between characters.\n9. The system should be able to handle special characters and spaces within the input string.\n10. The system should provide a clear and concise output of the longest palindromic substring.",
  "MetricsCalculator": "Title: Metrics Calculator\n1. The system should calculate and maintain true positives, false positives, false negatives, and true negatives based on predicted and true labels.\n2. The system should provide a method to update the metrics with new sets of predicted and true labels.\n3. The system should compute the precision of predictions using the formula: Precision = True Positives / (True Positives + False Positives).\n4. The system should compute the recall of predictions using the formula: Recall = True Positives / (True Positives + False Negatives).\n5. The system should compute the F1 score of predictions using the formula: F1 Score = 2 * (Precision * Recall) / (Precision + Recall).\n6. The system should compute the accuracy of predictions using the formula: Accuracy = (True Positives + True Negatives) / Total Predictions.\n7. The system should handle cases where division by zero might occur during the calculation of precision, recall, F1 score, or accuracy by returning 0.0 in such cases.\n8. The system should ensure that the input vectors for predicted and true labels are of the same size before processing them.\n9. The system should initialize all metric counters (true positives, false positives, false negatives, true negatives) to zero upon creation of a MetricsCalculator object.",
  "MetricsCalculator2": "Title: Metrics Calculator\n1. The system shall provide a method to calculate the Mean Reciprocal Rank (MRR) from a dataset of integer vectors and associated ranks.\n2. The system shall provide a method to calculate the Mean Average Precision (MAP) from a dataset of integer vectors and associated counts.\n3. The MRR calculation shall return a pair consisting of the average MRR value and a vector of individual MRR values for each input vector.\n4. The MAP calculation shall return a pair consisting of the average MAP value and a vector of individual AP values for each input vector.\n5. If the input dataset is empty, both MRR and MAP calculations shall return an average value of 0.0 and a vector containing a single element of 0.0.\n6. For each input vector in the dataset, if the associated rank (k) is less than or equal to 0 or the vector is empty, the corresponding MRR value shall be 0.0.\n7. The MRR for a given vector is calculated as the reciprocal of the rank of the first occurrence of the value 1 in the vector, with ranks starting at 1.\n8. The MAP for a given vector is calculated as the average precision, which is the sum of the precision at each relevant item divided by the number of relevant items.\n9. The system shall handle cases where the total number of relevant items (k) is zero by returning an AP value of 0.0 for that vector.\n10. The system shall ensure numerical stability and correctness in calculations involving division, particularly when dealing with zero denominators.",
  "MovieBookingSystem": "Title: Movie Booking System\n\n1. The system should allow adding a new movie with details such as name, price, start time, end time, and number of seats.\n2. The system should enable booking tickets for a specific movie by selecting seats, ensuring that the selected seats are available.\n3. The system should provide a list of movies that are available within a specified time range.\n4. The system should validate the input time format and throw an error if the time cannot be parsed correctly.\n5. The system should check if the requested movie exists before attempting to book tickets.\n6. The system should ensure that seat numbers provided for booking are within the valid range of the movie's seating arrangement.\n7. The system should mark booked seats as unavailable for future bookings.\n8. The system should return appropriate messages indicating success or failure of ticket booking operations.\n9. The system should handle concurrent booking requests without interfering with each other's data integrity.\n10. The system should maintain a record of all added movies and their current seating status.",
  "MusicPlayer": "Title: Music Player\n\n1. The system should allow users to add songs to the playlist.\n2. The system should allow users to remove songs from the playlist.\n3. The system should play the first song in the playlist if no song is currently playing.\n4. The system should continue playing the current song if it is already playing.\n5. The system should stop playing the current song and clear the current song reference.\n6. The system should switch to the next song in the playlist if a song is currently playing.\n7. The system should switch to the previous song in the playlist if a song is currently playing and not the first song.\n8. The system should allow users to set the volume of the player, with valid values ranging from 0 to 100.\n9. The system should shuffle the playlist randomly.\n10. The system should maintain a list of songs in the playlist.\n11. The system should keep track of the currently playing song.\n12. The system should initialize the volume to 50 when the player is created.\n13. The system should ensure that the volume value is within the valid range before setting it.",
  "NLPDataProcessor": "Title: NLP Data Processor\n\nFunctional Requirements:\n1. The system should provide a method to construct a predefined list of stop words.\n2. The system should have a functionality to remove stop words from a given list of strings.\n3. The system should process a list of strings by first constructing a stop word list and then removing these stop words from each string in the list.\n\nNon-Functional Requirements:\n1. The system should handle input strings efficiently without significant performance degradation.\n2. The system should maintain the order of words in the original strings after stop words removal.\n3. The system should be robust against empty input lists and strings.",
  "NLPDataProcessor2": "Title: NLP Data Processor\n\n1. The system should convert all characters in the input strings to lowercase.\n2. The system should remove all non-alphabetic characters except spaces from the input strings.\n3. The system should split each processed string into individual words based on whitespace.\n4. The system should count the frequency of each word across all input strings.\n5. The system should maintain the order of first appearance for words with the same frequency.\n6. The system should return the top 5 most frequent words along with their frequencies.\n7. The system should handle multiple input strings and process them accordingly.\n8. The system should be able to handle empty strings gracefully without causing errors.\n9. The system should ensure that the output map contains only the top 5 words, even if there are ties in frequency.\n10. The system should be efficient in processing large volumes of text data.",
  "NumberConverter": "Title: Number Converter\n\n1. Convert a decimal number to its binary representation as a string.\n2. Convert a binary number (given as a string) to its decimal representation as an integer.\n3. Convert a decimal number to its octal representation as a string.\n4. Convert an octal number (given as a string) to its decimal representation as an integer.\n5. Convert a decimal number to its hexadecimal representation as a string.\n6. Convert a hexadecimal number (given as a string) to its decimal representation as an integer.",
  "NumberWordFormatter": "Title: NumberWordFormatter\n\n1. The system should convert an integer into its English word representation.\n2. The system should convert a double into its English word representation, including cents.\n3. The system should convert a string representation of a number into its English word representation.\n4. The system should handle null input by returning an empty string.\n5. The system should correctly format numbers in the thousands, millions, and billions.\n6. The system should append \"ONLY\" at the end of the formatted number.\n7. The system should include \"AND CENTS\" followed by the cents in words if the number has a decimal part.\n8. The system should handle numbers less than ten, teens, tens, and hundreds appropriately.\n9. The system should trim any trailing spaces from the final formatted string.\n10. The system should represent zero as \"ZERO ONLY\".",
  "NumericEntityUnescaper": "Title: NumericEntityUnescaper\n\n1. The system shall provide a method to replace numeric character references in a string with their corresponding characters.\n2. The system shall handle both decimal and hexadecimal numeric character references.\n3. The system shall ignore malformed or incomplete numeric character references.\n4. The system shall not modify parts of the string that do not represent numeric character references.\n5. The system shall return an empty string if the input string is empty.\n6. The system shall correctly interpret the '#' symbol as the start of a numeric character reference following an '&' symbol.\n7. The system shall correctly interpret 'x' or 'X' as indicators of a hexadecimal number following the '#' symbol.\n8. The system shall correctly parse and convert numeric strings to their respective integer values.\n9. The system shall handle exceptions during the conversion process without crashing and return the current state of the output string.\n10. The system shall ensure that only valid hexadecimal characters ('0'-'9', 'a'-'f', 'A'-'F') are considered part of the numeric character reference.",
  "Order": "Title: Restaurant Order Management System\n1. The system should allow adding dishes to an order from a predefined menu.\n2. Each dish in the menu has a name, price, and available count.\n3. When adding a dish to the order, the system should check if the requested quantity is available in the menu.\n4. If the requested quantity of a dish is not available, the addition should fail.\n5. If the requested quantity is available, the system should reduce the count of that dish in the menu by the requested amount.\n6. The system should maintain a list of selected dishes for the current order.\n7. The system should calculate the total cost of the selected dishes, applying any applicable sales discounts.\n8. Sales discounts are stored as a map where the key is the dish name and the value is the discount factor (e.g., 0.9 for a 10% discount).\n9. The system should provide a function to checkout the current order, which calculates the total cost, clears the list of selected dishes, and returns the total amount.\n10. If no dishes are selected when checking out, the system should return a total of zero.",
  "PageUtil": "Title: PageUtil Class\n\n1. The system shall accept a vector of integers and a page size upon initialization.\n2. The system shall provide a method to retrieve a specific page of data based on the page number.\n3. The system shall ensure that if an invalid page number is requested, an empty vector is returned.\n4. The system shall provide a method to retrieve detailed information about a specific page, including current page number, items per page, total pages, total items, whether there is a previous page, whether there is a next page, and the data for the current page.\n5. The system shall ensure that if an invalid page number is requested for page information, an empty map is returned.\n6. The system shall provide a search functionality that allows searching for items containing a specific keyword within the data.\n7. The search functionality shall return a map containing the keyword, total number of results, total pages of results, and the list of results matching the keyword.\n8. The system shall handle cases where no items match the search keyword by returning zero results.\n9. The system shall calculate the total number of pages dynamically based on the total number of items and the specified page size.\n10. The system shall ensure that the page size is used consistently across all operations involving pagination.",
  "PersonRequest": "Title: PersonRequest Class\n\n1. The system must accept a person's name, sex, and phone number as input.\n2. The system must validate that the name is not empty and does not exceed 33 characters.\n3. The system must validate that the sex is one of the following values: \"Man\", \"Woman\", or \"UGM\".\n4. The system must validate that the phone number is not empty, consists of exactly 11 digits, and contains only numeric characters.\n5. The system must store the validated name, sex, and phone number in the respective attributes of the `PersonRequest` class.\n6. If any validation fails, the corresponding attribute should be set to an empty string.",
  "RPGCharacter": "Title: RPG Character Management System\n1. The system should allow the creation of an RPG character with attributes including name, health points (HP), attack power, defense, level, and experience points (EXP).\n2. The system should provide functionality for an RPG character to attack another character, reducing the target's HP based on the attacker's attack power and the defender's defense.\n3. The system should enable an RPG character to heal, increasing their HP by 10 points, with a maximum HP cap of 100.\n4. The system should support the accumulation of experience points (EXP) for an RPG character, which can lead to leveling up.\n5. The system should automatically level up an RPG character when they accumulate enough EXP, resetting their EXP to zero and increasing their level, HP, attack power, and defense.\n6. The system should prevent an RPG character from leveling beyond level 100.\n7. The system should provide a method to check if an RPG character is still alive (i.e., their HP is greater than zero).\n8. The system should expose methods to retrieve the current values of HP, EXP, attack power, defense, and level for an RPG character.\n9. The system should allow setting a new value for an RPG character's HP directly.",
  "Server": "Title: Server Class Functionality\n\n1. The server should maintain a whitelist of addresses.\n2. The server should provide functionality to add an address to the whitelist, ensuring no duplicates are added.\n3. The server should provide functionality to remove an address from the whitelist.\n4. The server should accept incoming data in the form of a map containing \"addr\" and \"content\" keys.\n5. The server should reject incoming data if it does not contain both \"addr\" and \"content\" keys.\n6. The server should only process incoming data if the address is present in the whitelist.\n7. The server should store the received data in a map if the address is whitelisted.\n8. The server should allow sending data with a specified address and content.\n9. The server should validate that the outgoing data contains both \"addr\" and \"content\" keys.\n10. The server should provide functionality to display either the last sent or received data based on the type specified (\"send\" or \"receive\").\n11. The server should return an empty map if the requested type for display is neither \"send\" nor \"receive\".",
  "ShoppingCart": "Title: ShoppingCart Management System\n1. The system should allow users to add items to a shopping cart with a specified price and quantity.\n2. The system should allow users to remove items from the shopping cart with a specified quantity, and if the quantity reaches zero or less, the item should be completely removed from the cart.\n3. The system should provide a function to view all items currently in the shopping cart along with their prices and quantities.\n4. The system should calculate and provide the total price of all items in the shopping cart.\n5. The system should handle cases where an item is added multiple times by updating the quantity and price accordingly.\n6. The system should ensure that the shopping cart can store and manage a large number of items efficiently.\n7. The system should maintain data integrity, ensuring that no negative quantities or prices are stored.\n8. The system should be thread-safe if accessed concurrently by multiple users or processes.",
  "SignInSystem": "Title: User Sign-In System\n1. The system should allow adding new users by their username.\n2. The system should allow signing in users by their username.\n3. The system should provide functionality to check if a specific user is signed in.\n4. The system should provide functionality to check if all users are signed in.\n5. The system should provide a list of usernames for users who are not signed in.",
  "Snake": "Title: Snake Game Implementation\n1. The game should initialize with a snake of length 1 at the center of the screen.\n2. The snake should be able to move in four directions (up, down, left, right) based on user input.\n3. When the snake moves, it should grow by one block if it eats the food.\n4. The game should randomly place food on the screen, ensuring that the food does not appear on the snake's body.\n5. If the snake collides with its own body or the boundaries of the screen, the game should reset.\n6. The game should keep track of the score, which increases by 100 points each time the snake eats food.\n7. The game should provide methods to retrieve the current length of the snake, the positions of all blocks of the snake, the current score, the position of the food, and the dimensions of the screen.\n8. The game should handle screen wrapping, allowing the snake to reappear on the opposite side of the screen when it moves off-screen.\n9. The game should ensure that the food position is recalculated until a valid position (not overlapping with the snake) is found.\n10. The game should reset the snake's length, position, and score to their initial values when a collision occurs.",
  "SQLQueryBuilder": "Title: SQL Query Builder\n\n1. The system shall provide a method to generate a SELECT SQL query with specified table, columns, and optional WHERE conditions.\n2. The system shall provide a method to generate an INSERT SQL query with specified table and data pairs.\n3. The system shall provide a method to generate a DELETE SQL query with specified table and optional WHERE conditions.\n4. The system shall provide a method to generate an UPDATE SQL query with specified table, data pairs, and optional WHERE conditions.\n5. The SELECT query shall include all columns if no specific columns are provided.\n6. The WHERE conditions in SELECT, DELETE, and UPDATE queries shall be combined using the AND operator.\n7. The generated SQL queries shall use single quotes around string values in the WHERE clause.\n8. The INSERT query shall format column names and values correctly within parentheses.\n9. The UPDATE query shall format column assignments correctly separated by commas.\n10. The system shall handle empty WHERE conditions gracefully without adding unnecessary SQL syntax.",
  "StockPortfolioTracker": "Title: Stock Portfolio Tracker\n\n1. The system should allow initialization of a stock portfolio tracker with a specified cash balance.\n2. The system should support adding stocks to the portfolio, updating the quantity if the stock already exists.\n3. The system should support removing stocks from the portfolio, reducing the quantity or removing the stock entirely if the quantity reaches zero.\n4. The system should allow buying stocks, deducting the cost from the cash balance and adding the stocks to the portfolio.\n5. The system should allow selling stocks, adding the proceeds to the cash balance and removing the stocks from the portfolio.\n6. The system should calculate the total value of the portfolio, including the cash balance and the value of all stocks.\n7. The system should provide a summary of the portfolio, listing each stock's name and its total value.\n8. The system should provide the value of a specific stock based on its price and quantity.\n9. The system should allow retrieval of the current portfolio as a list of stocks.\n10. The system should allow retrieval of the current cash balance.\n11. The system should allow setting a new portfolio, replacing the existing one.\n12. The system should ensure that operations involving stock quantities do not result in negative quantities.\n13. The system should ensure that buying stocks does not proceed if there is insufficient cash balance.\n14. The system should maintain data integrity by ensuring that stock names and quantities are accurately tracked and updated.\n15. The system should provide consistent and accurate values for stock and portfolio calculations.",
  "StudentDatabaseProcessor": "Title: Student Database Processor\n\n1. The system shall provide functionality to create a table named \"students\" in a SQLite database if it does not already exist. The table shall have columns for id (integer, primary key), name (text), age (integer), gender (text), and grade (integer).\n\n2. The system shall allow insertion of new student records into the \"students\" table using a map containing student data with keys \"name\", \"age\", \"gender\", and \"grade\".\n\n3. The system shall enable searching for students by their name in the \"students\" table and return a list of matching student records, each represented as a map with keys \"id\", \"name\", \"age\", \"gender\", and \"grade\".\n\n4. The system shall support deletion of student records from the \"students\" table based on the student's name.\n\n5. The system shall use parameterized queries to prevent SQL injection attacks when interacting with the SQLite database.\n\n6. The system shall handle database connections by opening a connection before executing any query and closing it afterward.\n\n7. The system shall be able to execute arbitrary SQL queries provided as strings, along with parameters for those queries.\n\n8. The system shall be able to retrieve the results of a query as a vector of vectors of strings, where each inner vector represents a row of the result set.\n\n9. The system shall be compatible with the SQLite database engine and utilize the winsqlite3 library for database operations.\n\n10. The system shall ensure that all database operations are performed safely and efficiently, minimizing the risk of data corruption or loss.",
  "TextFileProcessor": "Title: Text File Processor\n1. The system should be able to initialize with a filename provided during object creation.\n2. The system should provide functionality to read the contents of a text file and convert it into a JSON object.\n3. The system should provide functionality to read the raw contents of a text file as a string.\n4. The system should provide functionality to write a given string content to a text file, overwriting any existing content.\n5. The system should process the contents of a text file by removing all non-alphabetic characters and writing the processed content back to the same file.\n6. The system should return the processed string after writing it to the file.\n7. The system should handle file operations without throwing exceptions, assuming valid filenames and accessible files.\n8. The system should maintain encapsulation by keeping the filename private and providing public methods for file operations.\n9. The system should be extensible, allowing derived classes to override the read and write file methods.\n10. The system should efficiently handle large text files without consuming excessive memory.",
  "Thermostat": "Title: Thermostat Control System\n1. The system should initialize with a current temperature, a target temperature, and an operating mode.\n2. The system should provide a method to retrieve the current target temperature.\n3. The system should allow setting a new target temperature.\n4. The system should provide a method to retrieve the current operating mode.\n5. The system should allow setting the operating mode to either \"heat\" or \"cool\". Any other mode should be rejected.\n6. The system should automatically set the operating mode based on the comparison between the current temperature and the target temperature.\n7. The system should check for conflicts between the current temperature and the operating mode. If there is a conflict, it should attempt to resolve it by adjusting the mode.\n8. The system should simulate the operation of adjusting the current temperature to match the target temperature, counting the number of time units required to achieve this.",
  "TimeUtils": "Title: TimeUtils Class\n\n1. The system shall provide a method to retrieve the current time in the format \"HH:MM:SS\".\n2. The system shall provide a method to retrieve the current date in the format \"YYYY-MM-DD\".\n3. The system shall provide a method to add a specified number of seconds to the current time and return the new time in the format \"HH:MM:SS\".\n4. The system shall provide a method to convert a date-time string in the format \"YYYY-MM-DD HH:MM:SS\" to a `std::tm` structure.\n5. The system shall provide a method to convert a `std::tm` structure to a date-time string in the format \"YYYY-MM-DD HH:MM:SS\".\n6. The system shall provide a method to calculate the difference in minutes between two date-time strings provided in the format \"YYYY-MM-DD HH:MM:SS\".\n7. The system shall provide a method to generate a date-time string from individual components (year, month, day, hour, minute, second) in the format \"YYYY-MM-DD HH:MM:SS\".",
  "TwentyFourPointGame": "Title: Twenty-Four Point Game\n\n1. The system should generate a set of four random integers between 1 and 9 inclusive when requested.\n2. The system should accept an arithmetic expression as input and determine if it evaluates to 24 using the generated integers.\n3. If the input expression is \"pass\", the system should generate a new set of four random integers and return them.\n4. The system should validate that the input expression uses only the generated integers and valid arithmetic operators (+, -, *, /, ^).\n5. The system should correctly handle operator precedence in the evaluation of the arithmetic expression.\n6. The system should return a vector containing the integer 1 if the expression evaluates to 24, otherwise, it should return an empty vector.\n7. The system should allow setting a custom set of four integers for evaluation purposes.\n8. The system should handle invalid expressions gracefully by returning an empty vector.\n9. The system should ensure that each digit used in the expression corresponds to one of the generated integers and is not reused more times than it appears in the generated set.\n10. The system should provide a mechanism to retrieve the current set of four generated integers.",
  "URLHandler": "Title: URLHandler Class\n\n1. The system shall provide a class named `URLHandler` that accepts a URL as a string during initialization.\n2. The system shall allow retrieval of the scheme component from the URL.\n3. The system shall allow retrieval of the host component from the URL.\n4. The system shall allow retrieval of the path component from the URL.\n5. The system shall allow retrieval of the query parameters from the URL as a map of strings where each key-value pair represents a parameter name and its corresponding value.\n6. The system shall allow retrieval of the fragment component from the URL.\n7. The system shall handle URLs without a scheme by returning an empty string for the scheme component.\n8. The system shall handle URLs without a path by returning an empty string for the path component.\n9. The system shall handle URLs without query parameters by returning an empty map for the query parameters.\n10. The system shall handle URLs without a fragment by returning an empty string for the fragment component.\n11. The system shall correctly parse and separate query parameters even if they are URL-encoded.\n12. The system shall not modify the original URL string provided during initialization.",
  "UrlPath": "Title: URL Path Parser\n\n1. The system should provide a class named `UrlPath` to handle URL paths.\n2. The `UrlPath` class should have a method `add` that accepts a string segment, processes it, and adds it to the internal list of segments.\n3. The `UrlPath` class should have a method `parse` that takes a URL path and a character set as input, processes the path, and populates the internal list of segments.\n4. The `UrlPath` class should have a static method `fix_path` that removes leading and trailing slashes from a given path.\n5. The `UrlPath` class should have a method `get_segments` that returns the list of processed segments.\n6. The `UrlPath` class should have a method `with_end_tag` that returns a boolean indicating whether the original path ended with a slash.\n7. The `parse` method should decode percent-encoded characters in each segment of the path.\n8. The `parse` method should handle empty paths gracefully without causing errors.\n9. The `add` method should ensure that each added segment is processed using the `fix_path` method before being stored.\n10. The system should support UTF-8 encoded paths and segments.\n11. The `parse` method should not process or decode segments that contain percent signs (`%`) without a valid encoding sequence following them.",
  "UserLoginDB": "Title: UserLoginDB\n\n1. The system shall provide functionality to insert a new user into the database with a specified username and password.\n2. The system shall allow searching for a user by their username and return the username and password if found.\n3. The system shall enable deletion of a user from the database based on their username.\n4. The system shall validate user login credentials by checking if the provided username and password match an entry in the database.\n5. The system shall automatically create a 'users' table upon initialization if it does not already exist.\n6. The system shall handle SQLite errors gracefully by throwing exceptions with descriptive error messages.\n7. The system shall ensure that all SQLite statements are properly finalized after execution to prevent memory leaks.\n8. The system shall manage the opening and closing of the database connection to ensure resources are properly utilized and released.\n9. The system shall store usernames and passwords as text in the 'users' table.\n10. The system shall be thread-safe in managing database connections and statements to prevent data corruption or race conditions.",
  "VectorUtil": "Title: VectorUtil Class\n\nFunctional Requirements:\n1. Calculate the similarity between two vectors using cosine similarity.\n2. Compute the cosine similarity between a single vector and a list of vectors.\n3. Determine the similarity between the mean vectors of two lists of vectors.\n4. Generate an inverse document frequency (IDF) weight dictionary based on the total number of documents and a dictionary of term counts.\n\nNon-Functional Requirements:\n1. The system should handle vectors of any fixed size specified at compile time.\n2. The system should throw an exception if either of the input lists in `n_similarity` is empty.\n3. The system should return a similarity value of 0 for vectors with zero norm.\n4. The system should efficiently compute the norm and normalization of vectors.\n5. The system should accurately compute logarithmic values for IDF calculations.",
  "Warehouse": "Title: Warehouse Management System\n\n1. The system should allow adding new products with a unique product ID, name, and initial quantity.\n2. The system should allow updating the quantity of an existing product by adding or subtracting a specified amount.\n3. The system should provide functionality to retrieve the current quantity of a product based on its product ID.\n4. The system should enable creating an order for a product if the requested quantity is available in the inventory, reducing the inventory quantity accordingly.\n5. The system should support changing the status of an order to a specified new status.\n6. The system should allow tracking the status of an order using its order ID.\n7. The system should provide access to the entire list of orders.\n8. The system should provide access to the entire inventory list.\n9. The system should handle cases where a product does not exist in the inventory when attempting to update its quantity or create an order.\n10. The system should handle cases where an order does not exist when attempting to change its status or track it.",
  "WeatherSystem": "Title: Weather System\n\n1. The system should allow initialization with a city name.\n2. The system should provide a method to query weather information for the initialized city from a provided list of weather data.\n3. The system should support querying temperature in either Celsius or Fahrenheit units.\n4. The system should convert the temperature to the requested unit if the stored unit differs from the requested unit.\n5. The system should allow setting a new city.\n6. The system should allow setting a new temperature.\n7. The system should provide functionality to convert temperatures between Celsius and Fahrenheit.\n8. The system should provide a method to retrieve the current city.",
  "Words2Numbers": "Title: Words2Numbers Translator\n1. The system should convert a string of English words representing numbers into their corresponding integer values.\n2. The system should handle numbers from zero to trillions.\n3. The system should recognize and process ordinal numbers such as \"first,\" \"second,\" \"third,\" etc.\n4. The system should correctly interpret hyphenated words by replacing hyphens with spaces before processing.\n5. The system should validate the input string to ensure it only contains valid number words or ordinal words.\n6. The system should maintain the original words in the output string followed by the converted numerical value.\n7. The system should handle the word \"and\" appropriately without affecting the numerical conversion.\n8. The system should be able to process and convert numbers expressed in both singular and plural forms where applicable.\n9. The system should ignore any unrecognized words in the input string during the conversion process but should flag them during validation.\n10. The system should be case-insensitive when processing the input string."
}
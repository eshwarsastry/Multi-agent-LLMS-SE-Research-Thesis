{
  "AccessGatewayFilter": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "AreaCalculator": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "ArrangementCalculator": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "AssessmentSystem": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "AutomaticGuitarSimulator": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "AvgPartition": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "BankAccount": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "BinaryDataProcessor": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nclass BinaryDataProcessor:\n    def __init__(self, binary_string):\n        self.binary_string = binary_string\n        self.clean_non_binary_chars()\n\n    def clean_non_binary_chars(self):\n        # Remove any non-binary characters ('0' or '1') from the input string\n        self.binary_string = ''.join(c for c in self.binary_string if c in '01')\n\n    def calculate_binary_info(self):\n        # Calculate the percentage of zeroes and ones in the cleaned binary string\n        if not self.binary_string:\n            raise ValueError(\"The binary string is empty after cleaning.\")\n        \n        zeroes_count = self.binary_string.count('0')\n        ones_count = len(self.binary_string) - zeroes_count\n        total_length = len(self.binary_string)\n\n        zeroes_percentage = zeroes_count / total_length\n        ones_percentage = ones_count / total_length\n\n        return {\n            \"Zeroes\": zeroes_percentage,\n            \"Ones\": ones_percentage,\n            \"Bit length\": total_length\n        }\n\n    def convert_to_ascii(self):\n        # Convert the cleaned binary string into an ASCII string\n        ascii_string = ''\n        for i in range(0, len(self.binary_string), 8):\n            byte = self.binary_string[i:i+8]\n            if len(byte) == 8:  # Ensure we have a full byte\n                ascii_string += chr(int(byte, 2))\n        return ascii_string\n\n    def convert_to_utf8(self):\n        # Convert the cleaned binary string into a UTF-8 string\n        return self.convert_to_ascii()\n\n# Example usage:\n# processor = BinaryDataProcessor(\"110010101111001\")\n# print(processor.calculate_binary_info())\n# print(processor.convert_to_ascii())\n# print(processor.convert_to_utf8())\n\n",
  "BitStatusUtil": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "BlackjackGame": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "BookManagement": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "BookManagementDB": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "CalendarUtil": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "ChandrasekharSieve": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Chat": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "ClassRegistrationSystem": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Classroom": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "CookiesUtil": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport json\nimport os\n\nclass CookiesUtil:\n    def __init__(self, cookies_file):\n        self.cookies_file = cookies_file\n        self.cookies = {}\n\n    def get_cookies(self, response):\n        if 'cookies' in response:\n            self.cookies = response['cookies']\n        self._save_cookies()\n\n    def load_cookies(self):\n        cookies_data = {}\n        try:\n            with open(self.cookies_file, 'r') as file:\n                cookies_data = json.load(file)\n        except FileNotFoundError:\n            print(f\"Error: The file {self.cookies_file} does not exist.\", file=os.sys.stderr)\n        except json.JSONDecodeError as e:\n            print(f\"Error reading JSON file: {e}\", file=os.sys.stderr)\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\", file=os.sys.stderr)\n        \n        return cookies_data\n\n    def _save_cookies(self):\n        try:\n            with open(self.cookies_file, 'w') as file:\n                json.dump(self.cookies, file, indent=4)\n            return True\n        except IOError as e:\n            print(f\"Error writing JSON file: {e}\", file=os.sys.stderr)\n            return False\n        except Exception as e:\n            print(f\"An unexpected error occurred: {e}\", file=os.sys.stderr)\n            return False\n\n    def set_cookies(self, request):\n        cookies_str = '; '.join(f\"{key}={value}\" for key, value in self.cookies.items())\n        request['cookies'] = cookies_str\n\n",
  "CSVProcessor": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport csv\nimport os\n\nclass CSVProcessor:\n    def __init__(self):\n        pass\n\n    def read_csv(self, file_name):\n        try:\n            with open(file_name, mode='r', newline='') as file:\n                reader = csv.reader(file)\n                title = next(reader)\n                data = [row for row in reader]\n            return title, data\n        except FileNotFoundError:\n            return [], []\n\n    def write_csv(self, data, file_name):\n        try:\n            with open(file_name, mode='w', newline='') as file:\n                writer = csv.writer(file)\n                for row in data:\n                    writer.writerow(row)\n            return 1\n        except IOError:\n            return 0\n\n    def process_csv_data(self, N, save_file_name):\n        title, data = self.read_csv(save_file_name)\n        if not title or N >= len(title):\n            return 0\n\n        # Process the specified column\n        for row in data:\n            if N < len(row):\n                row[N] = row[N].upper()\n\n        # Combine title and processed data\n        new_data = [title] + data\n        processed_file_name = f\"{os.path.splitext(save_file_name)[0]}_process.csv\"\n        return self.write_csv(new_data, processed_file_name)\n\n# Example usage:\n# processor = CSVProcessor()\n# result = processor.process_csv_data(1, 'example.csv')\n# print(\"Processed successfully\" if result else \"Processing failed\")\n\n",
  "CurrencyConverter": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nclass CurrencyConverter:\n    def __init__(self):\n        self.rates = {\n            \"USD\": 1.0,\n            \"EUR\": 0.85,\n            \"GBP\": 0.72,\n            \"JPY\": 110.15,\n            \"CAD\": 1.23,\n            \"AUD\": 1.34,\n            \"CNY\": 6.40,\n        }\n        self.currency_order = [\"USD\", \"EUR\", \"GBP\", \"JPY\", \"CAD\", \"AUD\", \"CNY\"]\n\n    def convert(self, amount, from_currency, to_currency):\n        if from_currency == to_currency:\n            return amount\n\n        if from_currency not in self.rates or to_currency not in self.rates:\n            raise ValueError(\"Unsupported currency\")\n\n        from_rate = self.rates[from_currency]\n        to_rate = self.rates[to_currency]\n\n        converted_amount = (amount / from_rate) * to_rate\n        return converted_amount\n\n    def get_supported_currencies(self):\n        return self.currency_order\n\n    def add_currency_rate(self, currency, rate):\n        if currency in self.rates:\n            return False\n        self.rates[currency] = rate\n        self.currency_order.append(currency)\n        return True\n\n    def update_currency_rate(self, currency, new_rate):\n        if currency not in self.rates:\n            return False\n        self.rates[currency] = new_rate\n        return True\n\n",
  "DatabaseProcessor": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport sqlite3\n\nclass DatabaseProcessor:\n    def __init__(self, database_name):\n        self.database_name = database_name\n\n    def _open_database(self):\n        try:\n            return sqlite3.connect(self.database_name)\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to open database: {e}\")\n\n    def create_table(self, table_name, key1='key1', key2='key2'):\n        db = self._open_database()\n        try:\n            create_table_query = f\"CREATE TABLE IF NOT EXISTS {table_name} (id INTEGER PRIMARY KEY, {key1} TEXT, {key2} INTEGER)\"\n            db.execute(create_table_query)\n            db.commit()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to create table: {e}\")\n        finally:\n            db.close()\n\n    def insert_into_database(self, table_name, data):\n        db = self._open_database()\n        try:\n            insert_query = f\"INSERT INTO {table_name} (name, age) VALUES (?, ?)\"\n            cursor = db.cursor()\n            for item in data:\n                cursor.execute(insert_query, (item['name'], int(item['age'])))\n            db.commit()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to insert data: {e}\")\n        finally:\n            db.close()\n\n    def search_database(self, table_name, name):\n        db = self._open_database()\n        result = []\n        try:\n            query = f\"SELECT * FROM {table_name} WHERE name = ?\"\n            cursor = db.cursor()\n            cursor.execute(query, (name,))\n            for row in cursor.fetchall():\n                result.append(list(row))\n        except sqlite3.Error as e:\n            print(f\"Failed to search database: {e}\")\n        finally:\n            db.close()\n        return result\n\n    def delete_from_database(self, table_name, name):\n        db = self._open_database()\n        try:\n            delete_query = f\"DELETE FROM {table_name} WHERE name = ?\"\n            cursor = db.cursor()\n            cursor.execute(delete_query, (name,))\n            db.commit()\n        except sqlite3.Error as e:\n            raise RuntimeError(f\"Failed to delete data: {e}\")\n        finally:\n            db.close()\n\n",
  "DataStatistics": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "DiscountStrategy": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nclass DiscountStrategy:\n    class PromoType:\n        FidelityPromo = 'fidelity'\n        BulkItemPromo = 'bulk_item'\n        LargeOrderPromo = 'large_order'\n        NoPromo = 'no_promo'\n\n    def __init__(self, customer, cart, promo=PromoType.NoPromo):\n        self.customer = customer\n        self.cart = cart\n        self.promo = promo\n\n    def total(self):\n        total = 0.0\n        for item in self.cart:\n            try:\n                quantity = item.get('quantity', 0)\n                price = item.get('price', 0)\n                total += quantity * price\n            except KeyError:\n                print(\"Missing 'quantity' or 'price' in cart item.\")\n        return total\n\n    def due(self):\n        return self.total() - self.promotion()\n\n    def promotion(self):\n        if self.promo == self.PromoType.FidelityPromo:\n            return self.fidelity_discount()\n        elif self.promo == self.PromoType.BulkItemPromo:\n            return self.bulk_item_discount()\n        elif self.promo == self.PromoType.LargeOrderPromo:\n            return self.large_order_discount()\n        else:\n            return 0.0\n\n    def fidelity_discount(self):\n        fidelity = self.customer.get('fidelity', 0)\n        if fidelity >= 1000.0:\n            return 0.05 * self.total()\n        return 0.0\n\n    def bulk_item_discount(self):\n        discount = 0.0\n        for item in self.cart:\n            try:\n                quantity = item.get('quantity', 0)\n                price = item.get('price', 0)\n                if quantity >= 20:\n                    discount += quantity * price * 0.1\n            except KeyError:\n                print(\"Missing 'quantity' or 'price' in cart item.\")\n        return discount\n\n    def large_order_discount(self):\n        num_items = len(self.cart)\n        if num_items >= 10:\n            return 0.07 * self.total()\n        return 0.0\n\n",
  "EmailClient": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "ExcelProcessor": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "FitnessTracker": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nclass FitnessTracker:\n    BMI_STD = {\n        \"male\": [20.0, 25.0],\n        \"female\": [19.0, 24.0]\n    }\n\n    def __init__(self, height, weight, age, sex):\n        self.height = height\n        self.weight = weight\n        self.age = age\n        self.sex = sex.lower()\n\n    def get_bmi(self):\n        try:\n            return self.weight / (self.height ** 2)\n        except ZeroDivisionError:\n            print(\"Height cannot be zero.\")\n            return None\n\n    def condition_judge(self):\n        bmi = self.get_bmi()\n        if bmi is None:\n            return None\n        bmi_range = self.BMI_STD.get(self.sex, [18.5, 24.5])  # Default to a general range if sex is not recognized\n        if bmi > bmi_range[1]:\n            return 1\n        elif bmi < bmi_range[0]:\n            return -1\n        else:\n            return 0\n\n    def calculate_calorie_intake(self):\n        bmr = self._calculate_bmr()\n        if bmr is None:\n            return None\n        condition = self.condition_judge()\n        if condition == 1:\n            return bmr * 1.2  # Overweight\n        elif condition == -1:\n            return bmr * 1.6  # Underweight\n        else:\n            return bmr * 1.4  # Normal\n\n    def _calculate_bmr(self):\n        try:\n            if self.sex == \"male\":\n                return 10 * self.weight + 6.25 * self.height - 5 * self.age + 5\n            elif self.sex == \"female\":\n                return 10 * self.weight + 6.25 * self.height - 5 * self.age - 161\n            else:\n                print(\"Invalid sex input. Please enter 'male' or 'female'.\")\n                return None\n        except TypeError:\n            print(\"Invalid input types for height, weight, or age.\")\n            return None\n\n\n# Example usage:\n# tracker = FitnessTracker(1.75, 70, 30, \"male\")\n# print(\"BMI:\", tracker.get_bmi())\n# print(\"Condition:\", tracker.condition_judge())\n# print(\"Calorie Intake:\", tracker.calculate_calorie_intake())\n\n",
  "GomokuGame": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Hotel": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nclass Hotel:\n    def __init__(self, name, rooms):\n        \"\"\"\n        Initialize the hotel with a name and a dictionary of room types and their availability.\n        \n        :param name: Name of the hotel\n        :param rooms: Dictionary with room types as keys and number of available rooms as values\n        \"\"\"\n        self.name = name\n        self.available_rooms = rooms\n        self.booked_rooms = {}\n\n    def book_room(self, room_type, room_number, name):\n        \"\"\"\n        Book rooms for a guest.\n        \n        :param room_type: Type of the room to book\n        :param room_number: Number of rooms to book\n        :param name: Name of the guest\n        :return: Success message or available room count if less than requested\n        \"\"\"\n        if room_type not in self.available_rooms:\n            return \"False.\"\n\n        if room_number <= self.available_rooms[room_type]:\n            if room_type not in self.booked_rooms:\n                self.booked_rooms[room_type] = {}\n            if name in self.booked_rooms[room_type]:\n                self.booked_rooms[room_type][name] += room_number\n            else:\n                self.booked_rooms[room_type][name] = room_number\n            self.available_rooms[room_type] -= room_number\n            return \"Success!\"\n        elif self.available_rooms[room_type] != 0:\n            return str(self.available_rooms[room_type])\n        else:\n            return \"False.\"\n\n    def check_in(self, room_type, room_number, name):\n        \"\"\"\n        Check in guests who have booked rooms.\n        \n        :param room_type: Type of the room to check in\n        :param room_number: Number of rooms to check in\n        :param name: Name of the guest\n        :return: True if check-in is successful, False otherwise\n        \"\"\"\n        if room_type not in self.booked_rooms:\n            return False\n\n        if name in self.booked_rooms[room_type]:\n            if room_number > self.booked_rooms[room_type][name]:\n                return False\n            elif room_number == self.booked_rooms[room_type][name]:\n                del self.booked_rooms[room_type][name]\n            else:\n                self.booked_rooms[room_type][name] -= room_number\n            return True\n        return False\n\n    def check_out(self, room_type, room_number):\n        \"\"\"\n        Check out guests and make rooms available again.\n        \n        :param room_type: Type of the room to check out\n        :param room_number: Number of rooms to check out\n        \"\"\"\n        if room_type in self.available_rooms:\n            self.available_rooms[room_type] += room_number\n        else:\n            self.available_rooms[room_type] = room_number\n\n    def get_available_rooms(self, room_type):\n        \"\"\"\n        Get the number of available rooms for a specific room type.\n        \n        :param room_type: Type of the room\n        :return: Number of available rooms\n        \"\"\"\n        return self.available_rooms.get(room_type, 0)\n\n",
  "HRManagementSystem": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Interpolation": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "JobMarketplace": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "JSONProcessor": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport json\nimport os\n\nclass JSONProcessor:\n    \n    def read_json(self, file_path):\n        \"\"\"\n        Reads a JSON file from the specified file path and stores its contents in a JSON object.\n        Returns 1 on success, 0 if the file cannot be opened, and -1 if the file is empty or contains invalid JSON data.\n        \"\"\"\n        try:\n            with open(file_path, 'r') as file:\n                data = json.load(file)\n                if not data:\n                    return -1  # File is empty or contains no data\n                return data, 1\n        except (FileNotFoundError, PermissionError):\n            return None, 0  # File cannot be opened\n        except json.JSONDecodeError:\n            return None, -1  # Invalid JSON data\n\n    def write_json(self, data, file_path):\n        \"\"\"\n        Writes a JSON object to the specified file path in a formatted manner with an indentation of 4 spaces.\n        Returns 1 on success, -1 if the file cannot be written.\n        \"\"\"\n        try:\n            with open(file_path, 'w') as file:\n                json.dump(data, file, indent=4)\n            return 1\n        except (IOError, PermissionError):\n            return -1\n\n    def process_json(self, file_path, remove_key):\n        \"\"\"\n        Processes a JSON file by removing a specified key from it and then writing the modified JSON back to the same file.\n        Returns 1 on success, 0 if the file cannot be processed or the key does not exist, and -1 if there is an error writing the file.\n        \"\"\"\n        data, result = self.read_json(file_path)\n\n        if result != 1:\n            return 0  # File cannot be read or is invalid\n\n        if remove_key in data:\n            del data[remove_key]\n            return self.write_json(data, file_path)\n        else:\n            return 0  # Key does not exist in the JSON data\n\n",
  "KappaCalculator": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "MahjongConnect": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Manacher": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "MetricsCalculator": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "MetricsCalculator2": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "MovieBookingSystem": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "MusicPlayer": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport random\nfrom typing import List\n\nclass MusicPlayer:\n    def __init__(self):\n        self.playlist: List[str] = []\n        self.current_song: str = \"\"\n        self.volume: int = 50\n\n    def add_song(self, song: str) -> None:\n        \"\"\"Add a song to the playlist.\"\"\"\n        self.playlist.append(song)\n\n    def remove_song(self, song: str) -> None:\n        \"\"\"Remove a song from the playlist and stop playing it if it's the current song.\"\"\"\n        if song in self.playlist:\n            self.playlist.remove(song)\n            if self.current_song == song:\n                self.stop()\n\n    def play(self) -> str:\n        \"\"\"Play the first song in the playlist or continue playing the current song.\"\"\"\n        if self.playlist:\n            if self.current_song and self.current_song in self.playlist:\n                return self.current_song\n            else:\n                self.current_song = self.playlist[0]\n                return self.current_song\n        return \"\"\n\n    def stop(self) -> bool:\n        \"\"\"Stop playing the current song.\"\"\"\n        if self.current_song:\n            self.current_song = \"\"\n            return True\n        return False\n\n    def switch_song(self) -> bool:\n        \"\"\"Switch to the next song in the playlist.\"\"\"\n        if self.current_song and self.current_song in self.playlist:\n            current_index = self.playlist.index(self.current_song)\n            if current_index < len(self.playlist) - 1:\n                self.current_song = self.playlist[current_index + 1]\n                return True\n        return False\n\n    def previous_song(self) -> bool:\n        \"\"\"Switch to the previous song in the playlist.\"\"\"\n        if self.current_song and self.current_song in self.playlist:\n            current_index = self.playlist.index(self.current_song)\n            if current_index > 0:\n                self.current_song = self.playlist[current_index - 1]\n                return True\n        return False\n\n    def set_volume(self, volume: int) -> bool:\n        \"\"\"Set the volume if it's within the valid range.\"\"\"\n        if self._is_valid_volume(volume):\n            self.volume = volume\n            return True\n        return False\n\n    def shuffle(self) -> bool:\n        \"\"\"Shuffle the playlist.\"\"\"\n        if self.playlist:\n            random.shuffle(self.playlist)\n            return True\n        return False\n\n    def _is_valid_volume(self, volume: int) -> bool:\n        \"\"\"Check if the volume is within the valid range.\"\"\"\n        return 0 <= volume <= 100\n\n",
  "NLPDataProcessor": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "NLPDataProcessor2": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport re\nfrom collections import defaultdict, Counter, OrderedDict\n\nclass NLPDataProcessor:\n    def __init__(self):\n        self.first_appear = {}\n\n    def to_lowercase(self, string):\n        return string.lower()\n\n    def remove_non_alpha(self, string):\n        return re.sub(r'[^a-z\\s]', '', string)\n\n    def process_data(self, string_list):\n        words_list = []\n        for string in string_list:\n            processed_string = self.remove_non_alpha(self.to_lowercase(string))\n            words = [word for word in processed_string.split() if word]\n            words_list.append(words)\n        return words_list\n\n    def calculate_word_frequency(self, words_list):\n        word_frequency = defaultdict(int)\n        self.first_appear.clear()\n        js = 0\n        for words in words_list:\n            for word in words:\n                if word not in word_frequency:\n                    js += 1\n                    self.first_appear[word] = js\n                word_frequency[word] += 1\n\n        # Sort by frequency, then by first appearance\n        sorted_word_frequency = sorted(\n            word_frequency.items(),\n            key=lambda x: (-x[1], self.first_appear[x[0]])\n        )\n\n        # Get the top 5 words\n        top_5_word_frequency = OrderedDict(sorted_word_frequency[:5])\n        return top_5_word_frequency\n\n    def process(self, string_list):\n        words_list = self.process_data(string_list)\n        return self.calculate_word_frequency(words_list)\n\n# Example usage:\n# processor = NLPDataProcessor()\n# result = processor.process([\"This is a test.\", \"Another test with more words.\"])\n# print(result)\n\n",
  "NumberConverter": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "NumberWordFormatter": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "NumericEntityUnescaper": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Order": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "PageUtil": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "PersonRequest": "Validation Summary\n- Syntax Errors: Unterminated string literal (detected at line 14)\n- Compilation Issues: None\n- Structural Problems: None",
  "RPGCharacter": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Server": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nclass Server:\n    def __init__(self):\n        self.white_list = set()\n        self.send_struct = {}\n        self.receive_struct = {}\n\n    def add_white_list(self, addr):\n        \"\"\"Add an address to the whitelist if it's not already present.\"\"\"\n        if addr in self.white_list:\n            return list(self.white_list)\n        else:\n            self.white_list.add(addr)\n            return list(self.white_list)\n\n    def del_white_list(self, addr):\n        \"\"\"Remove an address from the whitelist if it exists.\"\"\"\n        if addr in self.white_list:\n            self.white_list.remove(addr)\n            return list(self.white_list)\n        else:\n            return list(self.white_list)\n\n    def recv(self, info):\n        \"\"\"\n        Receive data if it contains 'addr' and 'content' keys and the address is whitelisted.\n        Returns 1 if successful, 0 if address is not whitelisted, and -1 if data is invalid.\n        \"\"\"\n        if 'addr' not in info or 'content' not in info:\n            return -1\n        addr = int(info['addr'])\n        content = info['content']\n\n        if addr not in self.white_list:\n            return 0\n        else:\n            self.receive_struct = {'addr': str(addr), 'content': content}\n            return 1\n\n    def send(self, info):\n        \"\"\"\n        Send data if it contains 'addr' and 'content' keys.\n        Returns an error message if data is invalid.\n        \"\"\"\n        if 'addr' not in info or 'content' not in info:\n            return \"info structure is not correct\"\n        self.send_struct = {'addr': info['addr'], 'content': info['content']}\n        return \"\"\n\n    def show(self, type):\n        \"\"\"\n        Display either the last sent or received data based on the type specified.\n        Returns an empty dictionary if the type is neither 'send' nor 'receive'.\n        \"\"\"\n        if type == \"send\":\n            return self.send_struct\n        elif type == \"receive\":\n            return self.receive_struct\n        else:\n            return {}\n\n",
  "ShoppingCart": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "SignInSystem": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Snake": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "SQLQueryBuilder": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "StockPortfolioTracker": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "StudentDatabaseProcessor": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "TextFileProcessor": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Thermostat": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "TimeUtils": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "TwentyFourPointGame": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "URLHandler": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "UrlPath": "validation summary.\n\nExample Output:\nValidation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None\n    \nValidate the following translated Python code for syntax errors. Python code:\nimport urllib.parse\n\nclass UrlPath:\n    def __init__(self):\n        self.segments = []\n        self._with_end_tag = False\n\n    def add(self, segment: str):\n        self.segments.append(self.fix_path(segment))\n\n    def parse(self, path: str, charset: str):\n        if not path:\n            return\n\n        if path.endswith('/'):\n            self._with_end_tag = True\n\n        fixed_path = self.fix_path(path)\n        if fixed_path:\n            for segment in fixed_path.split('/'):\n                # Decode percent-encoded characters\n                decoded_seg = urllib.parse.unquote(segment)\n                self.segments.append(decoded_seg)\n\n    @staticmethod\n    def fix_path(path: str) -> str:\n        if not path:\n            return \"\"\n\n        segment_str = path\n        if segment_str.startswith('/'):\n            segment_str = segment_str[1:]\n        if segment_str.endswith('/'):\n            segment_str = segment_str[:-1]\n        return segment_str\n\n    def get_segments(self) -> list:\n        return self.segments\n\n    def with_end_tag(self) -> bool:\n        return self._with_end_tag\n\n",
  "UserLoginDB": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "VectorUtil": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Warehouse": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "WeatherSystem": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None",
  "Words2Numbers": "Validation Summary\n- Syntax Errors: None\n- Compilation Issues: None\n- Structural Problems: None"
}
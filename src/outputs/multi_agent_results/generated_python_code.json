{
  "AccessGatewayFilter": "import time\n\nclass User:\n    def __init__(self, name, level, address):\n        self.name = name\n        self.level = level\n        self.address = address\n\nclass Authorization:\n    def __init__(self, user, jwt):\n        self.user = user\n        self.jwt = jwt\n\nclass Request:\n    def __init__(self, path, method, auth):\n        self.path = path\n        self.method = method\n        self.auth = auth\n\nclass AccessGatewayFilter:\n    def filter(self, request):\n        request_uri = request.path\n        method = request.method\n\n        if self.is_start_with(request_uri):\n            return True\n\n        try:\n            token = self.get_jwt_user(request)\n            user = token.user\n            if user.level > 2:\n                self.set_current_user_info_and_log(user)\n                return True\n        except Exception:\n            return False\n        return False\n\n    def is_start_with(self, request_uri):\n        start_with = [\"/api\", \"/login\"]\n        for s in start_with:\n            if request_uri.startswith(s):\n                return True\n        return False\n\n    def get_jwt_user(self, request):\n        token = request.auth\n        user = token.user\n\n        if token.jwt.startswith(user.name):\n            jwt_str_date = token.jwt[len(user.name):]\n\n            try:\n                jwt_timestamp = float(jwt_str_date)\n            except ValueError:\n                return Authorization(User(\"\", 0, \"\"), \"\")\n\n            now = time.time()\n            if now - jwt_timestamp >= 3 * 24 * 60 * 60:\n                return Authorization(User(\"\", 0, \"\"), \"\")\n        return token\n\n    def set_current_user_info_and_log(self, user):\n        print(f\"{user.name} {user.address} {int(time.time())}\")\n"
}
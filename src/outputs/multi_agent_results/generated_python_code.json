{
  "AccessGatewayFilter": "import time\nfrom datetime import datetime\n\nclass User:\n    def __init__(self, name, level, address):\n        self.name = name\n        self.level = level\n        self.address = address\n\nclass Authorization:\n    def __init__(self, user, jwt):\n        self.user = user\n        self.jwt = jwt\n\nclass Request:\n    def __init__(self, path, method, auth):\n        self.path = path\n        self.method = method\n        self.auth = auth\n\nclass AccessGatewayFilter:\n    def filter(self, request):\n        request_uri = request.path\n        method = request.method\n\n        if self.is_start_with(request_uri):\n            return True\n\n        try:\n            token = self.get_jwt_user(request)\n            user = token.user\n            if user.level > 2:\n                self.set_current_user_info_and_log(user)\n                return True\n        except Exception as e:\n            print(f\"An error occurred: {e}\")\n            return False\n        return False\n\n    def is_start_with(self, request_uri):\n        start_with = [\"/api\", \"/login\"]\n        for s in start_with:\n            if request_uri.startswith(s):\n                return True\n        return False\n\n    def get_jwt_user(self, request):\n        token = request.auth\n        user = token.user\n\n        if token.jwt.startswith(user.name):\n            jwt_str_date = token.jwt[len(user.name):]\n\n            try:\n                jwt_timestamp = float(jwt_str_date)\n            except ValueError:\n                return Authorization(User(\"\", 0, \"\"), \"\")\n\n            now = time.time()\n            if now - jwt_timestamp >= 3 * 24 * 60 * 60:\n                return Authorization(User(\"\", 0, \"\"), \"\")\n        return token\n\n    def set_current_user_info_and_log(self, user):\n        current_time = int(time.time())\n        print(f\"{user.name} {user.address} {current_time}\")\n\n# Example usage:\n# user = User(\"JohnDoe\", 3, \"123 Main St\")\n# auth = Authorization(user, \"JohnDoe1633072800\")  # Example timestamp\n# request = Request(\"/dashboard\", \"GET\", auth)\n# filter_instance = AccessGatewayFilter()\n# print(filter_instance.filter(request))\n",
  "AreaCalculator": "import math\n\nclass AreaCalculator:\n    def __init__(self, radius):\n        if radius < 0:\n            raise ValueError(\"Radius cannot be negative.\")\n        self.radius = radius\n\n    def calculate_circle_area(self):\n        return math.pi * self.radius * self.radius\n\n    def calculate_sphere_area(self):\n        return 4 * math.pi * self.radius * self.radius\n\n    def calculate_cylinder_area(self, height):\n        if height < 0:\n            raise ValueError(\"Height cannot be negative.\")\n        return 2 * math.pi * self.radius * (self.radius + height)\n\n    def calculate_sector_area(self, angle):\n        return 0.5 * self.radius * self.radius * angle\n\n    def calculate_annulus_area(self, inner_radius, outer_radius):\n        if inner_radius > outer_radius:\n            raise ValueError(\"Inner radius cannot be greater than outer radius.\")\n        return math.pi * (outer_radius * outer_radius - inner_radius * inner_radius)\n\n# Unit tests using unittest framework\nimport unittest\n\nclass TestAreaCalculator(unittest.TestCase):\n    def setUp(self):\n        self.calculator = AreaCalculator(5)\n\n    def test_calculate_circle_area(self):\n        self.assertAlmostEqual(self.calculator.calculate_circle_area(), 78.53981633974483)\n\n    def test_calculate_sphere_area(self):\n        self.assertAlmostEqual(self.calculator.calculate_sphere_area(), 314.1592653589793)\n\n    def test_calculate_cylinder_area(self):\n        self.assertAlmostEqual(self.calculator.calculate_cylinder_area(10), 471.23889803846896)\n\n    def test_calculate_sector_area(self):\n        self.assertAlmostEqual(self.calculator.calculate_sector_area(math.pi), 39.269908169872416)\n\n    def test_calculate_annulus_area(self):\n        self.assertAlmostEqual(self.calculator.calculate_annulus_area(3, 5), 50.26548245743669)\n\n    def test_negative_radius(self):\n        with self.assertRaises(ValueError):\n            AreaCalculator(-5)\n\n    def test_negative_height(self):\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_cylinder_area(-10)\n\n    def test_invalid_inner_radius(self):\n        with self.assertRaises(ValueError):\n            self.calculator.calculate_annulus_area(5, 3)\n\nif __name__ == '__main__':\n    unittest.main()\n"
}
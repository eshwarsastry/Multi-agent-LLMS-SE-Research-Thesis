{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n\n1. The system should filter requests based on their URI and method.\n2. Requests starting with \"/api\" or \"/login\" should be allowed without further checks.\n3. For other requests, the system should validate a JWT token included in the request.\n4. The JWT token must contain the user's name at the beginning.\n5. The JWT token must include a timestamp indicating when it was issued.\n6. The system should reject JWT tokens that are older than 72 hours.\n7. If the JWT token is valid and the user's level is greater than 2, the system should log the user's name, address, and the current timestamp.\n8. The system should handle exceptions gracefully and return false for any invalid requests or errors during processing.",
  "AreaCalculator": "Title: Area Calculator\n1. The system shall provide a class named `AreaCalculator` that calculates areas of various geometric shapes.\n2. The `AreaCalculator` class shall accept a single parameter, `radius`, during initialization and throw an exception if the radius is negative.\n3. The `AreaCalculator` class shall have a method `calculate_circle_area` that returns the area of a circle using the formula πr².\n4. The `AreaCalculator` class shall have a method `calculate_sphere_area` that returns the surface area of a sphere using the formula 4πr².\n5. The `AreaCalculator` class shall have a method `calculate_cylinder_area` that accepts a parameter `height` and returns the surface area of a cylinder using the formula 2πr(r + h), throwing an exception if the height is negative.\n6. The `AreaCalculator` class shall have a method `calculate_sector_area` that accepts a parameter `angle` and returns the area of a sector using the formula 0.5r²θ.\n7. The `AreaCalculator` class shall have a method `calculate_annulus_area` that accepts parameters `inner_radius` and `outer_radius` and returns the area of an annulus using the formula π(R² - r²), throwing an exception if the inner radius is greater than the outer radius.\n8. The system shall use the constant π with a value of 3.14159265358979323846 unless a more precise definition is provided by the environment.\n9. The system shall include unit tests for each area calculation method using the Google Test framework.",
  "ArgumentParser": "Title: Command Line Argument Parser\n1. The system should parse command line arguments provided as a single string.\n2. The parser should support both long-form (--key=value) and short-form (-k value) arguments.\n3. The parser should handle arguments without values by assigning a default value of \"1\".\n4. The system should allow adding arguments with optional flags indicating whether they are required.\n5. The parser should validate argument types and convert them accordingly (e.g., converting strings to integers or booleans).\n6. The system should provide a method to retrieve the value of a specific argument by its key.\n7. The parser should return a status indicating whether all required arguments are present and a list of any missing required arguments.\n8. The system should support basic data types such as integer and boolean for argument conversion.\n9. The parser should gracefully handle invalid conversions by returning the original string value.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n3. The system should provide a method to calculate the total number of arrangements (permutations) of all possible lengths from 1 to n.\n4. The system should provide a method to generate all possible arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n5. The system should provide a method to generate all possible arrangements (permutations) of all possible lengths from 1 to n.\n6. The system should include a utility function to compute the factorial of a given integer.\n7. The system should handle cases where m is greater than n by returning zero or an appropriate error message.\n8. The system should ensure that the input list of strings is preserved and not modified during operations.\n9. The system should efficiently handle large sets of input data without excessive memory usage or processing time.\n10. The system should provide clear and understandable output for all methods, including appropriate data structures and formats.",
  "AssessmentSystem": "Title: Assessment System\n\n1. The system should allow adding a student with their grade and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the GPA of a specific student based on their course scores.\n4. The system should identify and return a list of all students who have failed any course (defined as scoring below 60).\n5. The system should calculate and return the average score for a specific course across all students who have taken it.\n6. The system should identify and return the name of the student with the highest GPA.\n7. The system should handle cases where data might not be available (e.g., no scores for a student, no students in the system) by returning an appropriate optional value indicating the absence of data.",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n\n1. The system shall accept a string input representing guitar play instructions.\n2. The system shall parse the input string into segments, where each segment contains a chord and a corresponding tune.\n3. The system shall store each parsed segment as a `PlayItem` object containing the chord and tune.\n4. The system shall provide a method to interpret the input string and generate a list of `PlayItem` objects.\n5. If requested, the system shall display each parsed chord and tune in a formatted manner.\n6. The system shall handle empty input strings by returning an empty list of `PlayItem` objects.\n7. The system shall correctly identify and separate chords (composed of alphabetic characters) from tunes (composed of non-alphabetic characters) within each segment.\n8. The system shall format the display output as \"Normal Guitar Playing -- Chord: [chord], Play Tune: [tune]\" for each parsed segment.",
  "AvgPartition": "Title: AvgPartition Class\n\n1. The class should accept a list of integers and a limit as input during initialization.\n2. It should provide a method to determine the number of partitions and the remainder when dividing the list by the limit.\n3. It should provide a method to retrieve a specific partition of the list based on an index.\n4. The partitions should be as evenly distributed as possible, with the first few partitions containing one more element if the list size is not perfectly divisible by the limit.\n5. The class should maintain the original order of elements in each partition.\n6. The class should handle cases where the limit is greater than the number of elements in the list.\n7. The class should handle cases where the limit is zero or negative gracefully.\n8. The class should ensure that no out-of-bounds errors occur when accessing elements in the list.\n9. The class should be efficient in terms of time complexity for partitioning and retrieving elements.\n10. The class should be thread-safe if accessed from multiple threads simultaneously.",
  "BalancedBrackets": "Title: Balanced Brackets Checker\n1. The system should accept a string expression containing brackets as input.\n2. The system should provide a method to check if the brackets in the expression are balanced.\n3. The system should ignore any characters in the expression that are not brackets.\n4. The system should correctly identify matching pairs of brackets: '()', '{}', and '[]'.\n5. The system should return true if all opening brackets have corresponding closing brackets in the correct order, otherwise it should return false.\n6. The system should maintain the state of the expression and allow clearing it before checking for balanced brackets.\n7. The system should handle nested brackets correctly.\n8. The system should be efficient in terms of time complexity, ideally O(n), where n is the length of the expression.\n9. The system should be robust against invalid inputs, such as null or empty strings, without causing runtime errors.",
  "BankAccount": "Title: Bank Account Management System\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide functionality to deposit a specified amount into the bank account.\n3. The system should provide functionality to withdraw a specified amount from the bank account, ensuring that the withdrawal does not exceed the current balance.\n4. The system should prevent negative amounts from being deposited or withdrawn.\n5. The system should provide functionality to view the current balance of the bank account.\n6. The system should allow transferring a specified amount from one bank account to another.\n7. The system should ensure that the balance is accurately updated after each deposit, withdrawal, and transfer operation.\n8. The system should handle exceptions for invalid operations such as depositing or withdrawing negative amounts and attempting to withdraw more than the available balance.",
  "BigNumCalculator": "Title: BigNumCalculator\n\n1. The system shall provide functionality to add two large numbers represented as strings.\n2. The system shall provide functionality to subtract two large numbers represented as strings.\n3. The system shall provide functionality to multiply two large numbers represented as strings.\n4. The addition operation shall handle numbers of different lengths by padding the shorter number with leading zeros.\n5. The subtraction operation shall correctly handle cases where the first number is smaller than the second number, returning a negative result.\n6. The multiplication operation shall handle numbers of different lengths and produce the correct product.\n7. The results of all operations shall be returned as strings.\n8. Leading zeros in the result of any operation shall be removed, except when the result is zero.\n9. The system shall handle edge cases such as adding, subtracting, or multiplying zero.\n10. The system shall ensure that the operations are performed accurately without overflow errors for very large numbers.",
  "BinaryDataProcessor": "Title: Binary Data Processor\n1. The system should accept a binary string as input.\n2. The system should remove any non-binary characters ('0' or '1') from the input string.\n3. The system should calculate the percentage of zeroes and ones in the cleaned binary string.\n4. The system should provide the bit length of the cleaned binary string.\n5. The system should convert the cleaned binary string into an ASCII string by processing each 8-bit segment as a byte.\n6. The system should convert the cleaned binary string into a UTF-8 string using the same method as converting to ASCII.",
  "BitStatusUtil": "Title: BitStatusUtil Class\n\n1. The system shall provide functionality to add a status to a set of states using bitwise operations.\n2. The system shall provide functionality to check if a specific status is present in a set of states using bitwise operations.\n3. The system shall provide functionality to remove a status from a set of states using bitwise operations.\n4. The system shall validate that all input arguments are non-negative integers.\n5. The system shall validate that all input arguments are even numbers.\n6. The system shall throw an exception if any input argument does not meet the validation criteria.\n7. The system shall ensure that the state values are represented as integers.\n8. The system shall support static methods for adding, checking, and removing statuses without requiring instantiation of the class.\n9. The system shall handle exceptions gracefully when invalid arguments are provided during method calls.",
  "BlackjackGame": "Title: Blackjack Game Implementation\n1. The system shall initialize a standard 52-card deck with cards represented as strings in the format \"RankSuit\".\n2. The system shall shuffle the deck randomly at the start of each game.\n3. The system shall calculate the value of a given hand of cards according to Blackjack rules, where face cards (J, Q, K) are worth 10 points, Aces can be worth either 1 or 11 points, and numbered cards are worth their face value.\n4. The system shall determine the winner of a game between a player and a dealer based on the values of their hands, with the player winning if they have a higher hand value without exceeding 21, and the dealer winning otherwise. If both exceed 21, the player wins if their hand value is less than or equal to the dealer's hand value.\n5. The system shall maintain separate hands for the player and the dealer throughout the game.\n6. The system shall ensure that the deck is not modified during the game except for dealing cards to the player and dealer.\n7. The system shall handle the scenario where both the player and the dealer have the same hand value under 21 by declaring the dealer as the winner.\n8. The system shall provide a method to create a new deck of cards whenever a new game is initiated.",
  "BookManagement": "Title: Book Management System\n\n1. The system should allow adding books to the inventory with an optional quantity parameter, defaulting to 1 if not specified.\n2. The system should allow removing a specified quantity of a book from the inventory, and throw an error if the book does not exist or the quantity to remove exceeds the available stock.\n3. The system should provide a function to view the entire inventory, returning a mapping of book titles to their respective quantities.\n4. The system should provide a function to check the quantity of a specific book in the inventory, returning 0 if the book is not found.",
  "BookManagementDB": "Title: Book Management Database\n\n1. The system shall manage a database of books using SQLite.\n2. The system shall allow the creation of a table named 'books' with columns for book ID, title, author, and availability status.\n3. The system shall provide functionality to add a new book to the database with a specified title and author, setting its availability to true.\n4. The system shall provide functionality to remove a book from the database by specifying its unique ID.\n5. The system shall provide functionality to mark a book as borrowed by specifying its unique ID, updating its availability status to false.\n6. The system shall provide functionality to mark a book as returned by specifying its unique ID, updating its availability status to true.\n7. The system shall provide functionality to search and retrieve all books in the database, returning their details including ID, title, author, and availability status.\n8. The system shall handle database connection errors by throwing a runtime exception with an appropriate error message.\n9. The system shall ensure that all database operations are performed safely and efficiently using prepared statements.\n10. The system shall maintain a single database connection throughout its lifecycle, opening it upon initialization and closing it upon destruction.",
  "BoyerMooreSearch": "Title: BoyerMooreSearch Implementation\n1. The system should provide a class named `BoyerMooreSearch` that initializes with a given text and pattern.\n2. The system should include a method `match_in_pattern` that returns the index of a character in the pattern from the end to the beginning, or -1 if the character is not found.\n3. The system should include a method `mismatch_in_text` that identifies the position of the first mismatch between the pattern and the text starting from the end of the pattern, or -1 if there is no mismatch.\n4. The system should implement the `bad_character_heuristic` method to find all starting positions in the text where the pattern matches using the Boyer-Moore algorithm's bad character rule.\n5. The system should handle cases where the pattern does not exist in the text by returning an empty list of positions.\n6. The system should efficiently skip sections of the text based on mismatches to reduce unnecessary comparisons.\n7. The system should ensure that the search is case-sensitive.\n8. The system should be able to handle large texts and patterns without excessive memory usage.\n9. The system should provide correct results even when the pattern contains repeated characters.\n10. The system should maintain the integrity of the input text and pattern throughout the search process.",
  "Calculator": "Title: Expression Calculator\n1. The system should evaluate mathematical expressions provided as strings.\n2. Supported operations include addition (+), subtraction (-), multiplication (*), division (/), and exponentiation (^).\n3. The system should respect operator precedence and parentheses in the expressions.\n4. The system should handle decimal numbers in the expressions.\n5. If the input expression is empty, the system should return 0.0.\n6. The system should throw an exception or handle errors gracefully for invalid expressions (e.g., division by zero, malformed syntax).\n7. The system should maintain internal state using stacks to manage operands and operators during evaluation.\n8. The system should provide a method to determine the precedence of operators.\n9. The system should apply operators to operands based on precedence and parentheses rules.\n10. The system should support chaining of operations and nested expressions within parentheses.",
  "CalendarUtil": "Title: Calendar Utility\n\n1. The system should allow adding an event with a specific date, start time, end time, and description.\n2. The system should allow removing an event based on its exact match of date, start time, end time, and description.\n3. The system should provide a list of all events scheduled for a specific date.\n4. The system should check if a given time slot (defined by start and end times) is available for scheduling new events.\n5. The system should generate a list of available time slots (each one hour long) for a specific date where no events are scheduled.\n6. The system should retrieve a specified number of upcoming events that have not yet started.\n7. Events should be stored in a way that allows efficient addition, removal, and querying based on date and time.\n8. The system should handle time zones appropriately when comparing and storing event times.\n9. The system should be able to convert timestamps to `std::chrono::system_clock::time_point` for accurate time handling.\n10. The system should ensure that events are compared based on their date, start time, end time, and description accurately.",
  "CamelCaseMap": "Title: CamelCaseMap\n\n1. The system shall provide a method to convert a string from snake_case to camelCase.\n2. The system shall allow setting a key-value pair in the map where keys are converted to camelCase before storage.\n3. The system shall allow retrieving a value by its original key, which will be converted to camelCase internally.\n4. The system shall allow deleting a key-value pair by its original key, which will be converted to camelCase internally.\n5. The system shall maintain the order of insertion of keys.\n6. The system shall provide a method to get the number of items stored in the map.\n7. The system shall provide iterators to traverse the keys in the order they were inserted.",
  "ChandrasekharSieve": "Title: Chandrasekhar Sieve Algorithm\n\nFunctional Requirements:\n1. The system should accept an integer input `n` which represents the upper limit up to which prime numbers are to be found.\n2. The system should generate a list of all prime numbers less than or equal to `n`.\n3. The system should provide a method to retrieve the generated list of prime numbers.\n\nNon-Functional Requirements:\n1. The algorithm should efficiently handle large values of `n` without excessive memory usage.\n2. The algorithm should execute within a reasonable time frame even for large inputs.\n3. The system should not crash or produce incorrect results for invalid inputs such as negative numbers or zero.",
  "Chat": "Title: Chat System\n1. The system should allow adding a new user by providing a unique username.\n2. The system should allow removing an existing user by specifying their username.\n3. The system should enable sending a message from one user to another, including the sender's name, receiver's name, message content, and a timestamp.\n4. The system should provide functionality to retrieve all messages for a specific user.\n5. The system should provide functionality to retrieve all users and their associated messages.\n6. The system should generate a timestamp in the format \"YYYY-MM-DD HH:MM:SS\" for each message sent.\n7. The system should ensure that a user cannot be added if the username already exists.\n8. The system should ensure that a message cannot be sent if either the sender or receiver does not exist in the system.",
  "ClassRegistrationSystem": "Title: Class Registration System\n\n1. The system should allow the registration of new students with their name and major.\n2. The system should prevent duplicate student registrations based on the student's name.\n3. The system should allow students to register for classes by providing their name and the class name.\n4. The system should prevent a student from registering for the same class more than once.\n5. The system should provide a list of students enrolled in a specific major.\n6. The system should provide a list of all unique majors present in the system.\n7. The system should determine and return the most popular class within a specific major based on the number of students registered in that class.\n8. The system should maintain the integrity of student data, including their names and majors, which can be retrieved or updated.\n9. The system should efficiently handle operations such as student registration, class registration, and data retrieval to ensure smooth user experience.\n10. The system should be scalable to accommodate a growing number of students and classes without significant performance degradation.",
  "Classroom": "Title: Classroom Management System\n\n1. The system should manage courses in a classroom.\n2. Each course should have a unique combination of name, start time, and end time.\n3. The system should allow adding a course to a classroom only if the course does not already exist in that classroom.\n4. The system should allow removing a course from a classroom if the course exists in that classroom.\n5. The system should check if a classroom is free at a specific time by comparing the given time with the scheduled courses' times.\n6. The system should check for conflicts when adding a new course by ensuring there are no overlapping times with existing courses.\n7. The system should verify if a specific course is already scheduled in the classroom.\n8. The system should convert time strings in the format \"HH:MM\" to `std::tm` structure for further processing.\n9. The system should convert `std::tm` structures to `std::time_t` for time comparison.\n10. The system should detect time conflicts between two time intervals represented by `std::tm` structures.\n11. The system should handle invalid time formats by throwing an exception.\n12. The system should handle errors during time conversion by throwing an exception.\n13. The system should output error messages to standard error stream in case of conversion failures.",
  "CombinationCalculator": "Title: Combination Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of combinations of selecting `m` items from `n` items.\n3. The system should provide a method to calculate the total number of possible combinations of all subsets from the input data.\n4. The system should provide a method to generate all possible combinations of selecting `m` items from the input data.\n5. The system should provide a method to generate all possible combinations of all subsets from the input data.\n6. The system should handle cases where `m` is less than 0 or greater than the size of the input data by returning an empty result.\n7. The system should handle cases where the number of items `n` exceeds 63 by returning infinity for the total number of combinations.\n8. The system should handle cases where the number of items `n` is negative by returning NaN for the total number of combinations.\n9. The system should ensure that the generated combinations do not contain duplicate entries.\n10. The system should maintain the order of elements in the combinations as they appear in the input data.",
  "ComplexCalculator": "Title: Complex Number Calculator\n1. The system shall provide functionality to add two complex numbers.\n2. The system shall provide functionality to subtract two complex numbers.\n3. The system shall provide functionality to multiply two complex numbers.\n4. The system shall provide functionality to divide two complex numbers.\n5. The system shall handle complex numbers using the `std::complex<double>` data type from the C++ Standard Library.\n6. The system shall ensure that division by zero is handled gracefully when dividing two complex numbers.\n7. The system shall maintain precision in calculations involving complex numbers.\n8. The system shall be implemented as a class named `ComplexCalculator` with all methods being static.\n9. The system shall not modify the input complex numbers during operations.\n10. The system shall return a new complex number as the result of each arithmetic operation.",
  "CookiesUtil": "Title: Cookies Management Utility\n\n1. The system shall provide a utility class named `CookiesUtil` for managing cookies stored in a JSON file.\n2. The `CookiesUtil` class shall be initialized with a path to a cookies file.\n3. The system shall have a method `get_cookies` that extracts cookies from a JSON response and saves them to the cookies file.\n4. The system shall have a method `load_cookies` that reads cookies from the cookies file and returns them as a JSON object.\n5. The system shall have a private method `_save_cookies` that writes the current cookies to the cookies file in a formatted JSON structure.\n6. The system shall have a method `set_cookies` that sets the cookies in a JSON request by converting the internal cookies map into a string format suitable for HTTP requests.\n7. The system shall handle exceptions during file operations and output error messages to standard error.\n8. The cookies file shall be formatted as a JSON document with indentation for readability.\n9. The cookies in the JSON file shall be stored as key-value pairs within a JSON object.\n10. The cookies string in the HTTP request shall be formatted as a semicolon-separated list of key=value pairs.",
  "CSVProcessor": "Title: CSV Processor\n\n1. The system should read a CSV file and return its header and data rows.\n2. The system should write data to a CSV file, where each row of data is separated by commas and each row ends with a newline character.\n3. The system should process a specified column in a CSV file by converting all characters in that column to uppercase.\n4. The processed data should be saved in a new CSV file with the original filename appended with \"_process\".\n5. The system should handle cases where the specified column index does not exist in any row of the CSV file.\n6. The system should return an error code if the file cannot be opened during reading or writing operations.\n7. The system should ensure that the header row is preserved when processing a specific column.\n8. The system should handle empty CSV files gracefully, returning empty data structures without errors.",
  "CurrencyConverter": "Title: Currency Converter\n1. The system should provide functionality to convert an amount from one currency to another.\n2. The system should maintain a list of supported currencies.\n3. The system should allow adding a new currency with its exchange rate.\n4. The system should allow updating the exchange rate of an existing currency.\n5. The conversion should not occur if the source and target currencies are the same.\n6. The conversion should not occur if either the source or target currency is not supported.\n7. Adding a currency should fail if the currency already exists in the system.\n8. Updating a currency's exchange rate should fail if the currency does not exist in the system.\n9. The system should initialize with a predefined set of currencies and their exchange rates relative to a base currency (USD).\n10. The system should maintain the order of currencies as they are added or updated.",
  "DatabaseProcessor": "Title: DatabaseProcessor\n\n1. The system shall provide functionality to create a new table in a SQLite database with specified table name and two columns named 'key1' of type TEXT and 'key2' of type INTEGER.\n2. The system shall allow insertion of multiple records into a specified table, where each record consists of a 'name' and an 'age'.\n3. The system shall enable searching for records in a specified table based on the 'name' field, returning all matching records.\n4. The system shall support deletion of records from a specified table based on the 'name' field.\n5. The system shall handle errors during database operations by throwing exceptions with descriptive error messages.\n6. The system shall ensure that the database connection is properly closed after each operation.\n7. The system shall use parameterized queries to prevent SQL injection attacks.\n8. The system shall be able to handle and report errors related to database opening, statement preparation, and execution.\n9. The system shall be designed to work with SQLite databases and utilize the winsqlite3 library for database operations.\n10. The system shall maintain a single database connection per instance of DatabaseProcessor, which is opened and closed as needed for each operation.",
  "DataStatistics": "Title: DataStatistics Class\n\n1. The system shall provide a method to calculate the mean of a dataset, rounded to two decimal places.\n2. The system shall provide a method to calculate the median of a dataset.\n3. The system shall provide a method to determine the mode(s) of a dataset.\n4. The system shall throw an exception if the input dataset is empty when calculating the mean.\n5. The system shall throw an exception if the input dataset is empty when calculating the median.\n6. The system shall throw an exception if the input dataset is empty when determining the mode(s).\n7. The system shall handle datasets containing both positive and negative numbers.\n8. The system shall handle datasets with duplicate values correctly when determining the mode(s).",
  "DataStatistics2": "Title: DataStatistics2 Class\n\n1. The system shall provide a class named `DataStatistics2` that accepts a vector of doubles as input during initialization.\n2. The system shall provide a method `get_sum` that returns the sum of all elements in the input data.\n3. The system shall provide a method `get_min` that returns the minimum value from the input data.\n4. The system shall provide a method `get_max` that returns the maximum value from the input data.\n5. The system shall provide a method `get_variance` that calculates and returns the variance of the input data, rounded to two decimal places.\n6. The system shall provide a method `get_std_deviation` that calculates and returns the standard deviation of the input data, rounded to two decimal places.\n7. The system shall provide a method `get_correlation` that calculates and returns the correlation of the input data. If the data size is less than 2, it should return 1.0.\n8. The system shall ensure that all calculations involving floating-point numbers maintain precision up to two decimal places.\n9. The system shall handle cases where the input data vector is empty or contains only one element appropriately, ensuring no division by zero occurs.\n10. The system shall not modify the input data vector after initialization.",
  "DataStatistics4": "Title: DataStatistics4 Class\n\n1. The system shall provide a method to calculate the correlation coefficient between two sets of numerical data.\n2. The system shall provide a method to calculate the skewness of a set of numerical data.\n3. The system shall provide a method to calculate the kurtosis of a set of numerical data.\n4. The system shall provide a method to compute the probability density function (PDF) values for a given set of numerical data based on specified mean (mu) and standard deviation (sigma).\n5. The system shall handle cases where the standard deviation is zero by returning 0 for skewness and NaN for kurtosis.\n6. The system shall ensure that the PDF calculation uses the mathematical constant pi with sufficient precision.\n7. The system shall process input data efficiently, minimizing computational overhead during statistical calculations.\n8. The system shall maintain accuracy in floating-point arithmetic operations to ensure reliable statistical results.\n9. The system shall be robust against invalid inputs, such as mismatched vector sizes for correlation coefficient calculation.\n10. The system shall document the expected behavior and limitations of each statistical method provided.",
  "DecryptionUtils": "Title: Decryption Utilities\n\n1. The system shall provide a class named `DecryptionUtils` that initializes with a decryption key.\n2. The system shall support Caesar cipher decryption using a specified shift value.\n3. The system shall support Vigenère cipher decryption using a key provided during initialization.\n4. The system shall support Rail Fence cipher decryption using a specified number of rails.\n5. The system shall handle both uppercase and lowercase alphabetic characters while preserving their case in the decrypted output.\n6. The system shall leave non-alphabetic characters unchanged in the decrypted output.\n7. The system shall ensure that the shift value in Caesar cipher decryption is within the range of 0-25 by taking modulo 26 of the shift value.\n8. The system shall repeat the decryption key as necessary to match the length of the ciphertext in Vigenère cipher decryption.\n9. The system shall correctly reconstruct the original plaintext from the Rail Fence cipher encrypted text based on the number of rails used during encryption.",
  "DiscountStrategy": "Title: Discount Calculation System\n1. The system should accept customer information and a shopping cart as input.\n2. The system should calculate the total price of items in the shopping cart.\n3. The system should apply a discount based on the type of promotion selected (Fidelity, Bulk Item, Large Order).\n4. The system should calculate the final amount due after applying the appropriate discount.\n5. The system should support different types of promotions: Fidelity Promotion, Bulk Item Promotion, and Large Order Promotion.\n6. For Fidelity Promotion, a 5% discount should be applied if the customer's fidelity points are 1000 or more.\n7. For Bulk Item Promotion, a 10% discount should be applied to items with a quantity of 20 or more.\n8. For Large Order Promotion, a 7% discount should be applied if the number of items in the cart is 10 or more.\n9. If no promotion is selected, no discount should be applied.\n10. The system should handle cases where the required keys (\"quantity\", \"price\", \"fidelity\") are not present in the input data gracefully.",
  "EightPuzzle": "Title: EightPuzzle Solver\n1. The system should accept an initial state of the 8-puzzle game as a 3x3 matrix.\n2. The system should identify the position of the blank tile (represented by 0) in the puzzle.\n3. The system should determine all possible moves (up, down, left, right) from the current state of the puzzle.\n4. The system should generate a new state of the puzzle based on a specified move.\n5. The system should solve the 8-puzzle game by finding a sequence of moves that transforms the initial state into the goal state.\n6. The system should return the sequence of moves required to solve the puzzle or an empty sequence if no solution exists.\n7. The system should allow reinitialization of the puzzle with a new initial state using the assignment operator.\n8. The system should handle invalid moves gracefully without altering the current state of the puzzle.\n9. The system should efficiently manage memory usage during the solving process to avoid excessive resource consumption.\n10. The system should provide a consistent and predictable response time when solving puzzles of varying difficulty levels.",
  "EmailClient": "Title: Email Client System\n\n1. The system should allow creation of an email client with a specified email address and storage capacity.\n2. The system should enable sending an email from one email client to another, including details such as sender, receiver, content, size, timestamp, and initial state as unread.\n3. The system should prevent sending an email if the recipient's inbox exceeds its capacity, in which case it should attempt to clear space by removing the oldest emails until there is enough room or the inbox is empty.\n4. The system should allow fetching the first unread email from the inbox, marking it as read upon retrieval.\n5. The system should provide functionality to check if adding an additional email would exceed the inbox capacity.\n6. The system should calculate the total size of all emails currently stored in the inbox.\n7. The system should have the capability to clear the inbox by removing the oldest emails until a specified amount of space is freed or the inbox is empty.\n8. The system should generate a timestamp for each email indicating when it was sent, formatted as YYYY-MM-DD HH:MM:SS.",
  "EncryptionUtils": "Title: EncryptionUtils Class\n\n1. The class should accept a string key during initialization.\n2. The class should provide a method to encrypt a given plaintext using the Caesar cipher technique with a specified shift value.\n3. The class should provide a method to encrypt a given plaintext using the Vigenère cipher technique, utilizing the key provided during initialization.\n4. The class should provide a method to encrypt a given plaintext using the Rail Fence cipher technique with a specified number of rails.\n5. The Caesar cipher method should handle both uppercase and lowercase letters, preserving their case in the output.\n6. The Caesar cipher method should leave non-alphabetic characters unchanged in the output.\n7. The Vigenère cipher method should handle both uppercase and lowercase letters, preserving their case in the output.\n8. The Vigenère cipher method should leave non-alphabetic characters unchanged in the output.\n9. The Rail Fence cipher method should handle both uppercase and lowercase letters, preserving their case in the output.\n10. The Rail Fence cipher method should leave non-alphabetic characters unchanged in the output.\n11. The Rail Fence cipher method should throw an exception if the number of rails is less than or equal to zero.",
  "ExcelProcessor": "Title: Excel Processor\n\n1. The system shall provide functionality to read data from an Excel file named by the user.\n2. The system shall support reading both string and integer values from the Excel file.\n3. The system shall provide functionality to write data to an Excel file named by the user.\n4. The system shall support writing both string and integer values to the Excel file.\n5. The system shall process data from an Excel file by modifying the N-th column based on specific rules.\n6. If the value in the N-th column is a string and does not start with a digit, it shall be converted to uppercase.\n7. If the value in the N-th column is a string and starts with a digit, only the first character of the string shall be retained.\n8. If the value in the N-th column is an integer, it shall remain unchanged.\n9. The processed data shall be saved in a new Excel file with the original filename appended with \"_process\".\n10. The system shall handle exceptions during file operations and return appropriate status codes.\n11. The system shall ensure that the processed data is correctly written to the new Excel file.\n12. The system shall validate the input parameters for file operations and data processing.\n13. The system shall provide feedback on the success or failure of file operations.\n14. The system shall maintain compatibility with the OpenXLSX library for Excel file operations.",
  "ExpressionCalculator": "Title: Expression Calculator\n\n1. The system should accept a mathematical expression as a string input.\n2. The system should evaluate the given mathematical expression and return the result as a double.\n3. The system should support basic arithmetic operations including addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).\n4. The system should handle parentheses for grouping expressions.\n5. The system should correctly interpret unary minus as a negative sign.\n6. The system should ignore spaces in the input expression.\n7. The system should convert infix expressions to postfix notation before evaluation.\n8. The system should maintain operator precedence during evaluation.\n9. The system should throw an exception for invalid operators or malformed expressions.\n10. The system should handle floating-point numbers in the expression.\n11. The system should ensure that the output is accurate to at least six decimal places.\n12. The system should be efficient in terms of time complexity for evaluating expressions.\n13. The system should be robust against edge cases such as empty strings or expressions with only operators.",
  "FitnessTracker": "Title: FitnessTracker Application\n1. The system shall accept user input for height, weight, age, and sex to initialize a FitnessTracker object.\n2. The system shall calculate and provide the Body Mass Index (BMI) based on the user's height and weight.\n3. The system shall determine the user's condition relative to the standard BMI range for their sex, returning -1 if below, 1 if above, and 0 if within the range.\n4. The system shall calculate the daily calorie intake based on the user's sex, age, height, weight, and BMI condition.\n5. The system shall use the Mifflin-St. Jeor equation to calculate Basal Metabolic Rate (BMR).\n6. The system shall adjust the calculated BMR by activity level factors to determine the daily calorie intake, with different multipliers based on whether the user is underweight, normal weight, or overweight.\n7. The system shall store predefined BMI standard ranges for males and females.\n8. The system shall handle invalid inputs gracefully without causing runtime errors.\n9. The system shall ensure that all calculations are performed with sufficient precision to maintain accuracy.\n10. The system shall provide clear and understandable output for BMI, condition, and daily calorie intake.",
  "GomokuGame": "Title: Gomoku Game Implementation\n1. The game should be initialized with a specified board size.\n2. Players should be able to make moves on the board by specifying a row and column.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and determine if there are five of the same symbols in a row horizontally, vertically, or diagonally.\n5. If a player achieves five in a row, the game should return that player as the winner.\n6. If no player has won and the board is full, the game should indicate a draw.\n7. The game should provide a method to retrieve the current state of the board.\n8. The game should handle invalid moves (e.g., placing a piece on an already occupied spot) gracefully.\n9. The game should ensure that all moves are within the bounds of the board.\n10. The game should support board sizes larger than 5x5, allowing for more complex gameplay.",
  "Hotel": "Title: Hotel Management System\n\nFunctional Requirements:\n1. The system should allow the creation of a hotel object with a specified name and initial room availability.\n2. The system should provide functionality to book rooms by specifying the room type, number of rooms, and guest name.\n3. The system should allow guests to check in by specifying the room type, number of rooms, and guest name, ensuring that the number of rooms checked in does not exceed the number of rooms booked.\n4. The system should enable guests to check out by specifying the room type and number of rooms, thereby increasing the availability of those rooms.\n5. The system should provide a way to retrieve the number of available rooms for a specific room type.\n\nNon-Functional Requirements:\n1. The system should handle concurrent booking and checking operations efficiently.\n2. The system should ensure data integrity during booking, check-in, and check-out processes.\n3. The system should provide clear and concise feedback to users regarding the success or failure of their actions.\n4. The system should be scalable to accommodate a large number of room types and guests.\n5. The system should maintain performance even when handling a high volume of transactions.",
  "HRManagementSystem": "Title: HR Management System\n\n1. The system should allow adding an employee with unique employee ID, name, position, department, and salary.\n2. The system should prevent adding an employee if the employee ID already exists.\n3. The system should allow removing an employee by their unique employee ID.\n4. The system should allow updating an employee's details using their unique employee ID and a map of attributes to update.\n5. The system should ensure that only existing attributes can be updated for an employee.\n6. The system should provide the ability to retrieve an employee's details by their unique employee ID.\n7. The system should return an empty result if an employee with the specified ID does not exist.\n8. The system should provide a function to list all employees with their details.\n9. The system should maintain data integrity and consistency when adding, removing, or updating employee records.\n10. The system should handle concurrent operations on employee records without data corruption.",
  "Interpolation": "Title: Interpolation Class\n\n1. The system shall provide a method to perform linear interpolation on a set of 1D data points.\n2. The system shall provide a method to perform bilinear interpolation on a set of 2D data points.\n3. The interpolation methods shall accept vectors of input data points and corresponding interpolated points.\n4. The output of the interpolation methods shall be a vector of interpolated values.\n5. The system shall handle cases where the interpolated point falls outside the range of the input data points by not including those points in the output.\n6. The system shall ensure that the interpolation calculations are accurate and consistent with linear and bilinear interpolation formulas.\n7. The system shall be efficient in processing large datasets, minimizing computational overhead during interpolation.\n8. The system shall maintain the integrity of the input data and not modify it during the interpolation process.\n9. The system shall be robust against invalid inputs, such as empty vectors or mismatched dimensions between input vectors.\n10. The system shall provide clear and meaningful error messages or exceptions when encountering invalid inputs.",
  "IPAddress": "Title: IPAddress Class Functionality\n\n1. The system shall accept an IP address as a string during object initialization.\n2. The system shall validate the IP address format, ensuring it consists of exactly four octets separated by dots.\n3. Each octet in the IP address shall be validated to ensure it contains only numeric characters and represents a value between 0 and 255.\n4. The system shall provide a method to check if the IP address is valid based on the above criteria.\n5. If the IP address is valid, the system shall provide a method to retrieve the individual octets as a vector of strings.\n6. If the IP address is valid, the system shall provide a method to convert the IP address into its binary representation, with each octet represented as an 8-bit binary number, separated by dots.\n7. If the IP address is invalid, the methods that return octets or binary representation shall return an empty vector or an empty string, respectively.",
  "IpUtil": "Title: IP Utility Functions\n\n1. Validate an IPv4 address provided as a string.\n2. Validate an IPv6 address provided as a string.\n3. Retrieve the hostname associated with a given IPv4 address.\n4. Return the local machine's hostname when the input IP address is \"0.0.0.0\".\n5. Return an empty string if the IP address is invalid or if the hostname cannot be retrieved.",
  "JobMarketplace": "Title: Job Marketplace System\n\n1. Users can post jobs with details including job title, company name, and a list of requirements.\n2. Users can remove jobs from the marketplace.\n3. Users can submit their resumes with details including name, skills, and experience.\n4. Users can withdraw their submitted resumes from the marketplace.\n5. Users can search for jobs based on criteria that match either the job title or any of the job requirements.\n6. The system can retrieve a list of resumes that match the requirements of a specific job.\n7. The system checks if a resume meets all the requirements of a job by comparing the skills listed in the resume against the job requirements.\n8. Each job listing is uniquely identifiable by its combination of job title, company name, and requirements.\n9. Each resume is uniquely identifiable by its combination of name, skills, and experience.\n10. The system maintains a list of all active job listings.\n11. The system maintains a list of all submitted resumes.",
  "JSONProcessor": "Title: JSON Processor\n\n1. The system shall provide functionality to read a JSON file from a specified file path and store its content in a JSON object.\n2. The system shall provide functionality to write a JSON object to a specified file path in a formatted manner with an indentation of 4 spaces.\n3. The system shall provide functionality to process a JSON file by removing a specified key if it exists in the JSON object.\n4. The system shall return a status code indicating success or failure when reading a JSON file.\n5. The system shall return a status code indicating success or failure when writing a JSON object to a file.\n6. The system shall return a status code indicating whether the specified key was successfully removed from the JSON object during processing.\n7. The system shall handle exceptions that may occur during file operations and JSON parsing/serialization.\n8. The system shall ensure that the JSON file is properly closed after reading or writing operations.\n9. The system shall not modify the JSON file if the specified key does not exist during processing.\n10. The system shall use the nlohmann::json library for JSON parsing and serialization.",
  "KappaCalculator": "Title: Kappa Coefficient Calculator\n1. The system shall calculate Cohen's Kappa coefficient for a given set of test data and number of categories.\n2. The system shall calculate Fleiss' Kappa coefficient for a given set of test data, number of subjects, number of categories, and number of ratings per subject.\n3. The system shall accept test data in the form of a matrix where each row represents a subject and each column represents a category.\n4. The system shall handle input data with varying numbers of subjects and categories.\n5. The system shall provide output as a double representing the calculated Kappa coefficient.\n6. The system shall utilize the Eigen library for matrix operations.\n7. The system shall ensure numerical stability during calculations to avoid division by zero or other arithmetic errors.\n8. The system shall be efficient in processing large datasets without significant performance degradation.\n9. The system shall maintain accuracy in calculations, ensuring that the results are consistent with statistical standards for Kappa coefficients.\n10. The system shall be robust against invalid inputs, such as negative values or mismatched dimensions in the input data.",
  "LongestWord": "Title: Longest Word Finder\n1. The system should allow adding individual words to a list of known words.\n2. The system should be able to find the longest word in a given sentence that is also present in the list of known words.\n3. The comparison for finding the longest word should be case-insensitive.\n4. Punctuation marks should be ignored when processing the input sentence.\n5. The system should return the longest word found in the sentence that matches any word in the list.\n6. The system should provide a method to retrieve the current list of known words.",
  "MahjongConnect": "Title: Mahjong Connect Game\n\n1. The game initializes with a board of specified dimensions filled with randomly selected icons from a given set.\n2. Players can select two positions on the board to attempt a move.\n3. A valid move requires both positions to contain the same icon and there must be a path connecting them consisting of only that icon.\n4. If a move is valid, the icons at the selected positions are removed from the board.\n5. The game checks if all icons have been removed to determine if the game is over.\n6. The board size and the set of icons are provided as inputs when the game starts.\n7. The game ensures that no out-of-bounds positions are considered valid moves.\n8. The game ensures that a position cannot be paired with itself as a valid move.\n9. The game uses a depth-first search algorithm to check for a path between two positions.\n10. The game updates the board state after each valid move by replacing the matched icons with empty spaces.\n11. The game provides a method to check if the game has ended, which occurs when no more valid moves are possible or all icons have been removed.",
  "Manacher": "Title: Manacher Algorithm Implementation\n1. The system should accept a string as input.\n2. The system should identify the longest palindromic substring within the input string.\n3. The system should handle strings of varying lengths and characters.\n4. The system should return the longest palindromic substring found in the input string.\n5. The system should efficiently compute the longest palindromic substring using the Manacher's algorithm.\n6. The system should correctly handle edge cases such as empty strings or strings with no palindromic substrings longer than one character.\n7. The system should maintain the integrity of the original input string during processing.\n8. The system should not modify the input string directly but work on a modified version that includes separators between characters.\n9. The system should be able to handle special characters and spaces within the input string.\n10. The system should provide a clear and concise output of the longest palindromic substring.",
  "MetricsCalculator": "Title: Metrics Calculator\n1. The system should calculate and maintain true positives, false positives, false negatives, and true negatives based on predicted and true labels.\n2. The system should provide a method to update the metrics with new sets of predicted and true labels.\n3. The system should compute the precision of predictions using the formula: Precision = True Positives / (True Positives + False Positives).\n4. The system should compute the recall of predictions using the formula: Recall = True Positives / (True Positives + False Negatives).\n5. The system should compute the F1 score of predictions using the formula: F1 Score = 2 * (Precision * Recall) / (Precision + Recall).\n6. The system should compute the accuracy of predictions using the formula: Accuracy = (True Positives + True Negatives) / Total Predictions.\n7. The system should handle cases where division by zero might occur during the calculation of precision, recall, F1 score, and accuracy by returning 0.0 in such scenarios.\n8. The system should ensure that all metric calculations are based on the most recent updates provided to the metrics calculator.",
  "MetricsCalculator2": "Title: Metrics Calculator\n1. The system shall provide a method to calculate the Mean Reciprocal Rank (MRR) from a dataset of integer vectors and associated integer values.\n2. The system shall provide a method to calculate the Mean Average Precision (MAP) from a dataset of integer vectors and associated integer values.\n3. The MRR calculation shall return a pair consisting of the average MRR value and a vector of individual MRR values for each input vector.\n4. The MAP calculation shall return a pair consisting of the average MAP value and a vector of individual AP values for each input vector.\n5. If the input dataset is empty, both MRR and MAP calculations shall return an average value of 0.0 and a vector containing a single element of 0.0.\n6. For each input vector in the dataset, if the associated integer value (k) is less than or equal to 0 or the vector is empty, the corresponding MRR value shall be 0.0.\n7. The MRR for each input vector shall be calculated as the reciprocal of the rank of the first occurrence of the integer 1 in the vector, with ranks starting at 1.\n8. The MAP for each input vector shall be calculated as the average precision, which is the sum of precision values at each relevant item divided by the number of relevant items.\n9. The system shall handle cases where there are no relevant items in the input vector by returning an AP value of 0.0 for that vector.\n10. The system shall ensure that all calculations are performed efficiently and accurately, handling edge cases such as empty vectors and zero relevant items gracefully.",
  "MovieBookingSystem": "Title: Movie Booking System\n1. The system should allow adding a new movie with details such as name, price, start time, end time, and number of seats.\n2. The system should enable booking tickets for a specific movie by selecting seats, ensuring that the selected seats are available.\n3. The system should provide a list of movies that are available within a specified time range.\n4. The system should validate the input time format and throw an error if the time cannot be parsed correctly.\n5. The system should check if the requested movie exists before attempting to book tickets.\n6. The system should ensure that seat selections are within the valid range of the movie's seating arrangement.\n7. The system should mark booked seats as unavailable for future bookings.\n8. The system should return appropriate messages indicating the success or failure of ticket booking operations.\n9. The system should handle concurrent bookings efficiently to avoid race conditions.\n10. The system should maintain data integrity and consistency across all operations.",
  "MovieTicketDB": "Title: Movie Ticket Database Management\n\n1. The system shall provide functionality to manage movie tickets in a SQLite database.\n2. The system shall allow creation of a database table named 'tickets' with columns for id, movie_name, theater_name, seat_number, and customer_name.\n3. The system shall enable insertion of new movie tickets into the 'tickets' table with details such as movie name, theater name, seat number, and customer name.\n4. The system shall support searching for movie tickets by customer name and return all matching records.\n5. The system shall provide functionality to delete a specific movie ticket from the 'tickets' table using its unique identifier.\n6. The system shall ensure that all database connections are properly closed upon termination or destruction of the MovieTicketDB object.\n7. The system shall handle exceptions and errors during database operations by throwing runtime errors with descriptive messages.\n8. The system shall use parameterized queries to prevent SQL injection attacks when interacting with the database.\n9. The system shall maintain data integrity by ensuring that each ticket has a unique identifier (id) which is automatically generated.\n10. The system shall be compatible with the Windows environment and utilize the winsqlite3 library for database operations.",
  "MusicPlayer": "Title: Music Player\n\n1. The system should allow users to add songs to the playlist.\n2. The system should allow users to remove songs from the playlist.\n3. The system should play the first song in the playlist if no song is currently playing.\n4. The system should continue playing the current song if it is already playing.\n5. The system should stop playing the current song and clear the current song reference.\n6. The system should switch to the next song in the playlist if a song is currently playing.\n7. The system should switch to the previous song in the playlist if a song is currently playing and not the first one.\n8. The system should allow users to set the volume of the player, with valid values ranging from 0 to 100.\n9. The system should shuffle the playlist randomly.\n10. The system should maintain a list of songs in the playlist.\n11. The system should keep track of the currently playing song.\n12. The system should initialize the volume to 50 when the player is created.\n13. The system should ensure that the volume setting is within the valid range before applying it.",
  "NLPDataProcessor": "Title: NLP Data Processor\n\n1. The system shall provide a method to construct a predefined list of stop words.\n2. The system shall provide a method to remove stop words from a list of strings.\n3. The system shall split each string in the input list into individual words.\n4. The system shall compare each word against a predefined list of stop words and exclude any matching words.\n5. The system shall return a list of lists, where each inner list contains the words from the corresponding input string with stop words removed.\n6. The system shall provide a method to process a list of strings by first constructing the stop word list and then removing stop words from each string in the list.\n7. The system shall handle input strings that may contain multiple words separated by spaces.\n8. The system shall maintain the order of words as they appear in the original strings after stop words have been removed.",
  "NLPDataProcessor2": "Title: NLP Data Processor\n\n1. The system should convert all characters in the input strings to lowercase.\n2. The system should remove all non-alphabetic characters from the input strings except spaces.\n3. The system should split each processed string into individual words based on whitespace.\n4. The system should count the frequency of each word across all input strings.\n5. The system should maintain the order of first appearance for words with the same frequency.\n6. The system should return the top 5 most frequent words along with their frequencies.\n7. The system should handle multiple input strings and process them accordingly.\n8. The system should be able to handle empty strings gracefully without causing errors.\n9. The system should ensure that the output map contains only the top 5 words, even if there are ties in frequency.\n10. The system should be efficient in processing large volumes of text data.",
  "NumberConverter": "Title: NumberConverter Class\n\n1. Convert a decimal number to its binary representation as a string.\n2. Convert a binary number (given as a string) to its decimal representation as an integer.\n3. Convert a decimal number to its octal representation as a string.\n4. Convert an octal number (given as a string) to its decimal representation as an integer.\n5. Convert a decimal number to its hexadecimal representation as a string.\n6. Convert a hexadecimal number (given as a string) to its decimal representation as an integer.",
  "NumberWordFormatter": "Title: NumberWordFormatter\n\n1. The system should convert an integer into its English word representation.\n2. The system should convert a double into its English word representation, including cents.\n3. The system should convert a string representation of a number into its English word representation.\n4. The system should handle null input by returning an empty string.\n5. The system should correctly format numbers in the thousands, millions, billions, etc., with appropriate suffixes.\n6. The system should handle numbers less than 1000 correctly, converting them to words without unnecessary suffixes.\n7. The system should append \"AND CENTS\" followed by the word representation of the decimal part when formatting a double.\n8. The system should return \"ZERO ONLY\" if the input number is zero.\n9. The system should trim any trailing spaces from the final formatted string before returning it.\n10. The system should correctly handle numbers with leading zeros in their decimal parts when converting to words.",
  "NumericEntityUnescaper": "Title: NumericEntityUnescaper\n\n1. The system shall provide a method to replace numeric character references in a string with their corresponding characters.\n2. The system shall handle both decimal and hexadecimal numeric character references.\n3. The system shall ignore malformed or incomplete numeric character references.\n4. The system shall not modify parts of the string that do not represent numeric character references.\n5. The system shall return an empty string if the input string is empty.\n6. The system shall correctly interpret the '#' symbol as the start of a numeric character reference following an '&' symbol.\n7. The system shall correctly interpret 'x' or 'X' as indicators of a hexadecimal number following the '#' symbol.\n8. The system shall correctly parse and convert numeric strings to their respective integer values.\n9. The system shall handle exceptions during the conversion process without crashing, returning the current state of the output string.\n10. The system shall ensure that only valid hexadecimal characters ('0'-'9', 'a'-'f', 'A'-'F') are considered part of a numeric character reference.",
  "Order": "Title: Restaurant Order Management System\n1. The system should allow adding dishes to an order from a predefined menu.\n2. Each dish in the menu has a name, price, and available count.\n3. When adding a dish to the order, the system should check if the requested quantity is available in the menu.\n4. If the requested quantity of a dish is not available, the addition should fail.\n5. If the requested quantity is available, the system should reduce the count of that dish in the menu by the requested amount.\n6. The system should maintain a list of selected dishes for the current order.\n7. The system should calculate the total cost of the selected dishes, applying any applicable sales discounts.\n8. Sales discounts are stored as a map where the key is the dish name and the value is the discount factor (e.g., 0.9 for a 10% discount).\n9. The system should provide a function to checkout the current order, which calculates the total cost, clears the list of selected dishes, and returns the total amount.\n10. If no dishes are selected when checking out, the system should return a total of zero.",
  "PageUtil": "Title: PageUtil Class\n\n1. The system shall accept a vector of integers and a page size upon initialization.\n2. The system shall provide a method to retrieve a specific page of data based on the page number.\n3. The system shall ensure that if an invalid page number is requested, an empty vector is returned.\n4. The system shall provide a method to retrieve detailed information about a specific page, including current page number, items per page, total pages, total items, whether there is a previous page, whether there is a next page, and the data for the current page.\n5. The system shall ensure that if an invalid page number is requested for page information, an empty map is returned.\n6. The system shall provide a search functionality that allows searching for items containing a specific keyword within the data.\n7. The search functionality shall return a map containing the keyword, total number of results, total pages of results, and the list of results matching the keyword.\n8. The system shall handle cases where no items match the search keyword by returning zero results.\n9. The system shall calculate the total number of pages dynamically based on the total number of items and the specified page size.\n10. The system shall ensure that the page size is used consistently across all operations involving pagination.",
  "PersonRequest": "Title: PersonRequest Class\n\n1. The system must accept a person's name, sex, and phone number as input.\n2. The system must validate that the name is not empty and does not exceed 33 characters.\n3. The system must validate that the sex is one of the following values: \"Man\", \"Woman\", or \"UGM\".\n4. The system must validate that the phone number is not empty, consists of exactly 11 digits, and contains only numeric characters.\n5. The system must store the validated name, sex, and phone number in the respective attributes of the `PersonRequest` class.\n6. If any validation fails, the corresponding attribute should be set to an empty string.",
  "PushBoxGame": "Title: PushBoxGame\n\n1. The game should be initialized with a map represented as a vector of strings.\n2. The game should have a default constructor that initializes an empty game state.\n3. The game should provide a method to retrieve the current map state.\n4. The game should provide a method to check if the game is over.\n5. The game should provide methods to retrieve the player's current row and column positions.\n6. The game should provide a method to retrieve the list of target positions.\n7. The game should provide a method to retrieve the list of box positions.\n8. The game should provide a method to retrieve the count of targets.\n9. The game should initialize the game state based on the provided map, setting the player's position, target positions, and box positions.\n10. The game should check for a win condition by verifying if all boxes are on target positions.\n11. The game should allow the player to move in four directions ('w', 's', 'a', 'd') and update the game state accordingly.\n12. The game should prevent the player from moving into walls ('#').\n13. The game should allow the player to push boxes, but only if there is no wall or another box in front of the box being pushed.\n14. The game should update the game state after each move, including checking for a win condition.",
  "RegexUtils": "Title: RegexUtils Class\n\n1. The system shall provide a method to check if a given text matches a specified regex pattern.\n2. The system shall provide a method to find all occurrences of a regex pattern within a given text.\n3. The system shall provide a method to split a given text based on a regex pattern.\n4. The system shall provide a method to replace all occurrences of a regex pattern in a given text with a specified replacement string.\n5. The system shall provide a method to generate a regex pattern for matching email addresses.\n6. The system shall provide a method to generate a regex pattern for matching phone numbers in the format \"XXX-XXX-XXXX\".\n7. The system shall provide a method to generate a regex pattern for splitting sentences based on punctuation marks followed by spaces and an uppercase letter.\n8. The system shall provide a method to split a given text into sentences using the generated sentence split pattern.\n9. The system shall provide a method to validate if a given phone number matches the standard phone number format.\n10. The system shall provide a method to extract all email addresses from a given text using the generated email pattern.",
  "RPGCharacter": "Title: RPG Character Management System\n1. The system should allow the creation of an RPG character with attributes including name, health points (HP), attack power, defense, level, and experience points (EXP).\n2. The system should provide functionality for an RPG character to attack another character, reducing the target's HP based on the attacker's attack power and the defender's defense.\n3. The system should enable an RPG character to heal, increasing their HP by 10 points, with a maximum HP cap of 100.\n4. The system should allow an RPG character to gain experience points, which can lead to leveling up when enough EXP is accumulated.\n5. The system should automatically level up an RPG character when they have accumulated enough experience points, resetting their EXP to zero and increasing their level, HP, attack power, and defense.\n6. The system should prevent an RPG character from leveling beyond level 100.\n7. The system should provide a method to check if an RPG character is still alive (i.e., their HP is greater than zero).\n8. The system should expose methods to retrieve the current values of an RPG character's HP, EXP, attack power, defense, and level.\n9. The system should allow setting a new value for an RPG character's HP directly.",
  "Server": "Title: Server Class Functionality\n\n1. The server should maintain a whitelist of addresses.\n2. The server should allow adding an address to the whitelist, ensuring no duplicates.\n3. The server should allow removing an address from the whitelist.\n4. The server should receive data containing an address and content, and check if the address is in the whitelist.\n5. If the received address is in the whitelist, the server should store the received data.\n6. If the received address is not in the whitelist, the server should ignore the data.\n7. The server should validate that the received data contains both \"addr\" and \"content\" fields.\n8. The server should allow sending data with an address and content, storing it internally.\n9. The server should validate that the sent data contains both \"addr\" and \"content\" fields.\n10. The server should provide functionality to retrieve either the last sent or received data based on the type specified (\"send\" or \"receive\").\n11. The server should return an error message if the sent data does not contain the required fields.\n12. The server should return an empty map if the requested data type (\"send\" or \"receive\") is not recognized.\n\nRequirements Title: Server Class Non-Functional Requirements\n\n1. The server should handle concurrent operations on the whitelist without data corruption.\n2. The server should efficiently manage memory usage for storing addresses and data.\n3. The server should provide clear and consistent error messages for invalid operations.\n4. The server should ensure thread safety when modifying or accessing shared data structures.\n5. The server should minimize processing time for adding, removing, and checking addresses in the whitelist.\n6. The server should maintain data integrity when storing and retrieving sent and received data.",
  "ShoppingCart": "Title: ShoppingCart Management System\n1. The system should allow users to add items to a shopping cart with a specified price and quantity.\n2. The system should allow users to remove items from the shopping cart with a specified quantity, and if the quantity becomes zero or less, the item should be completely removed from the cart.\n3. The system should provide a functionality to view all items currently in the shopping cart along with their prices and quantities.\n4. The system should calculate and provide the total price of all items in the shopping cart.\n5. The system should handle cases where an item is added multiple times by updating the quantity and price accordingly.\n6. The system should ensure that the shopping cart can handle a large number of items efficiently.\n7. The system should maintain data integrity, ensuring that no negative quantities or prices are stored.\n8. The system should be thread-safe if accessed concurrently by multiple users or processes.",
  "SignInSystem": "Title: User Sign-In System\n1. The system should allow adding new users by their username.\n2. The system should allow signing in users by their username.\n3. The system should provide functionality to check if a specific user is signed in.\n4. The system should provide functionality to check if all users are signed in.\n5. The system should provide a list of usernames for users who are not signed in.",
  "Snake": "Title: Snake Game Implementation\n1. The game should initialize with a snake of length 1 at the center of the screen.\n2. The snake should be able to move in four directions (up, down, left, right) based on user input.\n3. When the snake moves, its head should move to the new position, and the rest of the body should follow.\n4. If the snake's head collides with its body, the game should reset.\n5. The game should place food randomly on the screen, ensuring it does not overlap with the snake's body.\n6. When the snake eats the food, its length should increase by one, and the score should increase by 100 points.\n7. The game should reset the snake's position to the center of the screen, set its length back to 1, and reset the score to 0 when the snake collides with itself.\n8. The game should provide methods to retrieve the current length of the snake, the positions of all segments of the snake, the current score, the position of the food, and the dimensions of the screen.\n9. The game should ensure that the snake wraps around the screen edges, allowing it to reappear on the opposite side when it moves off-screen.\n10. The game should use a block size to determine the grid on which the snake and food are placed, ensuring that both align with the grid boundaries.",
  "SplitSentence": "Title: Sentence Splitter and Word Counter\n1. The system shall split a given string into sentences based on punctuation marks such as periods and question marks, taking into account common abbreviations.\n2. The system shall count the number of words in a given sentence, ignoring punctuation and special characters.\n3. The system shall process a text input to determine the maximum number of words found in any single sentence within the text.\n4. The system shall handle and ignore trailing spaces at the end of each sentence after splitting.\n5. The system shall correctly identify and exclude common abbreviations from sentence boundaries during the splitting process.\n6. The system shall be able to handle large text inputs efficiently without significant performance degradation.\n7. The system shall provide accurate word counts even when sentences contain mixed case letters and punctuation.\n8. The system shall maintain compatibility with the Boost Regex library for sentence splitting operations.",
  "SQLGenerator": "Title: SQLGenerator Class\n\n1. The class should generate SQL SELECT statements based on specified fields and conditions.\n2. The class should generate SQL INSERT statements based on provided data fields and their corresponding values.\n3. The class should generate SQL UPDATE statements based on provided data fields and their corresponding values, with an optional condition.\n4. The class should generate SQL DELETE statements with an optional condition.\n5. The class should generate a SQL SELECT statement to retrieve records of females under a specified age.\n6. The class should generate a SQL SELECT statement to retrieve records within a specified age range.\n7. The class should accept a table name during initialization and use it in all generated SQL queries.\n8. The class should handle empty fields and conditions gracefully, generating appropriate SQL queries without errors.\n9. The class should ensure that all generated SQL queries are properly terminated with a semicolon.\n10. The class should correctly format multiple fields and values in SQL statements, separating them with commas.\n11. The class should handle string values in data maps by enclosing them in single quotes in the generated SQL statements.",
  "SQLQueryBuilder": "Title: SQL Query Builder\n\n1. The system shall provide a method to generate a SELECT SQL query with specified table, columns, and optional WHERE conditions.\n2. The system shall provide a method to generate an INSERT SQL query with specified table and data pairs.\n3. The system shall provide a method to generate a DELETE SQL query with specified table and optional WHERE conditions.\n4. The system shall provide a method to generate an UPDATE SQL query with specified table, data pairs, and optional WHERE conditions.\n5. The SELECT query shall include all columns if no specific columns are provided.\n6. The WHERE conditions in SELECT, DELETE, and UPDATE queries shall be combined using the AND operator.\n7. The generated SQL queries shall use single quotes around string values in the WHERE clause and VALUES list of the INSERT statement.\n8. The system shall handle multiple columns and conditions gracefully, ensuring proper formatting of the SQL query.\n9. The system shall not modify or escape input strings, which may lead to SQL injection vulnerabilities if not handled by the caller.\n10. The system shall support generating SQL queries for tables with any number of columns and conditions.",
  "Statistics3": "Title: Statistics3 Class\n\nFunctional Requirements:\n1. Calculate the mean of a dataset.\n2. Calculate the median of a dataset.\n3. Determine the mode(s) of a dataset.\n4. Compute the Pearson correlation coefficient between two datasets.\n5. Generate a correlation matrix for multiple datasets.\n6. Calculate the standard deviation of a dataset.\n7. Compute the Z-scores for a dataset.\n\nNon-Functional Requirements:\n1. Handle empty datasets gracefully by returning NaN for mean, median, standard deviation, and Z-scores.\n2. Throw an exception if datasets provided for correlation calculation have different lengths.\n3. Return NaN for standard deviation and Z-scores if the dataset has fewer than two elements or if the standard deviation is zero.\n4. Ensure efficient computation of statistical measures, especially for large datasets.\n5. Maintain numerical precision in calculations involving floating-point arithmetic.",
  "StockPortfolioTracker": "Title: Stock Portfolio Tracker\n\n1. The system should allow initialization of a stock portfolio tracker with a specified cash balance.\n2. The system should support adding stocks to the portfolio, updating the quantity if the stock already exists.\n3. The system should support removing stocks from the portfolio, reducing the quantity or removing the stock entirely if the quantity reaches zero.\n4. The system should support buying stocks, deducting the cost from the cash balance and adding the stocks to the portfolio.\n5. The system should support selling stocks, adding the proceeds to the cash balance and removing the stocks from the portfolio.\n6. The system should calculate the total value of the portfolio, including the cash balance and the value of all stocks.\n7. The system should provide a summary of the portfolio, listing each stock's name and its total value.\n8. The system should provide the value of a specific stock based on its price and quantity.\n9. The system should allow retrieval of the current portfolio as a list of stocks.\n10. The system should allow retrieval of the current cash balance.\n11. The system should allow setting a new portfolio, replacing the existing one.\n12. The system should ensure that operations involving stock quantities do not result in negative quantities.\n13. The system should ensure that buying stocks does not proceed if there is insufficient cash balance.\n14. The system should ensure that selling stocks only occurs if the stock exists in the portfolio with sufficient quantity.\n15. The system should maintain data integrity by ensuring that all operations correctly update the portfolio and cash balance.",
  "StudentDatabaseProcessor": "Title: Student Database Processor\n\n1. The system shall manage a database of students with attributes including ID, name, age, gender, and grade.\n2. The system shall create a table named \"students\" if it does not already exist in the specified SQLite database.\n3. The system shall allow insertion of new student records into the \"students\" table using a map containing student data.\n4. The system shall provide functionality to search for students by their name and return matching records as a vector of maps.\n5. The system shall enable deletion of student records from the \"students\" table based on the student's name.\n6. The system shall execute SQL queries against the SQLite database using parameterized queries to prevent SQL injection.\n7. The system shall handle database connections, statement preparation, parameter binding, and result fetching for both data modification and retrieval operations.\n8. The system shall ensure that all database connections are properly closed after operations are completed.\n9. The system shall be compatible with the Windows environment, utilizing the winsqlite3 library for SQLite database operations.\n10. The system shall maintain data integrity and consistency during database operations such as insertions, searches, and deletions.",
  "TextFileProcessor": "Title: Text File Processor\n1. The system should be able to initialize with a filename provided during object creation.\n2. The system should provide functionality to read the contents of a text file and convert it into a JSON object.\n3. The system should provide functionality to read the raw contents of a text file as a string.\n4. The system should provide functionality to write a given string content to a text file, overwriting any existing content.\n5. The system should process the contents of a text file by removing all non-alphabetic characters and writing the processed content back to the same file.\n6. The system should return the processed string after writing it to the file.",
  "Thermostat": "Title: Thermostat Control System\n1. The system should initialize with a current temperature, target temperature, and mode.\n2. The system should provide a method to retrieve the target temperature.\n3. The system should allow setting a new target temperature.\n4. The system should provide a method to retrieve the current mode.\n5. The system should allow setting the mode to either \"heat\" or \"cool\". Any other mode input should be rejected.\n6. The system should automatically set the mode based on the comparison between the current temperature and the target temperature.\n7. The system should check for conflicts between the current temperature and the mode. If there is a conflict, it should attempt to resolve it by adjusting the mode.\n8. The system should simulate the operation of adjusting the current temperature to match the target temperature, counting the time taken to reach the target temperature.\n9. The system should increment the current temperature when in \"heat\" mode until it matches the target temperature.\n10. The system should decrement the current temperature when in \"cool\" mode until it matches the target temperature.\n11. The system should return the time taken to adjust the temperature to match the target temperature during simulation.",
  "TicTacToe": "Title: TicTacToe Game\n\nFunctional Requirements:\n1. The game should initialize with a default board size of 3x3.\n2. Players should be able to make a move by specifying the row and column on the board.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and return the winning player's symbol ('X' or 'O') if there is one.\n5. The game should determine if the board is full and return true if no more moves can be made.\n6. The game should provide the current player's symbol at any point during the game.\n\nNon-Functional Requirements:\n1. The game should handle invalid moves gracefully by returning false without altering the game state.\n2. The game should efficiently check for a winner after each move.\n3. The game should maintain the state of the board and the current player accurately throughout the game.",
  "TimeUtils": "Title: TimeUtils Class\n\n1. The system shall provide a method to retrieve the current time in \"HH:MM:SS\" format.\n2. The system shall provide a method to retrieve the current date in \"YYYY-MM-DD\" format.\n3. The system shall provide a method to add a specified number of seconds to the current time and return the new time in \"HH:MM:SS\" format.\n4. The system shall provide a method to convert a date-time string in \"YYYY-MM-DD HH:MM:SS\" format to a `std::tm` structure.\n5. The system shall provide a method to convert a `std::tm` structure to a date-time string in \"YYYY-MM-DD HH:MM:SS\" format.\n6. The system shall provide a method to calculate the difference in minutes between two date-time strings provided in \"YYYY-MM-DD HH:MM:SS\" format.\n7. The system shall provide a method to generate a date-time string in \"YYYY-MM-DD HH:MM:SS\" format from individual year, month, day, hour, minute, and second values.\n8. The system shall initialize the `datetime` member variable with the current local date and time upon instantiation of the `TimeUtils` class.",
  "TriCalculator": "Title: Trigonometric Calculator\n1. The system shall provide a method to calculate the cosine of an angle given in degrees.\n2. The system shall provide a method to calculate the sine of an angle given in degrees.\n3. The system shall provide a method to calculate the tangent of an angle given in degrees.\n4. The system shall use the Taylor series expansion to approximate the cosine function.\n5. The system shall compute the factorial of a non-negative integer.\n6. The system shall round the results of trigonometric calculations to a specified precision.\n7. The system shall handle angles in degrees and convert them to radians for internal calculations.\n8. The system shall output the intermediate Taylor series result for cosine calculation.\n9. The system shall return NaN for tangent calculations when the cosine of the angle is too close to zero to avoid division by zero errors.\n10. The system shall ensure that the sine calculation stops when the absolute value of the current term is less than 1e-15.",
  "TwentyFourPointGame": "Title: Twenty-Four Point Game\n\n1. The system should generate a set of four random integers between 1 and 9 inclusive when requested.\n2. The system should accept an arithmetic expression as input from the user.\n3. The system should validate that the arithmetic expression uses only the four generated integers and valid arithmetic operators (+, -, *, /, ^).\n4. The system should evaluate the provided arithmetic expression and determine if it equals 24.\n5. If the expression evaluates to 24, the system should return a success indicator.\n6. If the expression does not evaluate to 24 or is invalid, the system should return a failure indicator.\n7. The system should allow the user to pass on the current set of cards and receive a new set of four random integers.\n8. The system should handle division by zero gracefully without crashing.\n9. The system should correctly interpret operator precedence in the arithmetic expressions.\n10. The system should support floating-point arithmetic operations.\n11. The system should provide a mechanism to manually set the four integers for testing purposes.\n12. The system should ensure that all used numbers in the expression are distinct and match the generated set of numbers.\n13. The system should handle invalid characters in the expression by returning a failure indicator.\n14. The system should maintain the integrity of the generated set of numbers throughout the evaluation process.\n15. The system should be able to handle expressions with parentheses for grouping operations.",
  "URLHandler": "Title: URLHandler Class\n\n1. The system shall provide a class named `URLHandler` that accepts a URL as a string during initialization.\n2. The system shall allow retrieval of the scheme component from the URL.\n3. The system shall allow retrieval of the host component from the URL.\n4. The system shall allow retrieval of the path component from the URL.\n5. The system shall allow retrieval of the query parameters from the URL as a map of strings where each key-value pair represents a parameter name and its corresponding value.\n6. The system shall allow retrieval of the fragment component from the URL.\n7. The system shall handle URLs without a scheme by returning an empty string for the scheme component.\n8. The system shall handle URLs without a path by returning an empty string for the path component.\n9. The system shall handle URLs without query parameters by returning an empty map for the query parameters.\n10. The system shall handle URLs without a fragment by returning an empty string for the fragment component.\n11. The system shall correctly parse and separate query parameters even if they are URL-encoded.\n12. The system shall be efficient in parsing the URL components with minimal computational overhead.\n13. The system shall not modify the original URL string provided during initialization.\n14. The system shall be robust against malformed URLs, returning appropriate default values or error messages where applicable.",
  "UrlPath": "Title: URL Path Parser\n\n1. The system should provide a class named `UrlPath` to handle URL path parsing.\n2. The `UrlPath` class should have a method `add` that accepts a string segment, processes it, and adds it to the internal list of segments.\n3. The `UrlPath` class should have a method `parse` that takes a URL path and a character set as input, processes the path, and populates the internal list of segments.\n4. The `UrlPath` class should have a static method `fix_path` that removes leading and trailing slashes from a given path.\n5. The `UrlPath` class should have a method `get_segments` that returns the list of processed segments.\n6. The `UrlPath` class should have a method `with_end_tag` that returns a boolean indicating whether the original path ended with a slash.\n7. The `parse` method should decode percent-encoded characters in the path segments.\n8. The `parse` method should handle empty paths gracefully without throwing exceptions or errors.\n9. The `add` method should ensure that each added segment is processed using the `fix_path` method before being stored.\n10. The system should support UTF-8 encoded paths and segments.\n11. The `parse` method should not alter the original path but work on a copy of it.\n12. The `UrlPath` class should maintain the order of segments as they appear in the parsed path.",
  "UserLoginDB": "Title: UserLoginDB\n\n1. The system shall provide functionality to insert a new user into the database with a specified username and password.\n2. The system shall allow searching for a user by their username and return the username and password if found.\n3. The system shall enable deletion of a user from the database based on their username.\n4. The system shall validate user login credentials by checking if the provided username and password match an entry in the database.\n5. The system shall automatically create a 'users' table upon initialization if it does not already exist.\n6. The system shall handle SQLite errors by throwing exceptions with descriptive error messages.\n7. The system shall ensure that all SQLite statements are properly finalized after execution to prevent memory leaks.\n8. The system shall manage the opening and closing of the database connection to ensure resources are properly utilized and released.\n9. The system shall store usernames and passwords as text in the 'users' table.\n10. The system shall be implemented in C++ using the SQLite library for database operations.",
  "VectorUtil": "Title: VectorUtil Class\n\nFunctional Requirements:\n1. Calculate the similarity between two vectors using the dot product of their normalized forms.\n2. Compute the cosine similarities between a single vector and a list of vectors.\n3. Determine the similarity between the mean vectors of two lists of vectors.\n4. Generate an inverse document frequency (IDF) weight dictionary based on the total number of documents and a dictionary containing term frequencies.\n\nNon-Functional Requirements:\n1. The system should handle vectors of varying sizes, specifically supporting sizes of 2 and 8.\n2. The system should throw an exception if either of the input lists in the n_similarity function is empty.\n3. The system should return a similarity value of 0.0 when the norm of a vector is zero to avoid division by zero errors.\n4. The system should efficiently compute the IDF weights using logarithmic calculations for numerical stability.",
  "VendingMachine": "Title: Vending Machine System\n\n1. The system should allow adding items with a specified name, price, and quantity.\n2. The system should accept coins and update the internal balance accordingly.\n3. The system should enable purchasing an item if it exists in the inventory, there is sufficient stock, and the user has inserted enough money; upon purchase, the balance should be reduced by the item's price, and the item's quantity should decrease by one.\n4. The system should support restocking items by increasing the quantity of an existing item.\n5. The system should provide a display of all available items showing their names, prices, and quantities.\n6. The system should allow retrieval of the current inventory state.\n7. The system should permit setting the inventory state externally.\n8. The system should allow setting the internal balance externally.",
  "Warehouse": "Title: Warehouse Management System\n\n1. The system should allow adding products with a unique product ID, name, and initial quantity to the inventory.\n2. The system should allow updating the quantity of an existing product in the inventory.\n3. The system should provide functionality to retrieve the current quantity of a product based on its product ID.\n4. The system should enable creating an order for a product if the requested quantity is available in the inventory, reducing the inventory quantity accordingly.\n5. The system should allow changing the status of an existing order.\n6. The system should provide functionality to track the status of an order based on its order ID.\n7. The system should maintain and provide access to the current state of the inventory.\n8. The system should maintain and provide access to the current state of all orders.",
  "WeatherSystem": "Title: Weather System\n\n1. The system should allow initialization with a city name.\n2. The system should provide functionality to query weather information for the initialized city from a provided list of weather data.\n3. The system should support querying temperature in either Celsius or Fahrenheit units.\n4. The system should convert temperatures between Celsius and Fahrenheit as needed.\n5. The system should allow updating the city name.\n6. The system should allow setting the temperature manually.\n7. The system should retrieve and return the current city name.\n8. The system should handle cases where the city is not found in the provided weather data list by returning default values.\n9. The system should maintain internal state for the city, temperature, and weather conditions.\n10. The system should be able to store and manage a list of weather data associated with different cities.",
  "Words2Numbers": "Title: Words2Numbers Translator\n\n1. The system should convert a string of English words representing numbers into their corresponding integer values.\n2. The system should handle numbers from zero to trillions.\n3. The system should recognize and process ordinal numbers such as \"first,\" \"second,\" \"third,\" etc.\n4. The system should correctly interpret hyphenated words by replacing hyphens with spaces before processing.\n5. The system should validate the input string to ensure all words represent valid numbers or ordinals.\n6. The system should maintain the original words in the output string followed by the converted numerical value.\n7. The system should handle the word \"and\" appropriately without affecting the numerical conversion.\n8. The system should correctly interpret words that end in ordinal suffixes like \"ieth\" and \"th\" by stripping these suffixes and converting the remaining part to a number.\n9. The system should be able to handle large numbers by using appropriate scaling factors for hundreds, thousands, millions, billions, and trillions.\n10. The system should throw an exception or return an error if the input contains invalid words that do not correspond to any known number or ordinal.",
  "XMLProcessor": "Title: XML Processor\n\n1. The system shall provide functionality to initialize an XML processor with a specified XML file name.\n2. The system shall be able to read an XML file from the disk and return the root element of the XML document.\n3. The system shall be capable of writing the current state of the XML document to a specified file on the disk.\n4. The system shall process XML data by converting the text content of all \"item\" elements to uppercase and then save the modified XML document to a specified file.\n5. The system shall provide a method to find all XML elements with a specified tag name within the document and return them as a list.\n6. The system shall handle errors gracefully, such as when an XML file cannot be loaded or when no root element is found in the document.\n7. The system shall ensure that modifications made to the XML document are saved correctly to the specified file.\n8. The system shall maintain the integrity of the XML structure during processing operations.\n9. The system shall support the use of TinyXML library for parsing and manipulating XML documents.\n10. The system shall output error messages to the standard error stream in case of failures during file operations or XML processing.",
  "ZipFileProcessor": "Title: Zip File Processor\n\n1. The system shall provide functionality to extract all files from a specified zip archive into a given output directory.\n2. The system shall provide functionality to extract a specific file from a specified zip archive into a given output directory.\n3. The system shall provide functionality to create a new zip archive containing specified files.\n4. The system shall provide functionality to read basic information about a zip file, including its path and mode.\n5. The system shall handle errors gracefully by logging error messages to standard error output.\n6. The system shall ensure that the output directory exists before attempting to extract files into it, creating it if necessary.\n7. The system shall support UTF-8 encoding for file names within the zip archive.\n8. The system shall use the Boost filesystem library for directory operations.\n9. The system shall use the libzip library for zip file operations.\n10. The system shall return appropriate boolean values indicating success or failure of operations."
}
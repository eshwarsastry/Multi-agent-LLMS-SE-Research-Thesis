{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n1. The system should filter requests based on their URI and method.\n2. Requests starting with \"/api\" or \"/login\" should be allowed without further checks.\n3. For other requests, the system should validate a JWT token included in the request.\n4. The JWT token must contain the user's name at the beginning.\n5. The JWT token must include a timestamp indicating when it was issued.\n6. The system should reject JWT tokens that are older than 72 hours.\n7. If the JWT token is valid and the user's level is greater than 2, the system should log the user's name, address, and the current timestamp.\n8. The system should handle exceptions gracefully and return false if any error occurs during the filtering process.",
  "AreaCalculator": "Title: Area Calculator\n1. The system shall provide a class named `AreaCalculator` that calculates areas of various geometric shapes.\n2. The `AreaCalculator` class shall accept a single parameter, `radius`, during initialization and throw an exception if the radius is negative.\n3. The `AreaCalculator` class shall have a method `calculate_circle_area` that returns the area of a circle using the formula πr².\n4. The `AreaCalculator` class shall have a method `calculate_sphere_area` that returns the surface area of a sphere using the formula 4πr².\n5. The `AreaCalculator` class shall have a method `calculate_cylinder_area` that accepts a parameter `height` and returns the surface area of a cylinder using the formula 2πr(r + h), throwing an exception if the height is negative.\n6. The `AreaCalculator` class shall have a method `calculate_sector_area` that accepts a parameter `angle` and returns the area of a sector using the formula 0.5r²θ.\n7. The `AreaCalculator` class shall have a method `calculate_annulus_area` that accepts parameters `inner_radius` and `outer_radius` and returns the area of an annulus using the formula π(R² - r²), throwing an exception if the inner radius is greater than the outer radius.\n8. The system shall use the constant π with a value of 3.14159265358979323846 unless a more precise definition is provided by the environment.\n9. The system shall include unit tests for each area calculation method using the Google Test framework.",
  "ArgumentParser": "Title: Command Line Argument Parser\n1. The system should parse command line arguments provided as a single string.\n2. The system should support both long-form arguments (e.g., --key=value) and short-form arguments (e.g., -k value).\n3. The system should allow adding arguments with optional flags indicating whether they are required or not.\n4. The system should allow specifying the type of each argument (e.g., int, bool, string).\n5. The system should convert argument values to their specified types using predefined converters.\n6. The system should return a tuple containing a boolean indicating success and a set of missing required arguments.\n7. The system should provide a method to retrieve the value of a specific argument by its key.\n8. The system should handle default values for arguments without provided values, setting them to \"1\" for both long-form and short-form arguments.\n9. The system should include built-in type converters for integer and boolean types.\n10. The system should gracefully handle conversion errors by returning the original value if conversion fails.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n3. The system should provide a method to calculate the total number of arrangements (permutations) of all possible lengths from 1 to n.\n4. The system should provide a method to generate all possible arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n5. The system should provide a method to generate all possible arrangements (permutations) of all possible lengths from 1 to n.\n6. The system should include a utility function to compute the factorial of a given integer.\n7. The system should handle cases where the input list of strings is empty or contains duplicate strings.\n8. The system should ensure that the output of arrangement generation methods is unique and does not contain duplicate permutations.\n9. The system should be efficient in handling large input sizes, minimizing computational overhead and memory usage.\n10. The system should maintain encapsulation by keeping the input data private and providing public interfaces for operations.",
  "AssessmentSystem": "Title: Assessment System\n\n1. The system should allow adding a student with their grade and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the GPA of a student based on their course scores.\n4. The system should identify and return a list of all students who have failed any course (defined as scoring below 60).\n5. The system should calculate and return the average score for a specific course across all students who have taken it.\n6. The system should identify and return the name of the student with the highest GPA.\n7. The system should handle cases where data might not be available (e.g., no scores for a student, no students in the system) by returning an appropriate optional value indicating the absence of data.",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n\n1. The system shall accept a string input representing guitar play instructions.\n2. The system shall parse the input string into segments, where each segment contains a chord and a corresponding tune value.\n3. The system shall store each parsed segment as a `PlayItem` object containing the chord and tune value.\n4. The system shall provide a method to interpret the input string and generate a list of `PlayItem` objects.\n5. If the `display` parameter is set to true during interpretation, the system shall output a formatted string for each `PlayItem` to the console.\n6. The formatted output shall include the chord and tune value in a predefined format: \"Normal Guitar Playing -- Chord: [chord], Play Tune: [tune]\".\n7. The system shall handle empty input strings by returning an empty list of `PlayItem` objects.\n8. The system shall correctly identify and separate chords (composed of alphabetic characters) from tune values (composed of non-alphabetic characters) within each segment of the input string.",
  "AvgPartition": "Title: AvgPartition Class\n\n1. The class should accept a list of integers and a limit as input during initialization.\n2. It should provide a method to determine the number of partitions and the remainder when the list is divided by the limit.\n3. It should provide a method to retrieve a specific partition based on an index, where each partition is as evenly distributed as possible given the limit.\n4. The partitions should be created such that the first 'remainder' partitions have one more element than the rest.\n5. The class should not modify the original list of integers.\n6. The class should handle cases where the limit is greater than the number of elements in the list.\n7. The class should handle cases where the list is empty.\n8. The class should ensure that the sum of the sizes of all partitions equals the size of the original list.\n9. The class should provide consistent results for the same input parameters across multiple invocations.\n10. The class should be efficient in terms of time complexity, ideally O(n) for partitioning, where n is the number of elements in the list.",
  "BalancedBrackets": "Title: Balanced Brackets Checker\n1. The system should accept a string expression containing brackets as input.\n2. The system should provide a method to check if the brackets in the expression are balanced.\n3. The system should ignore any characters in the expression that are not brackets.\n4. The system should correctly identify matching pairs of brackets: '()', '{}', and '[]'.\n5. The system should return true if all opening brackets have corresponding closing brackets in the correct order, otherwise it should return false.\n6. The system should maintain the state of the expression and allow clearing it before checking for balanced brackets.\n7. The system should handle nested brackets correctly.\n8. The system should be efficient in terms of time complexity, ideally O(n), where n is the length of the expression.\n9. The system should be robust against invalid inputs, such as null or empty strings, without causing runtime errors.",
  "BankAccount": "Title: Bank Account Management System\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide functionality to deposit a specified amount into the bank account.\n3. The system should prevent deposits of negative amounts and throw an exception if attempted.\n4. The system should provide functionality to withdraw a specified amount from the bank account.\n5. The system should prevent withdrawals of negative amounts and throw an exception if attempted.\n6. The system should prevent withdrawals that exceed the current balance and throw an exception if attempted.\n7. The system should provide functionality to view the current balance of the bank account.\n8. The system should provide functionality to transfer a specified amount from one bank account to another.\n9. The system should ensure that the transfer operation deducts the amount from the source account and adds it to the destination account.\n10. The system should maintain data integrity during all operations, ensuring that balances are accurately updated.",
  "BigNumCalculator": "Title: BigNumCalculator\n\n1. The system shall provide functionality to add two large numbers represented as strings.\n2. The system shall provide functionality to subtract two large numbers represented as strings.\n3. The system shall provide functionality to multiply two large numbers represented as strings.\n4. The addition operation shall handle numbers of varying lengths by padding the shorter number with leading zeros.\n5. The subtraction operation shall correctly handle cases where the first number is smaller than the second number, returning a negative result.\n6. The multiplication operation shall handle numbers of varying lengths and produce an accurate product.\n7. The results of all operations shall be returned as strings.\n8. Leading zeros in the result of any operation shall be removed, except when the result is zero.\n9. The system shall handle edge cases such as adding, subtracting, or multiplying zero.\n10. The system shall ensure that the operations are performed accurately without overflow errors for very large numbers.",
  "BinaryDataProcessor": "Title: Binary Data Processor\n\n1. The system shall accept a binary string as input during initialization.\n2. The system shall remove any non-binary characters ('0' or '1') from the input string.\n3. The system shall calculate the percentage of zeroes and ones in the cleaned binary string.\n4. The system shall calculate the total bit length of the cleaned binary string.\n5. The system shall convert the cleaned binary string into an ASCII string by processing each 8-bit segment as a byte.\n6. The system shall provide a method to convert the cleaned binary string into a UTF-8 string, which currently behaves identically to the ASCII conversion method.",
  "BitStatusUtil": "Title: BitStatusUtil Class\n\n1. The system shall provide functionality to add a status to a set of states using bitwise operations.\n2. The system shall provide functionality to check if a specific status is present in a set of states using bitwise operations.\n3. The system shall provide functionality to remove a status from a set of states using bitwise operations.\n4. The system shall validate that all input arguments are non-negative integers.\n5. The system shall validate that all input arguments are even numbers.\n6. The system shall throw an exception if any input argument does not meet the validation criteria.\n7. The system shall ensure that the operations do not modify the original set of states unless explicitly required by the operation.\n8. The system shall handle multiple input arguments for validation purposes.\n9. The system shall be implemented as a utility class with static methods for ease of use without instantiation.\n10. The system shall be thread-safe in terms of its static methods, assuming no shared mutable state.",
  "BlackjackGame": "Title: Blackjack Game Implementation\n1. The system shall initialize a standard 52-card deck with cards represented as strings in the format \"RankSuit\" (e.g., \"AS\" for Ace of Spades).\n2. The system shall shuffle the deck randomly at the start of each game.\n3. The system shall calculate the value of a given hand of cards according to Blackjack rules, where face cards (J, Q, K) are worth 10 points, Aces can be worth either 1 or 11 points, and number cards are worth their face value.\n4. The system shall determine the winner of a game between a player and a dealer based on the values of their hands, with the following criteria:\n   a. If both the player and dealer exceed 21, the player wins if their hand value is less than or equal to the dealer's hand value.\n   b. If only the player exceeds 21, the dealer wins.\n   c. If only the dealer exceeds 21, the player wins.\n   d. If neither the player nor the dealer exceeds 21, the player wins if their hand value is greater than the dealer's hand value; otherwise, the dealer wins.",
  "BookManagement": "Title: Book Management System\n1. The system should allow adding books to the inventory with an optional quantity parameter, defaulting to 1 if not specified.\n2. The system should allow removing a specified quantity of a book from the inventory, throwing an error if the book does not exist or the quantity to remove exceeds the available stock.\n3. The system should provide a function to view the entire inventory, returning a map of book titles to their respective quantities.\n4. The system should provide a function to check the quantity of a specific book in the inventory, returning 0 if the book is not found.",
  "BookManagementDB": "Title: Book Management Database\n\n1. The system shall manage a database of books using SQLite.\n2. The system shall allow the creation of a table named 'books' with columns for book ID, title, author, and availability status.\n3. The system shall provide functionality to add a new book to the database with a specified title and author, setting its availability to true.\n4. The system shall provide functionality to remove a book from the database by specifying its unique ID.\n5. The system shall provide functionality to mark a book as borrowed by specifying its unique ID, updating its availability status to false.\n6. The system shall provide functionality to mark a book as returned by specifying its unique ID, updating its availability status to true.\n7. The system shall provide functionality to search and retrieve all books in the database, returning their details including ID, title, author, and availability status.\n8. The system shall handle database connection errors by throwing a runtime exception with an appropriate error message.\n9. The system shall ensure that all SQLite statements are properly prepared, executed, and finalized to prevent memory leaks and other issues.\n10. The system shall maintain a single SQLite database connection throughout its lifecycle, opening it upon initialization and closing it upon destruction.",
  "BoyerMooreSearch": "Title: BoyerMooreSearch Implementation\n1. The system shall provide a class named `BoyerMooreSearch` that performs string searching using the Boyer-Moore algorithm.\n2. The `BoyerMooreSearch` class shall accept two strings as input: `text` and `pattern`.\n3. The class shall have a method `match_in_pattern` that returns the index of a character in the pattern from right to left, or -1 if the character is not found.\n4. The class shall have a method `mismatch_in_text` that identifies the position of the first mismatch between the pattern and the text starting from a given position, or -1 if there is no mismatch.\n5. The class shall implement the bad character heuristic to find all starting positions in the text where the pattern matches.\n6. The `bad_character_heuristic` method shall return a vector of integers representing the starting indices of all occurrences of the pattern in the text.\n7. The system shall efficiently skip sections of the text based on the bad character rule during the search process.\n8. The implementation shall handle edge cases such as empty patterns or patterns longer than the text.\n9. The system shall ensure that the search operation is performed in linear time relative to the length of the text and pattern combined, under typical conditions.\n10. The implementation shall be robust against invalid inputs, such as null or malformed strings, without causing runtime errors.",
  "Calculator": "Title: Expression Calculator\n1. The system should evaluate mathematical expressions provided as strings.\n2. Supported operations include addition (+), subtraction (-), multiplication (*), division (/), and exponentiation (^).\n3. The system should respect operator precedence in calculations.\n4. Parentheses should be used to alter the order of operations.\n5. The system should handle decimal numbers.\n6. If the input expression is empty, the system should return 0.0.\n7. The system should throw an exception or handle errors gracefully for invalid expressions.\n8. The system should use stacks to manage operands and operators during evaluation.\n9. The system should support chaining of operations without requiring intermediate storage.\n10. The system should be able to process expressions with multiple consecutive operators and operands.",
  "CalendarUtil": "Title: Calendar Utility\n\n1. The system should allow adding an event with a specific date, start time, end time, and description.\n2. The system should allow removing an event based on its exact match of date, start time, end time, and description.\n3. The system should provide a list of all events scheduled for a specific date.\n4. The system should check if a given time slot (defined by start and end times) is available for scheduling new events.\n5. The system should generate a list of available time slots for a given date, each slot being one hour long.\n6. The system should provide a list of upcoming events, limited to a specified number of events.\n7. The system should handle timestamps and convert them into `std::chrono::system_clock::time_point` objects accurately.\n8. The system should maintain a collection of events internally.\n9. The system should ensure that events are stored and retrieved based on their date, start time, and end time accurately.\n10. The system should efficiently determine the availability of time slots by checking against existing events.",
  "CamelCaseMap": "Title: CamelCaseMap\n\n1. The system shall provide a mapping functionality where keys are converted from snake_case to camelCase format.\n2. The system shall allow setting a key-value pair in the map, converting the key to camelCase before storing it.\n3. The system shall allow retrieving the value associated with a given key, converting the key to camelCase before searching.\n4. The system shall allow deleting a key-value pair from the map, converting the key to camelCase before removing it.\n5. The system shall maintain the order of insertion of keys.\n6. The system shall provide the ability to get the number of items stored in the map.\n7. The system shall support iteration over the keys in the order they were inserted.\n8. The system shall handle duplicate keys by updating the existing value rather than adding a new entry.\n9. The system shall throw an exception or return an error when attempting to retrieve a value for a non-existent key.\n10. The system shall ensure that all operations on the map are performed efficiently, maintaining average constant time complexity for insertions, deletions, and lookups.",
  "ChandrasekharSieve": "Title: Chandrasekhar Sieve Algorithm\n\nFunctional Requirements:\n1. The system should accept an integer input `n` which represents the upper limit up to which prime numbers are to be found.\n2. The system should generate a list of all prime numbers less than or equal to `n`.\n3. The system should provide a method to retrieve the generated list of prime numbers.\n\nNon-Functional Requirements:\n1. The algorithm should efficiently handle large values of `n` without excessive memory usage.\n2. The algorithm should execute within a reasonable time frame even for large inputs.\n3. The system should not crash or produce incorrect results for invalid inputs such as negative numbers or zero.",
  "Chat": "Title: Chat System\n1. The system should allow adding a new user by providing a unique username.\n2. The system should allow removing an existing user by specifying their username.\n3. The system should enable sending a message from one user to another, including the sender's name, receiver's name, message content, and a timestamp.\n4. The system should provide functionality to retrieve all messages for a specific user.\n5. The system should provide functionality to retrieve all users and their associated messages.\n6. The system should generate a timestamp in the format \"YYYY-MM-DD HH:MM:SS\" for each message sent.\n7. The system should ensure that a user cannot be added if the username already exists.\n8. The system should ensure that a message cannot be sent if either the sender or receiver does not exist in the system.",
  "ClassRegistrationSystem": "Title: Class Registration System\n\n1. The system should allow the registration of new students with their name and major.\n2. The system should prevent duplicate student registrations based on the student's name.\n3. The system should allow students to register for classes by providing their name and the class name.\n4. The system should prevent a student from registering for the same class more than once.\n5. The system should provide a list of students enrolled in a specific major.\n6. The system should provide a list of all unique majors present in the system.\n7. The system should determine and return the most popular class within a specific major based on the number of students registered for that class.\n8. The system should maintain the integrity of student data, including their name and major, which can be retrieved or updated.\n9. The system should efficiently handle operations such as student registration, class registration, and data retrieval to ensure smooth user experience.",
  "Classroom": "Title: Classroom Management System\n\n1. The system should manage classrooms with unique identifiers.\n2. Each classroom can have multiple courses scheduled.\n3. Courses are identified by their name, start time, and end time.\n4. The system should prevent adding duplicate courses to a classroom.\n5. The system should allow removing a specific course from a classroom.\n6. The system should check if a classroom is free at a given time.\n7. The system should verify if there is a conflict when scheduling a new course in a classroom.\n8. The system should confirm whether a specific course is already scheduled in a classroom.\n9. Time strings should be in the format of \"HH:MM\".\n10. The system should handle invalid time formats gracefully by throwing exceptions.\n11. The system should ensure that time conversions do not fail and handle errors appropriately.\n12. The system should correctly determine time conflicts between two courses based on their start and end times.",
  "CombinationCalculator": "Title: Combination Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of combinations of selecting `m` items from `n` items.\n3. The system should provide a method to calculate the total number of possible combinations of all subsets from the input data.\n4. The system should provide a method to generate all possible combinations of selecting `m` items from the input data.\n5. The system should provide a method to generate all possible combinations of all subsets from the input data.\n6. The system should handle cases where `m` is less than 0 or greater than the size of the input data by returning an empty result.\n7. The system should handle cases where the number of items exceeds 63 by returning infinity for the total number of combinations.\n8. The system should handle invalid input gracefully, such as negative numbers for combination calculations, by returning NaN or infinity as appropriate.\n9. The system should ensure that the generated combinations do not contain duplicate entries.\n10. The system should maintain the order of elements in the combinations as they appear in the input data.",
  "ComplexCalculator": "Title: Complex Number Calculator\n1. The system shall provide functionality to add two complex numbers.\n2. The system shall provide functionality to subtract two complex numbers.\n3. The system shall provide functionality to multiply two complex numbers.\n4. The system shall provide functionality to divide two complex numbers.\n5. The system shall handle complex numbers using the `std::complex<double>` data type.\n6. The system shall ensure that division by zero is handled gracefully.\n7. The system shall maintain precision in calculations involving complex numbers.\n8. The system shall be implemented as a class with static methods for each operation.\n9. The system shall not modify the input complex numbers during operations.\n10. The system shall return a new complex number as the result of each operation.",
  "CookiesUtil": "Title: Cookies Management Utility\n\n1. The system shall provide a utility class named `CookiesUtil` for managing cookies stored in a JSON file.\n2. The `CookiesUtil` class shall be initialized with a path to a cookies file.\n3. The system shall have a method `get_cookies` that extracts cookies from a JSON response and saves them to the cookies file.\n4. The system shall have a method `load_cookies` that reads cookies from the cookies file and returns them as a JSON object.\n5. The system shall have a private method `_save_cookies` that writes the current cookies to the cookies file in a formatted JSON structure.\n6. The system shall have a method `set_cookies` that sets the cookies in a JSON request by converting the internal cookies map into a string format suitable for HTTP requests.\n7. The system shall handle exceptions during file operations and output error messages to standard error.\n8. The cookies file shall be formatted as a JSON document with indentation for readability.\n9. The cookies in the JSON file shall be stored as key-value pairs within an object.\n10. The cookies string in the HTTP request shall be formatted as a semicolon-separated list of key=value pairs.",
  "CSVProcessor": "Title: CSV Processor\n\n1. The system should read a CSV file and return its header and data as separate entities.\n2. The system should write data to a CSV file, where each row of data is written on a new line and columns are separated by commas.\n3. The system should process a specified column in a CSV file by converting all its text to uppercase and save the modified data to a new CSV file with a \"_process\" suffix before the file extension.\n4. The system should handle cases where the specified column index does not exist in the CSV file by returning an error code.\n5. The system should handle file opening errors gracefully by returning appropriate error codes or messages.\n6. The system should maintain the integrity of the original CSV file and only modify the specified column in the output file.\n7. The system should support CSV files with varying numbers of rows and columns.\n8. The system should be able to handle large CSV files efficiently without consuming excessive memory or processing time.",
  "CurrencyConverter": "Title: Currency Converter\n1. The system should provide functionality to convert an amount from one currency to another.\n2. The system should maintain a list of supported currencies and their exchange rates relative to a base currency.\n3. The system should allow users to retrieve a list of all supported currencies.\n4. The system should enable the addition of new currencies with their respective exchange rates.\n5. The system should allow updating the exchange rates of existing currencies.\n6. The conversion function should return the original amount if the source and target currencies are the same.\n7. The conversion function should return an error or invalid result if either the source or target currency is not supported.\n8. The addition of a currency should fail if the currency already exists in the system.\n9. The update of a currency's exchange rate should fail if the currency does not exist in the system.",
  "DatabaseProcessor": "Title: DatabaseProcessor\n\n1. The system shall provide functionality to create a new table in a SQLite database with specified table name and two columns named 'key1' of type TEXT and 'key2' of type INTEGER.\n2. The system shall allow insertion of multiple records into a specified table, where each record contains values for 'name' and 'age'.\n3. The system shall support searching for records in a specified table based on the 'name' field and return all matching records.\n4. The system shall enable deletion of records from a specified table based on the 'name' field.\n5. The system shall handle errors during database operations by throwing exceptions with descriptive error messages.\n6. The system shall ensure that the database connection is properly closed after each operation.\n7. The system shall use parameterized queries to prevent SQL injection attacks.\n8. The system shall be able to handle and report errors related to database opening, statement preparation, and execution.\n9. The system shall be designed to work with SQLite databases and utilize the winsqlite3 library for database operations.\n10. The system shall maintain a single database connection per instance of DatabaseProcessor, which is opened and closed as needed for each operation.",
  "DataStatistics": "Title: DataStatistics Class\n\n1. The system shall provide a method to calculate the mean of a dataset, rounding the result to two decimal places.\n2. The system shall provide a method to calculate the median of a dataset, rounding the result to two decimal places if necessary.\n3. The system shall provide a method to determine the mode(s) of a dataset, returning all modes in a vector.\n4. The system shall throw an exception if any of the statistical methods are called with an empty dataset.\n5. The system shall handle datasets containing both positive and negative numbers accurately.\n6. The system shall maintain the integrity of the input dataset by not modifying it during operations that do not require sorting or altering the original data.\n7. The system shall be able to handle large datasets efficiently without causing performance degradation.\n8. The system shall ensure that the calculated mean, median, and modes are accurate within the constraints of floating-point arithmetic and integer precision.\n9. The system shall be implemented in C++ using standard library features such as vectors, maps, and algorithms.\n10. The system shall provide clear and descriptive error messages when exceptions are thrown due to invalid input.",
  "DataStatistics2": "Title: DataStatistics2 Class\n\n1. The system shall provide a class named `DataStatistics2` that accepts a vector of doubles as input during initialization.\n2. The system shall provide a method `get_sum` that returns the sum of all elements in the input data.\n3. The system shall provide a method `get_min` that returns the minimum value from the input data.\n4. The system shall provide a method `get_max` that returns the maximum value from the input data.\n5. The system shall provide a method `get_variance` that calculates and returns the variance of the input data, rounded to two decimal places.\n6. The system shall provide a method `get_std_deviation` that calculates and returns the standard deviation of the input data, rounded to two decimal places.\n7. The system shall provide a method `get_correlation` that calculates and returns the correlation of the input data. If the data contains fewer than two elements, it should return 1.0.\n8. The system shall ensure that all calculations involving floating-point arithmetic are performed with precision up to two decimal places.\n9. The system shall handle cases where the input data vector is empty or contains only one element appropriately, ensuring no division by zero occurs.\n10. The system shall maintain encapsulation by keeping the data private and providing public methods to access computed statistics.",
  "DataStatistics4": "Title: DataStatistics4 Class\n\n1. The system shall provide a method to calculate the correlation coefficient between two datasets.\n2. The system shall provide a method to calculate the skewness of a dataset.\n3. The system shall provide a method to calculate the kurtosis of a dataset.\n4. The system shall provide a method to compute the probability density function (PDF) values for a given dataset using specified mean (mu) and standard deviation (sigma).\n5. The system shall handle cases where the standard deviation is zero by returning 0 for skewness and NaN for kurtosis.\n6. The system shall ensure numerical stability and accuracy in calculations involving square roots and powers.\n7. The system shall efficiently compute statistical measures for large datasets without significant performance degradation.\n8. The system shall use a constant value of pi (pai) accurate to at least 15 decimal places for calculations involving circular or trigonometric functions.\n9. The system shall validate input data to ensure it is appropriate for statistical calculations, such as checking for empty datasets.\n10. The system shall provide consistent and reproducible results for identical input datasets.",
  "DecryptionUtils": "Title: Decryption Utilities\n\n1. The system shall provide a class named `DecryptionUtils` that initializes with a decryption key.\n2. The system shall support Caesar cipher decryption, taking a ciphertext string and an integer shift value as input, and returning the decrypted plaintext string.\n3. The system shall support Vigenère cipher decryption, taking a ciphertext string as input and using the provided key during initialization, and returning the decrypted plaintext string.\n4. The system shall support Rail Fence cipher decryption, taking an encrypted text string and an integer number of rails as input, and returning the decrypted plaintext string.\n5. The system shall handle both uppercase and lowercase alphabetic characters while preserving their case in the output.\n6. The system shall leave non-alphabetic characters unchanged in the output.\n7. The system shall correctly handle edge cases such as zero or negative shifts in Caesar cipher decryption.\n8. The system shall ensure that the Vigenère cipher decryption uses the key repeatedly as necessary to match the length of the ciphertext.\n9. The system shall correctly reconstruct the plaintext from the Rail Fence cipher by simulating the zigzag pattern used in encryption.\n10. The system shall maintain the integrity of the original message, ensuring that no data is lost or altered during decryption processes.",
  "DiscountStrategy": "Title: Discount Calculation System\n1. The system should accept customer information and a shopping cart as input.\n2. The system should calculate the total price of items in the shopping cart.\n3. The system should apply a discount based on the type of promotion selected (Fidelity, Bulk Item, Large Order).\n4. The system should calculate the final amount due after applying the appropriate discount.\n5. The system should support different types of promotions: Fidelity Promotion, Bulk Item Promotion, and Large Order Promotion.\n6. For Fidelity Promotion, a 5% discount should be applied if the customer's fidelity points are 1000 or more.\n7. For Bulk Item Promotion, a 10% discount should be applied to each item with a quantity of 20 or more.\n8. For Large Order Promotion, a 7% discount should be applied if the number of items in the cart is 10 or more.\n9. If no promotion is selected, no discount should be applied.\n10. The system should handle cases where the required keys (\"quantity\", \"price\", \"fidelity\") are not present in the input data gracefully.",
  "EightPuzzle": "Title: EightPuzzle Solver\n1. The system should accept an initial state of the 8-puzzle game as a 3x3 matrix.\n2. The system should identify the position of the blank tile (represented by 0) in the puzzle.\n3. The system should determine all possible moves (up, down, left, right) from the current state of the puzzle.\n4. The system should generate a new state of the puzzle based on a specified move.\n5. The system should solve the 8-puzzle game by finding a sequence of moves that transforms the initial state into the goal state.\n6. The system should return the sequence of moves required to solve the puzzle or an empty sequence if no solution exists.\n7. The system should allow reinitialization of the puzzle with a new initial state using the assignment operator.\n8. The system should handle invalid moves gracefully without altering the current state of the puzzle.\n9. The system should efficiently manage memory usage during the solving process.\n10. The system should provide a consistent and predictable response time for solving puzzles of varying difficulty.",
  "EmailClient": "Title: Email Client System\n\n1. The system should allow creation of an email client with a specified email address and storage capacity.\n2. The system should enable sending an email from one email client to another, including sender's address, receiver's address, content, size, timestamp, and initial state as unread.\n3. The system should prevent sending an email if the recipient's inbox exceeds its capacity, and in such cases, it should attempt to clear space by removing emails from the sender's inbox.\n4. The system should allow fetching the first unread email from the inbox, marking it as read upon retrieval.\n5. The system should provide functionality to check if adding an additional email would exceed the inbox capacity.\n6. The system should calculate the total size of all emails currently stored in the inbox.\n7. The system should have the capability to clear space in the inbox by removing emails from the front until the required space is freed or the inbox is empty.\n8. The system should generate a timestamp for each email indicating when it was sent, formatted as YYYY-MM-DD HH:MM:SS.\n9. The system should maintain the state of each email (unread/read) within the inbox.\n10. The system should handle edge cases such as attempting to fetch an email from an empty inbox or clearing space from an empty inbox without errors.",
  "EncryptionUtils": "Title: EncryptionUtils Class\n\n1. The class should accept a string key during initialization.\n2. The class should provide a method to encrypt a given plaintext using the Caesar cipher technique with a specified shift value.\n3. The class should provide a method to encrypt a given plaintext using the Vigenère cipher technique with the key provided during initialization.\n4. The class should provide a method to encrypt a given plaintext using the Rail Fence cipher technique with a specified number of rails.\n5. The Caesar cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n6. The Vigenère cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n7. The Rail Fence cipher method should throw an exception if the number of rails is less than or equal to zero.\n8. The Rail Fence cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n9. The encryption methods should not modify the original plaintext.\n10. The encryption methods should return the encrypted text as a string.",
  "ExcelProcessor": "Title: Excel Processor\n\n1. The system shall provide functionality to read data from an Excel file named by the user.\n2. The system shall support reading both string and integer values from the Excel file.\n3. The system shall provide functionality to write data to an Excel file named by the user.\n4. The system shall support writing both string and integer values to the Excel file.\n5. The system shall process data from an Excel file by modifying the N-th column based on specific rules.\n6. If the value in the N-th column is a string and does not start with a digit, it shall be converted to uppercase.\n7. If the value in the N-th column is a string and starts with a digit, only the first character of the string shall be retained.\n8. If the value in the N-th column is an integer, it shall remain unchanged.\n9. The processed data shall be saved in a new Excel file with the original filename appended with \"_process\".\n10. The system shall handle exceptions during file operations and return appropriate status codes.\n11. The system shall ensure that the processed data is correctly written to the new Excel file.\n12. The system shall validate the input parameters for file operations and data processing.\n13. The system shall provide feedback on the success or failure of file operations.\n14. The system shall maintain compatibility with the OpenXLSX library for Excel file operations.",
  "ExpressionCalculator": "Title: Expression Calculator\n\n1. The system should accept a mathematical expression as a string input.\n2. The system should evaluate the given mathematical expression and return the result as a double.\n3. The system should handle basic arithmetic operations including addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).\n4. The system should correctly interpret parentheses for grouping operations.\n5. The system should handle unary minus by converting it to a special token (~) to differentiate from binary minus.\n6. The system should ignore spaces in the input expression.\n7. The system should convert the infix expression to postfix notation before evaluation.\n8. The system should maintain operator precedence during the conversion to postfix notation.\n9. The system should throw an exception if an unexpected operator is encountered during evaluation.\n10. The system should handle negative numbers correctly, especially when they appear at the start of the expression or after certain operators.\n11. The system should ensure that the final result is returned as a single double value, not as a concatenated string of intermediate results.\n12. The system should be robust against invalid expressions, such as those with mismatched parentheses or invalid characters.",
  "FitnessTracker": "Title: FitnessTracker Application\n1. The system shall accept user input for height, weight, age, and sex to initialize a FitnessTracker object.\n2. The system shall calculate and provide the Body Mass Index (BMI) based on the user's height and weight.\n3. The system shall determine the user's condition relative to a standard BMI range based on their sex, returning -1 if underweight, 0 if within the normal range, and 1 if overweight.\n4. The system shall calculate the recommended daily calorie intake based on the user's BMR (Basal Metabolic Rate) and their condition (underweight, normal, or overweight).\n5. The system shall use the Mifflin-St. Jeor equation to calculate BMR for males and females.\n6. The system shall adjust the calculated BMR by activity level factors of 1.2, 1.4, and 1.6 for underweight, normal, and overweight conditions, respectively.\n7. The system shall store predefined BMI standard ranges for males and females.\n8. The system shall handle invalid sex inputs gracefully without causing runtime errors.\n9. The system shall ensure that all calculations are performed with sufficient precision to maintain accuracy.\n10. The system shall provide clear and understandable output for BMI, condition status, and recommended calorie intake.",
  "GomokuGame": "Title: Gomoku Game Implementation\n1. The game should be initialized with a specified board size.\n2. Players should be able to make moves on the board by specifying a row and column.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move by determining if there are five of the same symbols in a row, column, or diagonal.\n5. If a player achieves five in a row, the game should return that player as the winner.\n6. If no player has won and the board is full, the game should indicate a draw.\n7. The game should provide a method to retrieve the current state of the board.\n8. The game should handle invalid moves (e.g., placing a piece on an already occupied spot) gracefully.\n9. The game should ensure that all moves are within the bounds of the board.\n10. The game should support board sizes larger than 5x5, allowing for more complex gameplay.",
  "Hotel": "Title: Hotel Management System\n\nFunctional Requirements:\n1. The system should allow the creation of a hotel with a specified name and initial room availability by room type.\n2. The system should provide functionality to book rooms by specifying the room type, number of rooms, and guest name. It should return \"Success!\" if the booking is successful, the number of available rooms if the requested number exceeds availability, or \"False.\" if the room type does not exist or no rooms are available.\n3. The system should allow guests to check in by specifying the room type, number of rooms, and guest name. It should verify that the guest has a booking for the specified room type and number of rooms, then update the booking status accordingly.\n4. The system should enable guests to check out by specifying the room type and number of rooms, thereby increasing the availability of those rooms.\n5. The system should provide a way to retrieve the number of available rooms for a specific room type.\n\nNon-Functional Requirements:\n1. The system should handle concurrent bookings and check-ins/outs efficiently.\n2. The system should maintain data integrity, ensuring that the number of available rooms accurately reflects bookings and check-ins/outs.\n3. The system should respond to user requests within an acceptable time frame to ensure a smooth user experience.\n4. The system should be robust against invalid inputs, such as negative room numbers or non-existent room types, without crashing or producing incorrect results.",
  "HRManagementSystem": "Title: HR Management System\n\n1. The system should allow adding an employee with unique employee ID, name, position, department, and salary.\n2. The system should prevent adding an employee if the employee ID already exists.\n3. The system should allow removing an employee by their unique employee ID.\n4. The system should allow updating an employee's details using their unique employee ID and a map of attributes to new values.\n5. The system should ensure that only existing attributes can be updated for an employee.\n6. The system should provide the ability to retrieve an employee's details by their unique employee ID.\n7. The system should return an empty result if an employee with the specified ID does not exist.\n8. The system should provide a function to list all employees with their details.\n9. The system should store employee details in a way that allows efficient retrieval, addition, removal, and update operations.\n10. The system should handle cases where employee details are not available or are invalid gracefully.",
  "Interpolation": "Title: Interpolation Class\n\n1. The system shall provide a method to perform 1D linear interpolation given two vectors of data points (x, y) and a vector of x values at which to interpolate (x_interp).\n2. The system shall provide a method to perform 2D bilinear interpolation given two vectors of data points (x, y), a matrix of z values corresponding to the (x, y) pairs, and vectors of x and y values at which to interpolate (x_interp, y_interp).\n3. The system shall return a vector of interpolated y values for each x value in x_interp when performing 1D interpolation.\n4. The system shall return a vector of interpolated z values for each pair of (x, y) values in x_interp and y_interp when performing 2D interpolation.\n5. The system shall handle cases where the x_interp or y_interp values fall outside the range of the provided x or y data points by not interpolating those values.\n6. The system shall ensure that the interpolation methods are efficient and can handle large datasets without significant performance degradation.\n7. The system shall maintain numerical precision during interpolation calculations to minimize errors in the interpolated results.",
  "IPAddress": "Title: IPAddress Class Functionality\n\n1. The system shall accept an IP address as a string during object initialization.\n2. The system shall validate the IP address format, ensuring it consists of exactly four octets separated by dots.\n3. Each octet shall be validated to ensure it contains only numeric characters and represents a value between 0 and 255 inclusive.\n4. The system shall provide a method to check if the IP address is valid based on the above criteria.\n5. If the IP address is valid, the system shall provide a method to retrieve the individual octets as a vector of strings.\n6. If the IP address is valid, the system shall provide a method to convert the IP address into its binary representation, with each octet represented as an 8-bit binary number, separated by dots.\n7. If the IP address is invalid, the methods that return data (octets or binary representation) shall return an empty container or string, respectively.",
  "IpUtil": "Title: IP Utility Functions\n1. Validate if a given string is a valid IPv4 address.\n2. Validate if a given string is a valid IPv6 address.\n3. Retrieve the hostname associated with a given IPv4 address.\n4. Return an empty string if the hostname cannot be retrieved for a given IPv4 address.\n5. Return the local machine's hostname when the input IP address is \"0.0.0.0\".\n6. Use the Windows Sockets API for network operations.\n7. Handle errors gracefully by returning an empty string when necessary.\n8. Support both IPv4 and IPv6 address formats.",
  "JobMarketplace": "Title: Job Marketplace System\n\n1. Users can post jobs with details including job title, company name, and a list of requirements.\n2. Users can remove jobs from the marketplace.\n3. Users can submit their resumes with details including name, skills, and experience.\n4. Users can withdraw their submitted resumes from the marketplace.\n5. Users can search for jobs based on criteria that match either the job title or any of the job requirements.\n6. The system can retrieve a list of resumes that match the requirements of a specific job.\n7. The system checks if a resume meets all the requirements of a job by comparing the skills listed in the resume against the job requirements.\n8. Each job listing is uniquely identifiable by its combination of job title, company name, and requirements.\n9. Each resume is uniquely identifiable by its combination of name, skills, and experience.\n10. The system maintains a list of all active job listings.\n11. The system maintains a list of all submitted resumes.",
  "JSONProcessor": "Title: JSON Processor\n\n1. The system shall provide functionality to read a JSON file from a specified file path and store its contents in a JSON object.\n2. The system shall provide functionality to write a JSON object to a specified file path in a formatted manner with an indentation of 4 spaces.\n3. The system shall provide functionality to process a JSON file by removing a specified key if it exists within the JSON structure.\n4. The system shall return a status code indicating success or failure for each operation performed (reading, writing, processing).\n5. The system shall handle errors gracefully, such as when a file cannot be opened or when the JSON content is invalid.\n6. The system shall ensure that the JSON file is correctly formatted and indented after any modifications.\n7. The system shall not modify the JSON file if the specified key to be removed does not exist within the JSON structure.",
  "KappaCalculator": "Title: Kappa Coefficient Calculator\n1. The system shall calculate Cohen's Kappa coefficient for a given set of test data and number of categories.\n2. The system shall calculate Fleiss' Kappa coefficient for a given set of test data, number of subjects, number of categories, and number of ratings per subject.\n3. The system shall accept test data in the form of a matrix where each row represents a subject and each column represents a category.\n4. The system shall handle input data with varying numbers of subjects and categories.\n5. The system shall provide a measure of agreement between observers or raters beyond what would be expected by chance.\n6. The system shall utilize the Eigen library for matrix operations.\n7. The system shall ensure numerical stability during calculations to avoid division by zero or other arithmetic errors.\n8. The system shall return a kappa value between -1 and 1, inclusive, where 1 indicates perfect agreement, 0 indicates no agreement beyond chance, and negative values indicate less agreement than expected by chance.\n9. The system shall be efficient in processing large datasets without significant performance degradation.\n10. The system shall maintain accuracy in calculations across different platforms and compilers that support the C++ standard and Eigen library.",
  "LongestWord": "Title: Longest Word Finder\n1. The system should allow adding individual words to a list of known words.\n2. The system should be able to find the longest word in a given sentence that is also present in the list of known words.\n3. The comparison for finding the longest word should be case-insensitive.\n4. Punctuation marks should be ignored when processing the input sentence.\n5. The system should return the longest word found in the sentence that matches any word in the list.\n6. The system should provide a method to retrieve the current list of known words.",
  "MahjongConnect": "Title: MahjongConnect Game\n\n1. The game initializes with a board of specified dimensions filled with randomly selected icons from a given set.\n2. Players can select two positions on the board to attempt a move.\n3. A valid move requires both positions to be within the board boundaries, not identical, and contain matching icons.\n4. A valid move also requires that there exists a path between the two positions consisting of adjacent cells with the same icon.\n5. Upon a valid move, the icons at the selected positions are removed from the board.\n6. The game checks if all icons have been removed from the board to determine if the game is over.\n7. The game should handle invalid moves gracefully without altering the board state.",
  "Manacher": "Title: Manacher Algorithm Implementation\n1. The system should accept a string as input.\n2. The system should identify the longest palindromic substring within the input string.\n3. The system should handle strings of varying lengths and characters.\n4. The system should return the longest palindromic substring found in the input string.\n5. The system should efficiently compute the longest palindromic substring using the Manacher's algorithm.\n6. The system should correctly handle edge cases such as empty strings or strings with no palindromic substrings.\n7. The system should maintain the integrity of the original input string during processing.\n8. The system should not modify the input string directly but work on a modified version that includes separators between characters.\n9. The system should be able to handle special characters and spaces within the input string.\n10. The system should provide a clear and concise output of the longest palindromic substring.",
  "MetricsCalculator": "Title: Metrics Calculator\n1. The system should calculate and maintain true positives, false positives, false negatives, and true negatives based on predicted and true labels.\n2. The system should provide a method to update the metrics with new sets of predicted and true labels.\n3. The system should compute the precision of predictions using the formula: Precision = True Positives / (True Positives + False Positives).\n4. The system should compute the recall of predictions using the formula: Recall = True Positives / (True Positives + False Negatives).\n5. The system should compute the F1 score of predictions using the formula: F1 Score = 2 * (Precision * Recall) / (Precision + Recall).\n6. The system should compute the accuracy of predictions using the formula: Accuracy = (True Positives + True Negatives) / Total Predictions.\n7. The system should handle cases where division by zero might occur during the calculation of precision, recall, F1 score, and accuracy by returning 0.0 in such scenarios.\n8. The system should ensure that the input vectors for predicted and true labels are of the same size before processing them.\n9. The system should initialize all metrics (true positives, false positives, false negatives, true negatives) to zero upon creation of a MetricsCalculator object.",
  "MetricsCalculator2": "Title: Metrics Calculator\n1. The system shall provide a method to calculate the Mean Reciprocal Rank (MRR) from a dataset of integer vectors and associated ranks.\n2. The system shall provide a method to calculate the Mean Average Precision (MAP) from a dataset of integer vectors and associated counts.\n3. The MRR calculation shall return a pair consisting of the average MRR value and a vector of individual MRR values for each input vector.\n4. The MAP calculation shall return a pair consisting of the average MAP value and a vector of individual AP values for each input vector.\n5. If the input dataset is empty, both MRR and MAP calculations shall return an average value of 0.0 and a vector containing a single element of 0.0.\n6. For each input vector in the dataset, if the associated rank (k) is less than or equal to 0 or the vector is empty, the corresponding MRR value shall be 0.0.\n7. The MRR for a given vector is calculated as the reciprocal of the rank of the first occurrence of the value 1 in the vector, or 0.0 if 1 is not found.\n8. The MAP for a given vector is calculated as the average precision score, which is the sum of precision at each relevant item divided by the number of relevant items.\n9. The system shall handle cases where the total number of relevant items (k) is zero by returning an AP value of 0.0 for that vector.\n10. The system shall ensure that all calculations are performed efficiently and accurately, handling edge cases such as empty vectors and invalid ranks gracefully.",
  "MovieBookingSystem": "Title: Movie Booking System\n\n1. The system should allow adding a new movie with details such as name, price, start time, end time, and number of seats.\n2. The system should enable booking tickets for a specific movie by selecting seats, ensuring that the selected seats are available.\n3. The system should provide a list of movies that are available within a specified time range.\n4. The system should validate the input time format and throw an error if the time cannot be parsed.\n5. The system should check if the requested movie exists before attempting to book tickets.\n6. The system should ensure that seat numbers provided for booking are within the valid range of the movie's seating arrangement.\n7. The system should prevent booking of already occupied seats and return an appropriate message.\n8. The system should return a confirmation message upon successful ticket booking or an error message if booking fails.\n9. The system should handle cases where no movies are found within the specified time range and return an appropriate message.",
  "MovieTicketDB": "Title: Movie Ticket Database Management\n\n1. The system shall provide functionality to manage movie tickets in a SQLite database.\n2. The system shall allow creation of a database table named 'tickets' with columns for id, movie_name, theater_name, seat_number, and customer_name.\n3. The system shall enable insertion of new movie tickets into the 'tickets' table with details such as movie name, theater name, seat number, and customer name.\n4. The system shall support searching for movie tickets by customer name and return all matching records.\n5. The system shall provide functionality to delete a specific movie ticket from the 'tickets' table using its unique identifier.\n6. The system shall ensure that all database connections are properly closed when no longer needed.\n7. The system shall handle exceptions and errors during database operations by throwing runtime errors with descriptive messages.\n8. The system shall use parameterized queries to prevent SQL injection attacks.\n9. The system shall maintain data integrity by ensuring that each ticket has a unique identifier.\n10. The system shall be compatible with the Windows environment and utilize the winsqlite3 library for database operations.",
  "MusicPlayer": "Title: Music Player\n\n1. The system should allow users to add songs to the playlist.\n2. The system should allow users to remove songs from the playlist.\n3. The system should play the first song in the playlist if no song is currently playing.\n4. The system should continue playing the current song if it is already playing.\n5. The system should stop playing the current song and clear the current song reference.\n6. The system should switch to the next song in the playlist if a song is currently playing.\n7. The system should switch to the previous song in the playlist if a song is currently playing.\n8. The system should allow users to set the volume of the player, with valid volume levels ranging from 0 to 100.\n9. The system should shuffle the playlist randomly.\n10. The system should maintain a list of songs in the playlist.\n11. The system should keep track of the currently playing song.\n12. The system should initialize the volume to 50 when the player is created.\n13. The system should ensure that the volume level is within the valid range before setting it.",
  "NLPDataProcessor": "Title: NLP Data Processor\n\n1. The system shall provide a method to construct a predefined list of stop words.\n2. The system shall provide a method to remove stop words from a list of strings based on a given stop word list.\n3. The system shall process a list of strings by first constructing a stop word list and then removing the stop words from each string in the list.\n4. The system shall return a list of lists of strings where each inner list contains the words from the corresponding input string with stop words removed.\n5. The system shall handle input strings that may contain multiple words separated by spaces.\n6. The system shall maintain the order of words in the output as they appear in the input, excluding stop words.\n7. The system shall be able to handle an empty input list of strings and return an empty list of lists.\n8. The system shall be able to handle input strings that do not contain any stop words and return them unchanged in the output.\n9. The system shall be efficient in processing large lists of strings and should minimize unnecessary computations.\n10. The system shall be robust against invalid inputs, such as null or malformed strings, without causing runtime errors.",
  "NLPDataProcessor2": "Title: NLP Data Processor\n\n1. The system should convert all characters in the input strings to lowercase.\n2. The system should remove all non-alphabetic characters except spaces from the input strings.\n3. The system should split each processed string into individual words based on whitespace.\n4. The system should count the frequency of each word across all input strings.\n5. The system should maintain the order of first appearance for words with the same frequency.\n6. The system should return the top 5 most frequent words along with their frequencies.\n7. The system should handle multiple input strings and process them accordingly.\n8. The system should be able to handle empty strings gracefully without causing errors.\n9. The system should ensure that the output map contains only the top 5 words, even if there are ties in frequency.\n10. The system should be efficient in processing large volumes of text data.",
  "NumberConverter": "Title: NumberConverter Class\n\n1. Convert a decimal number to its binary representation as a string.\n2. Convert a binary number (given as a string) to its decimal representation as an integer.\n3. Convert a decimal number to its octal representation as a string.\n4. Convert an octal number (given as a string) to its decimal representation as an integer.\n5. Convert a decimal number to its hexadecimal representation as a string.\n6. Convert a hexadecimal number (given as a string) to its decimal representation as an integer.",
  "NumberWordFormatter": "Title: NumberWordFormatter\n\n1. The system should convert an integer into its English word representation.\n2. The system should convert a double into its English word representation, including cents.\n3. The system should convert a string representation of a number into its English word representation.\n4. The system should handle null values by returning an empty string.\n5. The system should correctly format numbers in the thousands, millions, billions, etc., with appropriate suffixes.\n6. The system should handle numbers less than 1000 correctly, converting them into words without unnecessary suffixes.\n7. The system should append \"AND CENTS\" followed by the cents value in words when formatting a double.\n8. The system should return \"ZERO ONLY\" if the input number is zero.\n9. The system should trim any trailing spaces from the final formatted string before returning it.\n10. The system should correctly handle numbers with leading zeros in their decimal part when formatting doubles.",
  "NumericEntityUnescaper": "Title: NumericEntityUnescaper\n\n1. The system shall provide a method to replace numeric character references in a string with their corresponding characters.\n2. The system shall handle both decimal and hexadecimal numeric character references.\n3. The system shall ignore malformed or incomplete numeric character references.\n4. The system shall not modify parts of the string that do not represent numeric character references.\n5. The system shall return an empty string if the input string is empty.\n6. The system shall correctly interpret the '#' symbol as the start of a numeric character reference following an '&' symbol.\n7. The system shall correctly interpret 'x' or 'X' as indicators of a hexadecimal number following the '#' symbol.\n8. The system shall correctly parse and convert numeric strings to their respective integer values.\n9. The system shall handle exceptions during the conversion process without crashing and return the current state of the output string.\n10. The system shall ensure that only valid hexadecimal characters ('0'-'9', 'a'-'f', 'A'-'F') are considered part of the numeric character reference.",
  "Order": "Title: Restaurant Order Management System\n1. The system should allow adding dishes to an order from a predefined menu.\n2. Each dish in the menu has a name, price, and available count.\n3. When adding a dish to the order, the system should check if the requested quantity is available in the menu.\n4. If the requested quantity is not available, the system should not add the dish to the order and return an error.\n5. If the requested quantity is available, the system should reduce the count of the dish in the menu by the requested quantity.\n6. The system should calculate the total cost of the selected dishes, applying any applicable sales discounts.\n7. Sales discounts are stored as a map where the key is the dish name and the value is the discount factor (e.g., 0.9 for a 10% discount).\n8. The system should provide a method to checkout the order, which calculates the total cost, clears the selected dishes, and returns the total amount.\n9. If no dishes are selected when checking out, the system should return a total amount of zero.",
  "PageUtil": "Title: PageUtil Class\n\n1. The system shall accept a vector of integers and a page size upon initialization.\n2. The system shall provide a method to retrieve a specific page of data based on the page number.\n3. The system shall ensure that page numbers outside the valid range return an empty vector.\n4. The system shall provide a method to retrieve detailed information about a specific page, including current page number, items per page, total pages, total items, availability of previous and next pages, and the data for the current page.\n5. The system shall ensure that page information requests for invalid page numbers return an empty map.\n6. The system shall provide a search functionality that allows searching for items containing a specified keyword within the data.\n7. The search results shall include the keyword used, total number of results found, total pages of results, and the list of matching items.\n8. The system shall handle cases where no items match the search keyword by returning zero results.\n9. The system shall maintain the integrity of the original data and not modify it during operations.\n10. The system shall efficiently handle large datasets without significant performance degradation.",
  "PersonRequest": "Title: PersonRequest Class\n\n1. The system must accept a person's name, sex, and phone number as input.\n2. The system must validate that the name is not empty and does not exceed 33 characters.\n3. The system must validate that the sex is one of the following values: \"Man\", \"Woman\", or \"UGM\".\n4. The system must validate that the phone number is not empty, consists of exactly 11 digits, and contains only numeric characters.\n5. The system must store the validated name, sex, and phone number in the respective attributes of the `PersonRequest` class.\n6. If any validation fails, the corresponding attribute should be set to an empty string.",
  "PushBoxGame": "Title: PushBoxGame\n\n1. The game should be initialized with a map represented as a vector of strings.\n2. The game should have a default constructor that initializes an empty game state.\n3. The game should provide a method to retrieve the current map state.\n4. The game should indicate whether the game is over.\n5. The game should provide the current column position of the player.\n6. The game should provide the current row position of the player.\n7. The game should provide a list of target positions on the map.\n8. The game should provide a list of box positions on the map.\n9. The game should provide the count of targets on the map.\n10. The game should check if all boxes are on their respective targets, indicating a win condition.\n11. The game should allow the player to move in four directions ('w', 's', 'a', 'd') and update the game state accordingly.\n12. The game should initialize the player's position, target positions, and box positions based on the provided map.\n13. The game should prevent movement into walls ('#').\n14. The game should allow the player to push boxes, but only if there is no wall or another box in front of the box being pushed.\n15. The game should update the game state after each valid move, including checking for a win condition.",
  "RegexUtils": "Title: RegexUtils Class\n\n1. The system shall provide a method to check if a given text matches a specified regex pattern.\n2. The system shall provide a method to find all occurrences of a regex pattern within a given text.\n3. The system shall provide a method to split a given text based on a specified regex pattern.\n4. The system shall provide a method to replace all occurrences of a regex pattern in a given text with a specified replacement string.\n5. The system shall provide a method to generate a regex pattern for matching email addresses.\n6. The system shall provide a method to generate a regex pattern for matching phone numbers in the format \"XXX-XXX-XXXX\".\n7. The system shall provide a method to generate a regex pattern for splitting sentences based on punctuation marks followed by spaces and an uppercase letter.\n8. The system shall provide a method to split a given text into sentences using the generated sentence split pattern.\n9. The system shall provide a method to validate if a given phone number matches the standard phone number format.\n10. The system shall provide a method to extract all email addresses from a given text using the generated email pattern.",
  "RPGCharacter": "Title: RPG Character Management System\n1. The system should allow the creation of an RPG character with attributes including name, health points (HP), attack power, defense, level, and experience points (EXP).\n2. The system should provide functionality for an RPG character to attack another character, reducing the target's HP based on the attacker's attack power and the defender's defense.\n3. The system should include a healing function that increases the character's HP by 10 points, with a maximum HP cap of 100.\n4. The system should enable characters to gain experience points (EXP) and level up when they reach the required EXP threshold for their current level.\n5. The system should automatically increase the character's HP, attack power, and defense when they level up, with a maximum level cap of 100.\n6. The system should provide a method to check if a character is still alive based on their HP status.\n7. The system should offer getter methods to retrieve the values of HP, EXP, attack power, defense, and level for a character.\n8. The system should provide a setter method to manually set the HP value of a character.",
  "Server": "Title: Server Class Functionality\n\n1. The server should maintain a whitelist of addresses.\n2. The server should provide functionality to add an address to the whitelist.\n3. The server should provide functionality to remove an address from the whitelist.\n4. The server should accept incoming data packets containing an address and content.\n5. The server should reject incoming data packets if they do not contain both an address and content.\n6. The server should reject incoming data packets if the address is not in the whitelist.\n7. The server should store the address and content of accepted incoming data packets.\n8. The server should allow sending data packets with an address and content.\n9. The server should reject sending data packets if they do not contain both an address and content.\n10. The server should provide functionality to retrieve the last sent data packet.\n11. The server should provide functionality to retrieve the last received data packet.\n12. The server should handle invalid operations gracefully by returning appropriate error codes or messages.",
  "ShoppingCart": "Title: ShoppingCart Management System\n1. The system should allow users to add items to a shopping cart with a specified price and quantity.\n2. The system should allow users to remove items from the shopping cart with a specified quantity, and if the quantity reaches zero or less, the item should be completely removed from the cart.\n3. The system should provide a functionality to view all items currently in the shopping cart along with their prices and quantities.\n4. The system should calculate and provide the total price of all items in the shopping cart.\n5. The system should handle cases where an item is added multiple times by updating the quantity and price accordingly.\n6. The system should ensure that the shopping cart can handle a large number of items efficiently.\n7. The system should maintain data integrity, ensuring that no negative quantities or prices are stored.\n8. The system should be thread-safe if accessed concurrently by multiple users or processes.",
  "SignInSystem": "Title: User Sign-In System\n1. The system should allow adding new users by their username.\n2. The system should allow signing in users by their username.\n3. The system should provide functionality to check if a specific user is signed in.\n4. The system should provide functionality to check if all users are signed in.\n5. The system should provide a list of usernames for users who are not signed in.\n6. The system should handle cases where a user attempts to add a username that already exists.\n7. The system should handle cases where a user attempts to sign in with a username that does not exist.\n8. The system should maintain the state of each user's sign-in status accurately.\n9. The system should efficiently manage user data using an unordered map for quick lookups and updates.\n10. The system should ensure thread safety if accessed by multiple threads concurrently.",
  "Snake": "Title: Snake Game Implementation\n1. The game initializes with a snake of length 1 at the center of the screen.\n2. The snake can move in four directions: up, down, left, and right.\n3. When the snake moves, its head position updates based on the direction and block size.\n4. If the snake's head collides with its body, the game resets.\n5. The game places food at a random position on the screen that is not occupied by the snake.\n6. When the snake eats the food, its length increases by one, and the score increases by 100 points.\n7. The game screen has defined width and height dimensions.\n8. The game blocks have a fixed size.\n9. The game provides methods to retrieve the current length of the snake, its positions, score, food position, and screen dimensions.\n10. The game resets to initial conditions when the snake collides with itself.",
  "SplitSentence": "Title: Sentence Splitter and Word Counter\n1. The system shall split a given string into sentences based on punctuation marks such as periods and question marks, ensuring that abbreviations and acronyms are not mistakenly treated as sentence boundaries.\n2. The system shall count the number of words in a given sentence, ignoring punctuation and special characters.\n3. The system shall process a text input to determine the maximum number of words found in any single sentence within the text.\n4. The system shall handle and ignore leading and trailing whitespace in each sentence after splitting.\n5. The system shall maintain the integrity of the original text, ensuring no data loss or corruption during processing.\n6. The system shall efficiently handle large text inputs without significant performance degradation.\n7. The system shall provide accurate results regardless of the complexity or length of the input text.\n8. The system shall be robust against various text formats and structures, including those with irregular spacing and punctuation.",
  "SQLGenerator": "Title: SQLGenerator Class\n\n1. The class should generate SQL SELECT statements based on specified fields and conditions.\n2. The class should generate SQL INSERT statements based on provided data fields and their corresponding values.\n3. The class should generate SQL UPDATE statements based on provided data fields and their corresponding values, along with a condition.\n4. The class should generate SQL DELETE statements based on a given condition.\n5. The class should generate a SQL SELECT statement to retrieve records of females under a specified age.\n6. The class should generate a SQL SELECT statement to retrieve records within a specified age range.\n7. The class should accept a table name during initialization and use it in all generated SQL queries.\n8. The class should handle empty fields and conditions gracefully, generating appropriate SQL queries without errors.\n9. The class should ensure that all string values in the generated SQL queries are properly quoted.\n10. The class should maintain immutability of its state after initialization, ensuring that all methods do not modify the internal state.",
  "SQLQueryBuilder": "Title: SQL Query Builder\n\n1. The system shall provide a method to generate a SELECT SQL query with specified table, columns, and optional WHERE conditions.\n2. The system shall provide a method to generate an INSERT SQL query with specified table and data pairs.\n3. The system shall provide a method to generate a DELETE SQL query with specified table and optional WHERE conditions.\n4. The system shall provide a method to generate an UPDATE SQL query with specified table, data pairs, and optional WHERE conditions.\n5. The SELECT query shall include all columns if no specific columns are provided.\n6. The WHERE conditions in SELECT, DELETE, and UPDATE queries shall be combined using the AND operator.\n7. The generated SQL queries shall use single quotes around string values in the WHERE clause and VALUES list.\n8. The system shall handle multiple columns and conditions gracefully, separating them with commas and appropriate operators.\n9. The system shall ensure that the generated SQL queries are syntactically correct based on the provided inputs.",
  "Statistics3": "Title: Statistics3 Class\n\n1. The system shall provide a method to calculate the mean of a dataset.\n2. The system shall provide a method to calculate the median of a dataset.\n3. The system shall provide a method to determine the mode(s) of a dataset.\n4. The system shall provide a method to calculate the Pearson correlation coefficient between two datasets.\n5. The system shall provide a method to generate a correlation matrix for multiple datasets.\n6. The system shall provide a method to calculate the standard deviation of a dataset.\n7. The system shall provide a method to compute the Z-scores for a dataset.\n8. The system shall handle empty datasets by returning NaN for mean, median, and standard deviation calculations.\n9. The system shall handle datasets with less than two elements by returning NaN for standard deviation calculations.\n10. The system shall throw an exception if the input datasets for correlation calculation have different lengths.\n11. The system shall handle cases where the standard deviation is zero by returning NaN for Z-score calculations.\n12. The system shall ensure numerical stability in all calculations involving floating-point arithmetic.",
  "StockPortfolioTracker": "Title: Stock Portfolio Tracker\n\n1. The system should allow initialization of a stock portfolio tracker with a specified cash balance.\n2. The system should support adding stocks to the portfolio, updating the quantity if the stock already exists.\n3. The system should support removing stocks from the portfolio, reducing the quantity or removing the stock entirely if the quantity reaches zero.\n4. The system should support buying stocks, deducting the cost from the cash balance and adding the stock to the portfolio.\n5. The system should support selling stocks, adding the proceeds to the cash balance and removing the stock from the portfolio.\n6. The system should calculate the total value of the portfolio, including the cash balance and the value of all stocks.\n7. The system should provide a summary of the portfolio, listing each stock's name and its total value.\n8. The system should provide the value of a specific stock based on its price and quantity.\n9. The system should allow retrieval of the current portfolio as a list of stocks.\n10. The system should allow retrieval of the current cash balance.\n11. The system should allow setting a new portfolio, replacing the existing one.\n12. The system should ensure that operations involving stock quantities do not result in negative quantities.\n13. The system should ensure that buying stocks does not proceed if there is insufficient cash balance.\n14. The system should maintain data integrity by ensuring that all operations correctly update both the portfolio and the cash balance.",
  "StudentDatabaseProcessor": "Title: Student Database Processor\n\n1. The system shall initialize a SQLite database with a table named \"students\" containing columns for id, name, age, gender, and grade.\n2. The system shall provide functionality to insert new student records into the \"students\" table using a map of student data.\n3. The system shall allow searching for students by their name and return a list of matching student records.\n4. The system shall enable deletion of student records from the \"students\" table based on the student's name.\n5. The system shall handle SQL queries securely by using parameterized queries to prevent SQL injection attacks.\n6. The system shall manage SQLite database connections efficiently, opening and closing connections as needed for each operation.\n7. The system shall ensure that all database operations are performed asynchronously or in a manner that does not block the main application thread.\n8. The system shall log any errors encountered during database operations for debugging purposes.\n9. The system shall support concurrent access to the database by multiple threads or processes.\n10. The system shall maintain data integrity and consistency across all database operations.",
  "TextFileProcessor": "Title: Text File Processor\n\n1. The system shall provide a class named `TextFileProcessor` that handles operations on text files.\n2. The `TextFileProcessor` class shall have a constructor that accepts a filename as a parameter.\n3. The system shall include a method `read_file_as_json` that reads the content of the file and returns it as a JSON object.\n4. The system shall include a method `read_file` that reads the entire content of the file and returns it as a string.\n5. The system shall include a method `write_file` that writes a given string content to the file, overwriting any existing content.\n6. The system shall include a method `process_file` that reads the file, removes all non-alphabetic characters from the content, writes the processed content back to the file, and returns the processed content as a string.\n7. The system shall utilize the `nlohmann/json` library for handling JSON data.\n8. The system shall handle file operations using standard C++ file streams (`ifstream` and `ofstream`).\n9. The system shall ensure that the file operations are performed safely and efficiently without causing memory leaks or other resource management issues.\n10. The system shall maintain the integrity of the file by ensuring that only valid operations are performed on it.",
  "Thermostat": "Title: Thermostat Control System\n1. The system should initialize with a current temperature, target temperature, and mode.\n2. The system should provide a method to retrieve the target temperature.\n3. The system should allow setting a new target temperature.\n4. The system should provide a method to retrieve the current mode.\n5. The system should allow setting the mode to either \"heat\" or \"cool\". Any other mode input should be rejected.\n6. The system should automatically set the mode based on the comparison between the current temperature and the target temperature.\n7. The system should check for conflicts between the current temperature and the mode. If there is a conflict, it should attempt to resolve it by adjusting the mode.\n8. The system should simulate the operation of adjusting the current temperature to match the target temperature, counting the number of time units required to achieve this.\n9. The system should increment the current temperature when in \"heat\" mode until it reaches the target temperature.\n10. The system should decrement the current temperature when in \"cool\" mode until it reaches the target temperature.\n11. The system should return the total time taken to reach the target temperature during simulation.",
  "TicTacToe": "Title: TicTacToe Game\n\nFunctional Requirements:\n1. The game should initialize with a default board size of 3x3.\n2. Players should be able to make a move by specifying a row and column on the board.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and return the winning player's symbol ('X' or 'O') if there is one.\n5. The game should determine if the board is full and return true if no more moves can be made.\n6. The game should provide the current player's symbol at any point during the game.\n\nNon-Functional Requirements:\n1. The game should handle invalid moves (e.g., attempting to place a mark on an already occupied cell) gracefully.\n2. The game should efficiently check for a winner after each move.\n3. The game should maintain the state of the board and the current player accurately throughout the game.",
  "TimeUtils": "Title: TimeUtils Class\n\n1. The system shall provide a method to retrieve the current time in \"HH:MM:SS\" format.\n2. The system shall provide a method to retrieve the current date in \"YYYY-MM-DD\" format.\n3. The system shall provide a method to add a specified number of seconds to the current time and return the new time in \"HH:MM:SS\" format.\n4. The system shall provide a method to convert a date-time string in \"YYYY-MM-DD HH:MM:SS\" format to a `std::tm` structure.\n5. The system shall provide a method to convert a `std::tm` structure to a date-time string in \"YYYY-MM-DD HH:MM:SS\" format.\n6. The system shall provide a method to calculate the difference in minutes between two date-time strings provided in \"YYYY-MM-DD HH:MM:SS\" format.\n7. The system shall provide a method to generate a date-time string in \"YYYY-MM-DD HH:MM:SS\" format from individual year, month, day, hour, minute, and second values.\n8. The system shall initialize the `datetime` member variable with the current local date and time upon instantiation of the `TimeUtils` class.",
  "TriCalculator": "Title: Trigonometric Calculator\n1. The system shall provide a method to calculate the cosine of an angle given in degrees.\n2. The system shall provide a method to calculate the sine of an angle given in degrees.\n3. The system shall provide a method to calculate the tangent of an angle given in degrees.\n4. The system shall use the Taylor series expansion to approximate the cosine function.\n5. The system shall use an iterative approach to compute the sine function.\n6. The system shall handle angles by converting them from degrees to radians before computation.\n7. The system shall include a method to compute the factorial of a non-negative integer.\n8. The system shall round the results of trigonometric calculations to a specified precision.\n9. The system shall output the intermediate Taylor series result for cosine calculation.\n10. The system shall return NaN for tangent calculations when the cosine of the angle is too close to zero to avoid division by zero errors.",
  "TwentyFourPointGame": "Title: Twenty-Four Point Game\n\n1. The system should generate a set of four random integers between 1 and 9 inclusive when requested.\n2. The system should accept an arithmetic expression as input from the user.\n3. The system should validate that the arithmetic expression uses only the four generated integers and standard arithmetic operators (+, -, *, /, ^).\n4. The system should evaluate the provided arithmetic expression and determine if it equals 24.\n5. If the expression evaluates to 24, the system should return a success indicator.\n6. If the expression does not evaluate to 24 or is invalid, the system should return a failure indicator.\n7. The system should allow the user to pass their turn, in which case it should generate a new set of four random integers.\n8. The system should handle division by zero gracefully without crashing.\n9. The system should correctly interpret operator precedence and parentheses in the arithmetic expressions.\n10. The system should provide a mechanism to manually set the four integers for testing purposes.",
  "URLHandler": "Title: URLHandler Class\n\n1. The system shall provide a class named `URLHandler` that takes a URL as input during initialization.\n2. The system shall allow retrieval of the scheme component from the URL.\n3. The system shall allow retrieval of the host component from the URL.\n4. The system shall allow retrieval of the path component from the URL.\n5. The system shall allow retrieval of the query parameters from the URL as a map of strings.\n6. The system shall allow retrieval of the fragment component from the URL.\n7. The system shall correctly parse URLs with or without schemes, hosts, paths, query parameters, and fragments.\n8. The system shall handle URLs where the query string contains multiple parameters separated by '&'.\n9. The system shall handle URLs where the query string contains parameters with '=' separating keys and values.\n10. The system shall return an empty string for components (scheme, host, path, fragment) that are not present in the URL.\n11. The system shall return an empty map if there are no query parameters in the URL.\n12. The system shall be efficient in parsing and extracting components from the URL.\n13. The system shall handle edge cases such as URLs with only the scheme, only the host, or only the fragment.\n14. The system shall be robust against malformed URLs, returning appropriate default values for missing components.",
  "UrlPath": "Title: URL Path Parser\n\n1. The system should provide a class named `UrlPath` to handle URL path parsing.\n2. The `UrlPath` class should have a method `add` that accepts a string segment, processes it, and adds it to the internal list of segments.\n3. The `UrlPath` class should have a method `parse` that takes a URL path and a character set as input, processes the path, and populates the internal list of segments.\n4. The `UrlPath` class should have a static method `fix_path` that removes leading and trailing slashes from a given path.\n5. The `UrlPath` class should have a method `get_segments` that returns the list of processed segments.\n6. The `UrlPath` class should have a method `with_end_tag` that returns a boolean indicating whether the original path ended with a slash.\n7. The `parse` method should decode percent-encoded characters in the URL path segments.\n8. The `parse` method should handle empty paths gracefully without causing errors.\n9. The `add` method should ensure that each added segment is processed using the `fix_path` method before being stored.\n10. The system should support UTF-8 encoded paths and segments.\n11. The `parse` method should not process or decode segments that contain percent signs (`%`) without a valid encoding sequence following them.",
  "UserLoginDB": "Title: UserLoginDB\n\n1. The system shall provide functionality to insert a new user into the database with a unique username and password.\n2. The system shall allow searching for a user by their username and return the username and password if found.\n3. The system shall enable deletion of a user from the database using their username.\n4. The system shall validate user login credentials by checking if the provided username and password match an entry in the database.\n5. The system shall automatically create a 'users' table upon initialization if it does not already exist.\n6. The system shall handle SQLite errors gracefully by throwing exceptions with descriptive error messages.\n7. The system shall ensure that all SQLite statements are properly finalized after execution to prevent memory leaks.\n8. The system shall manage the opening and closing of the database connection to ensure resources are properly utilized.\n9. The system shall use parameterized queries to prevent SQL injection attacks.\n10. The system shall maintain a single active SQLite connection throughout its lifecycle.",
  "VectorUtil": "Title: VectorUtil Class\n\n1. The system shall provide a method to calculate the similarity between two vectors using the dot product of their normalized forms.\n2. The system shall provide a method to calculate the cosine similarities between a single vector and a list of vectors.\n3. The system shall provide a method to calculate the similarity between the mean vectors of two lists of vectors.\n4. The system shall provide a method to compute the Inverse Document Frequency (IDF) weights for a given set of document frequencies and the total number of documents.\n5. The system shall handle vectors of fixed size specified at compile time.\n6. The system shall throw an exception if either of the input lists in the n_similarity method is empty.\n7. The system shall return a similarity value of 0.0 for vectors with zero norm in the cosine_similarities method.\n8. The system shall ensure that the normalization process does not divide by zero.\n9. The system shall support pre-instantiation of templates for vectors of size 2 and 8.",
  "VendingMachine": "Title: Vending Machine System\n\n1. The system should allow adding items with a specified name, price, and quantity.\n2. The system should accept coins and update the internal balance accordingly.\n3. The system should enable purchasing an item if it exists in the inventory, has sufficient quantity, and the user has inserted enough money. After a successful purchase, the balance should be updated by subtracting the item's price, and the item's quantity should decrease by one.\n4. The system should support restocking items by increasing the quantity of an existing item.\n5. The system should provide a display of all available items along with their prices and quantities.\n6. The system should allow retrieval of the current inventory state.\n7. The system should permit setting the inventory state externally.\n8. The system should allow setting the internal balance externally.",
  "Warehouse": "Title: Warehouse Management System\n\n1. The system should allow adding products with a unique product ID, name, and initial quantity to the inventory.\n2. The system should allow updating the quantity of an existing product in the inventory.\n3. The system should provide functionality to retrieve the current quantity of a product based on its product ID.\n4. The system should enable creating an order for a product if the requested quantity is available in the inventory, reducing the inventory quantity accordingly.\n5. The system should allow changing the status of an existing order.\n6. The system should provide functionality to track the status of an order based on its order ID.\n7. The system should expose the current state of the inventory, including all products and their quantities.\n8. The system should expose the current state of all orders, including their statuses.",
  "WeatherSystem": "Title: Weather System\n\n1. The system should allow initialization with a city name.\n2. The system should provide functionality to query weather information for the initialized city from a provided list of weather data.\n3. The system should support querying temperature in either Celsius or Fahrenheit units.\n4. The system should convert temperature units if the requested unit differs from the stored unit.\n5. The system should allow setting a new city name.\n6. The system should allow setting a new temperature value.\n7. The system should provide functionality to convert a temperature from Celsius to Fahrenheit.\n8. The system should provide functionality to convert a temperature from Fahrenheit to Celsius.\n9. The system should provide functionality to retrieve the current city name.\n10. The system should handle cases where the city is not found in the provided weather data list by returning default values (0.0 for temperature and an empty string for weather).",
  "Words2Numbers": "Title: Words2Numbers Translator\n1. Convert textual representation of numbers into their integer equivalents.\n2. Handle ordinal numbers such as \"first\", \"second\", \"third\", etc.\n3. Recognize and process words like \"and\", \"hundred\", \"thousand\", \"million\", \"billion\", and \"trillion\".\n4. Accept hyphenated words and treat them as space-separated words.\n5. Validate input to ensure all words are recognized as valid number words or ordinal words.\n6. Return the original text with the last number converted to its integer form appended at the end.\n7. Maintain case insensitivity for input words.\n8. Ensure the system can handle large numbers up to trillions.\n9. Provide a method to check if the input string is a valid sequence of number words.\n10. Handle edge cases such as zero and negative numbers gracefully.",
  "XMLProcessor": "Title: XML Processor\n\n1. The system shall provide functionality to initialize an XML processor with a specified XML file name.\n2. The system shall be able to read an XML file from the disk and return the root element of the XML document.\n3. The system shall be capable of writing the current state of the XML document to a specified file name on the disk.\n4. The system shall process XML data by converting the text content of all \"item\" elements to uppercase and then save the modified XML document to a specified file name.\n5. The system shall provide a method to find all XML elements with a specified tag name within the document and return them as a list.\n6. The system shall handle errors gracefully, such as when an XML file cannot be loaded or when no root element is found, by logging an error message and returning an appropriate value.\n7. The system shall maintain the integrity of the XML document structure during processing operations.\n8. The system shall support the use of TinyXML library for parsing and manipulating XML documents.",
  "ZipFileProcessor": "Title: Zip File Processor\n\n1. The system shall provide functionality to extract all files from a specified zip archive into a given output directory.\n2. The system shall provide functionality to extract a specific file from a specified zip archive into a given output directory.\n3. The system shall provide functionality to create a new zip archive containing specified files.\n4. The system shall provide functionality to read basic information about a zip file, including its path and mode.\n5. The system shall handle errors gracefully by logging error messages to standard error output.\n6. The system shall ensure that the output directory exists before attempting to extract files into it, creating it if necessary.\n7. The system shall support UTF-8 encoding for file names within the zip archive.\n8. The system shall use the Boost filesystem library for directory operations.\n9. The system shall use the libzip library for zip file operations.\n10. The system shall provide a constructor to initialize the processor with the path to a zip file.\n11. The system shall validate input parameters, such as ensuring the output directory is not empty before proceeding with extraction or creation operations."
}
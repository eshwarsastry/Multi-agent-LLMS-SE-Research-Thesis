{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n1. The system should filter requests based on the URI path and HTTP method.\n2. Requests starting with \"/api\" or \"/login\" should automatically pass the filter.\n3. For other requests, the system should validate a JWT token included in the request.\n4. The JWT token must contain the user's name at the beginning.\n5. The JWT token must include a timestamp indicating when the token was issued.\n6. The system should reject tokens that are older than 72 hours.\n7. If the token is valid and the user's level is greater than 2, the system should log the user's name, address, and the current timestamp.\n8. The system should handle exceptions gracefully and return false if any error occurs during the filtering process.",
  "AreaCalculator": "Title: Area Calculator\n1. The system shall provide a class named `AreaCalculator` that calculates areas of various geometric shapes.\n2. The `AreaCalculator` class shall accept a single parameter, `radius`, during initialization and throw an exception if the radius is negative.\n3. The `AreaCalculator` class shall have a method `calculate_circle_area` that returns the area of a circle using the formula πr².\n4. The `AreaCalculator` class shall have a method `calculate_sphere_area` that returns the surface area of a sphere using the formula 4πr².\n5. The `AreaCalculator` class shall have a method `calculate_cylinder_area` that accepts a parameter `height` and returns the surface area of a cylinder using the formula 2πr(r + h), throwing an exception if the height is negative.\n6. The `AreaCalculator` class shall have a method `calculate_sector_area` that accepts a parameter `angle` and returns the area of a sector using the formula 0.5r²θ.\n7. The `AreaCalculator` class shall have a method `calculate_annulus_area` that accepts parameters `inner_radius` and `outer_radius` and returns the area of an annulus using the formula π(R² - r²), throwing an exception if the inner radius is greater than the outer radius.",
  "ArgumentParser": "Title: Command Line Argument Parser\n1. The system should parse command line arguments provided as a single string.\n2. The parser should support both long-form arguments (e.g., --key=value) and short-form arguments (e.g., -k value).\n3. The parser should allow adding arguments with optional flags indicating whether they are required or not.\n4. The parser should allow specifying the type of each argument (e.g., int, bool, string).\n5. The parser should convert argument values to their specified types using predefined conversion functions.\n6. The parser should return a tuple containing a boolean indicating success and a set of missing required arguments.\n7. The parser should handle default values for arguments without provided values, setting them to \"1\" for short-form arguments.\n8. The parser should provide a method to retrieve the value of a specific argument by its key.\n9. The parser should include built-in type converters for integer and boolean types.\n10. The parser should gracefully handle invalid conversions by returning the original value.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n3. The system should provide a method to calculate the total number of arrangements (permutations) of all possible lengths from 1 to n.\n4. The system should provide a method to generate all possible arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n5. The system should provide a method to generate all possible arrangements (permutations) of all possible lengths from 1 to n.\n6. The system should include a utility function to compute the factorial of a given integer.\n7. The system should handle cases where the input list of strings is empty or contains duplicate strings.\n8. The system should ensure that the output of arrangement generation methods is unique and does not contain duplicate permutations.\n9. The system should be efficient in terms of memory usage and execution time, especially for larger input sizes.\n10. The system should be robust against invalid inputs, such as negative values for n or m, and handle them gracefully.",
  "AssessmentSystem": "Title: Assessment System\n\n1. The system should allow adding a student with their grade and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the Grade Point Average (GPA) for a given student.\n4. The system should identify and return a list of all students who have failed any course (defined as scoring below 60).\n5. The system should calculate and return the average score for a specific course across all students who have taken it.\n6. The system should identify and return the name of the student with the highest GPA.\n7. The system should handle cases where data might not be available (e.g., no scores for a student, no students in the system) by returning an appropriate optional value indicating the absence of data.",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n\n1. The system should accept a string input representing guitar play instructions.\n2. The system should parse the input string into segments where each segment contains a chord and a corresponding tune.\n3. The system should store each parsed segment as a `PlayItem` object containing the chord and tune.\n4. The system should provide a method to interpret the input string and generate a list of `PlayItem` objects.\n5. If requested, the system should display each parsed segment in a formatted manner showing the chord and tune.\n6. The system should handle empty input strings gracefully by returning an empty list of `PlayItem` objects.\n7. The system should correctly identify and separate alphabetic characters as chords and non-alphabetic characters as tunes within each segment.\n8. The system should output the formatted display of each segment only if the display flag is set to true during interpretation.",
  "AvgPartition": "Title: AvgPartition Class\n\n1. The class should accept a list of integers and a limit as input during initialization.\n2. It should provide a method to determine the number of partitions and the remainder when dividing the list by the limit.\n3. It should provide a method to retrieve a specific partition of the list based on an index, where each partition is as evenly distributed as possible given the limit.\n4. The partitions should be created such that the first 'remainder' partitions have one more element than the rest.\n5. The class should not modify the original list of integers.\n6. The class should handle cases where the limit is greater than the size of the list by returning partitions of size 1 or empty partitions as necessary.\n7. The class should ensure that the sum of the sizes of all partitions equals the size of the original list.",
  "BalancedBrackets": "Title: Balanced Brackets Checker\n1. The system should accept a string expression containing various types of brackets.\n2. The system should determine whether the brackets in the expression are balanced.\n3. The system should ignore any characters in the expression that are not brackets.\n4. The system should support three types of brackets: parentheses '()', curly braces '{}', and square brackets '[]'.\n5. The system should ensure that each opening bracket has a corresponding closing bracket of the same type.\n6. The system should ensure that brackets are properly nested within each other.\n7. The system should provide a method to clear non-bracket characters from the expression before checking for balance.\n8. The system should return true if the brackets in the expression are balanced, otherwise it should return false.",
  "BankAccount": "Title: Bank Account Management System\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide functionality to deposit a specified amount into the bank account, ensuring that the deposit amount is not negative.\n3. The system should provide functionality to withdraw a specified amount from the bank account, ensuring that the withdrawal amount is not negative and does not exceed the current balance.\n4. The system should provide functionality to view the current balance of the bank account.\n5. The system should provide functionality to transfer a specified amount from one bank account to another, ensuring that the transfer amount is not negative and does not exceed the sender's current balance.\n6. The system should handle invalid operations by throwing exceptions with appropriate error messages.",
  "BigNumCalculator": "Title: BigNumCalculator\n\n1. The system shall provide functionality to add two large numbers represented as strings.\n2. The system shall provide functionality to subtract two large numbers represented as strings.\n3. The system shall provide functionality to multiply two large numbers represented as strings.\n4. The addition operation shall handle numbers of different lengths by padding the shorter number with leading zeros.\n5. The subtraction operation shall correctly handle cases where the first number is smaller than the second number, returning a negative result.\n6. The multiplication operation shall handle numbers of different lengths and produce the correct product.\n7. The results of all operations shall be returned as strings.\n8. Leading zeros in the result of any operation shall be removed, except when the result is zero.\n9. The system shall handle edge cases such as adding, subtracting, or multiplying zero.\n10. The system shall ensure that the operations are performed accurately without overflow errors for very large numbers.",
  "BinaryDataProcessor": "Title: Binary Data Processor\n1. The system should accept a binary string as input.\n2. The system should remove any non-binary characters ('0' or '1') from the input string.\n3. The system should calculate the percentage of zeroes and ones in the cleaned binary string.\n4. The system should provide the bit length of the cleaned binary string.\n5. The system should convert the cleaned binary string into an ASCII string by processing each 8-bit segment as a byte.\n6. The system should convert the cleaned binary string into a UTF-8 string using the same method as converting to ASCII.",
  "BitStatusUtil": "Title: BitStatusUtil Class\n\n1. The system shall provide functionality to add a status to a set of states using bitwise operations.\n2. The system shall provide functionality to check if a specific status is present in a set of states using bitwise operations.\n3. The system shall provide functionality to remove a status from a set of states using bitwise operations.\n4. The system shall validate that all input arguments are non-negative integers.\n5. The system shall validate that all input arguments are even integers.\n6. The system shall throw an exception if any input argument does not meet the validation criteria.\n7. The system shall ensure that the state values are represented as integers.\n8. The system shall support static methods for adding, checking, and removing statuses without requiring instantiation of the class.\n9. The system shall handle exceptions gracefully when invalid arguments are provided during method calls.",
  "BlackjackGame": "Title: Blackjack Game Implementation\n1. The system shall initialize a standard 52-card deck with cards represented as strings in the format \"RankSuit\".\n2. The system shall shuffle the deck randomly at the start of each game.\n3. The system shall calculate the value of a given hand of cards according to Blackjack rules, where face cards (J, Q, K) are worth 10 points, Aces can be worth either 1 or 11 points, and numbered cards are worth their face value.\n4. The system shall determine the winner of a game between a player and a dealer based on the values of their hands, with the player winning if they have a higher hand value without exceeding 21, and the dealer winning otherwise. If both exceed 21, the player wins if their hand value is less than or equal to the dealer's hand value.\n5. The system shall maintain separate hands for the player and the dealer throughout the game.\n6. The system shall ensure that the deck is not modified after it has been shuffled and dealt.\n7. The system shall handle ties by declaring the dealer as the winner when both the player and dealer exceed 21 and have the same hand value.",
  "BookManagement": "Title: Book Management System\n\n1. The system should allow adding books to the inventory with an optional quantity parameter, defaulting to 1 if not specified.\n2. The system should allow removing a specified quantity of a book from the inventory, throwing an error if the book does not exist or the quantity to remove exceeds the available stock.\n3. The system should provide a function to view the entire inventory, returning a map of book titles to their respective quantities.\n4. The system should provide a function to check the quantity of a specific book in the inventory, returning 0 if the book is not found.\n5. The system should maintain an internal data structure to store book titles and their quantities efficiently.\n6. The system should handle concurrent operations safely, ensuring data integrity.\n7. The system should be robust against invalid inputs, such as negative quantities or empty book titles, by throwing appropriate exceptions or errors.\n8. The system should ensure that when the quantity of a book reaches zero after removal, the book entry is removed from the inventory.",
  "BookManagementDB": "Title: Book Management Database\n\n1. The system shall manage a database of books using SQLite.\n2. The system shall allow the creation of a table named 'books' with columns for book ID, title, author, and availability status.\n3. The system shall provide functionality to add a new book to the database with a specified title and author, setting its availability status to true.\n4. The system shall provide functionality to remove a book from the database by specifying its unique ID.\n5. The system shall provide functionality to mark a book as borrowed by specifying its unique ID, updating its availability status to false.\n6. The system shall provide functionality to mark a book as returned by specifying its unique ID, updating its availability status to true.\n7. The system shall provide functionality to search and retrieve all books in the database, returning their details including ID, title, author, and availability status.\n8. The system shall handle database connection errors by throwing a runtime exception with an appropriate error message.\n9. The system shall ensure that all SQLite statements are properly prepared, executed, and finalized to prevent memory leaks and other issues.\n10. The system shall maintain a single SQLite database connection throughout its lifecycle, opening it upon initialization and closing it upon destruction.",
  "BoyerMooreSearch": "Title: BoyerMooreSearch Implementation\n1. The system should provide a class named `BoyerMooreSearch` that initializes with a given text and pattern.\n2. The system should include a method `match_in_pattern` that returns the index of a character in the pattern from the end, or -1 if the character does not exist in the pattern.\n3. The system should include a method `mismatch_in_text` that identifies the position of the first mismatch between the pattern and the text starting from a given position, or -1 if there is no mismatch.\n4. The system should implement the `bad_character_heuristic` method to find all starting positions in the text where the pattern matches using the Boyer-Moore algorithm's bad character rule.\n5. The system should handle cases where the pattern is not found in the text by returning an empty list of positions.\n6. The system should efficiently skip sections of the text based on mismatches to reduce unnecessary comparisons.\n7. The system should maintain the integrity of the original text and pattern throughout its operations.\n8. The system should be able to handle edge cases such as an empty pattern or text.\n9. The system should ensure that the search operation is case-sensitive.\n10. The system should be optimized for performance, minimizing the number of character comparisons during the search process.",
  "Calculator": "Title: Expression Calculator\n1. The system should evaluate mathematical expressions provided as strings.\n2. Supported operations include addition (+), subtraction (-), multiplication (*), division (/), and exponentiation (^).\n3. The system should handle operator precedence correctly, with exponentiation having the highest precedence, followed by multiplication and division, and then addition and subtraction.\n4. Parentheses should be used to group operations and override the default precedence rules.\n5. The system should return a double value representing the result of the evaluated expression.\n6. The system should handle empty input strings by returning 0.0.\n7. The system should throw an exception or handle errors gracefully for invalid expressions, such as division by zero or malformed syntax.\n8. The system should support floating-point numbers in the expressions.\n9. The system should ignore spaces within the input expression string.\n10. The system should maintain internal state using stacks to manage operands and operators during evaluation.",
  "CalendarUtil": "Title: Calendar Utility\n\n1. The system should allow adding an event with a specific date, start time, end time, and description.\n2. The system should allow removing an event based on its exact match of date, start time, end time, and description.\n3. The system should provide a list of all events scheduled for a specific date.\n4. The system should check if a given time slot (defined by start and end times) is available for scheduling new events.\n5. The system should generate a list of available time slots for a given date, where each slot is one hour long.\n6. The system should retrieve a specified number of upcoming events that have not yet started.\n7. Events should be stored in a way that allows efficient addition, removal, and querying based on date and time.\n8. The system should handle time conversions between timestamps and human-readable date-time formats accurately.\n9. The system should ensure that events are sorted or queried in chronological order when retrieving upcoming events.\n10. The system should be able to handle daylight saving time changes and other calendar anomalies gracefully.",
  "CamelCaseMap": "Title: CamelCaseMap\n\n1. The system shall provide a method to convert a string from snake_case to camelCase.\n2. The system shall allow setting a key-value pair in the map where keys are converted to camelCase before storage.\n3. The system shall allow retrieving the value associated with a given key, converting the key to camelCase before lookup.\n4. The system shall allow deleting a key-value pair from the map using the original key format, which will be converted to camelCase internally.\n5. The system shall maintain the order of insertion of keys.\n6. The system shall provide a method to get the number of items stored in the map.\n7. The system shall support iteration over the keys in the order they were inserted.",
  "ChandrasekharSieve": "Title: Chandrasekhar Sieve Algorithm\n\nFunctional Requirements:\n1. The system should accept an integer input `n` which represents the upper limit up to which prime numbers are to be found.\n2. The system should generate a list of all prime numbers less than or equal to `n`.\n3. The system should provide a method to retrieve the list of generated prime numbers.\n\nNon-Functional Requirements:\n1. The algorithm should efficiently handle large values of `n` without excessive memory usage.\n2. The algorithm should execute within a reasonable time frame even for large inputs.\n3. The system should not crash or produce incorrect results for invalid inputs such as negative numbers or zero.",
  "Chat": "Title: Chat System\n1. The system should allow adding a new user by providing a unique username.\n2. The system should allow removing an existing user by specifying their username.\n3. The system should enable sending a message from one user to another, including the sender's name, receiver's name, message content, and a timestamp.\n4. The system should provide functionality to retrieve all messages for a specific user.\n5. The system should provide functionality to retrieve all users and their associated messages.\n6. The system should generate a timestamp in the format \"YYYY-MM-DD HH:MM:SS\" for each message sent.\n7. The system should ensure that a user cannot be added if the username already exists.\n8. The system should ensure that a message cannot be sent if either the sender or receiver does not exist in the system.",
  "ClassRegistrationSystem": "Title: Class Registration System\n\n1. The system should allow the registration of new students with their name and major.\n2. The system should prevent duplicate student registrations based on the student's name.\n3. The system should allow students to register for classes by providing their name and the class name.\n4. The system should prevent a student from registering for the same class more than once.\n5. The system should provide a list of students enrolled in a specific major.\n6. The system should provide a list of all unique majors present in the system.\n7. The system should determine and return the most popular class within a specific major based on the number of students registered for that class.\n8. The system should maintain the integrity of student data, including their names and majors.\n9. The system should efficiently handle operations such as student registration, class registration, and data retrieval.\n10. The system should ensure that all operations related to student and class management are performed accurately and consistently.",
  "Classroom": "Title: Classroom Management System\n\n1. The system should manage courses in a classroom.\n2. Each course should have a unique combination of name, start time, and end time.\n3. The system should allow adding a course to a classroom only if it does not already exist.\n4. The system should allow removing a course from a classroom if it exists.\n5. The system should check if a classroom is free at a specific time.\n6. The system should check for conflicts when adding a new course to ensure no overlapping times with existing courses.\n7. The system should verify if a specific course is scheduled in the classroom.\n8. The system should convert time strings in the format \"HH:MM\" to `std::tm` structure.\n9. The system should convert `std::tm` structure to `std::time_t` for time calculations.\n10. The system should determine if there is a time conflict between two courses based on their start and end times.\n11. The system should handle invalid time formats by throwing an exception.\n12. The system should handle errors in time conversion by throwing an exception.",
  "CombinationCalculator": "Title: Combination Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of combinations of selecting `m` items from `n` items.\n3. The system should provide a method to calculate the total number of possible combinations of all subsets from the input data.\n4. The system should provide a method to generate all possible combinations of selecting `m` items from the input data.\n5. The system should provide a method to generate all possible combinations of all subsets from the input data.\n6. The system should handle cases where `m` is less than 0 or greater than the size of the input data by returning an empty result.\n7. The system should handle cases where the number of items `n` exceeds 63 in the `count_all` method by returning infinity.\n8. The system should handle cases where the number of items `n` is negative in the `count_all` method by returning NaN.\n9. The system should use recursion to generate combinations internally.\n10. The system should ensure that the generated combinations do not contain duplicate entries.",
  "ComplexCalculator": "Title: Complex Number Calculator\n1. The system shall provide functionality to add two complex numbers.\n2. The system shall provide functionality to subtract two complex numbers.\n3. The system shall provide functionality to multiply two complex numbers.\n4. The system shall provide functionality to divide two complex numbers.\n5. The system shall handle complex numbers using the `std::complex<double>` data type.\n6. The system shall ensure that division by zero is handled gracefully.\n7. The system shall maintain precision in calculations involving complex numbers.\n8. The system shall be implemented as a class with static methods for each operation.\n9. The system shall not modify the input complex numbers during operations.\n10. The system shall return a new complex number as the result of each operation.",
  "CookiesUtil": "Title: Cookies Management Utility\n\n1. The system shall provide a utility class named `CookiesUtil` for managing cookies stored in a JSON file.\n2. The `CookiesUtil` class shall be initialized with a path to a cookies file.\n3. The system shall have a method `get_cookies` that extracts cookies from a JSON response and saves them to the cookies file.\n4. The system shall have a method `load_cookies` that reads cookies from the cookies file and returns them as a JSON object.\n5. The system shall have a private method `_save_cookies` that writes the current cookies to the cookies file in a formatted JSON structure.\n6. The system shall have a method `set_cookies` that sets the cookies in a JSON request by converting the internal cookies map into a string format suitable for HTTP requests.\n7. The system shall handle exceptions during file operations and output error messages to standard error.\n8. The cookies file shall be formatted as a JSON document with indentation for readability.\n9. The cookies in the JSON file shall be stored as key-value pairs within a JSON object.\n10. The cookies string in the HTTP request shall be formatted as a semicolon-separated list of key=value pairs.",
  "CSVProcessor": "Title: CSV Processor\n\n1. The system should read a CSV file and return its header and data rows.\n2. The system should write data to a CSV file, where each row of data is separated by commas and each row ends with a newline character.\n3. The system should process a specified column in a CSV file by converting all characters in that column to uppercase.\n4. The processed data should be saved in a new CSV file with the original filename appended with \"_process\".\n5. The system should handle cases where the specified column index does not exist in any row of the CSV file.\n6. The system should return an error code if the file cannot be opened for reading or writing.\n7. The system should ensure that the header row is preserved when processing a specific column.\n8. The system should handle empty CSV files gracefully, returning empty data structures without errors.",
  "CurrencyConverter": "Title: Currency Converter\n1. The system should provide functionality to convert an amount from one currency to another.\n2. The system should maintain a list of supported currencies.\n3. The system should allow adding a new currency with its exchange rate.\n4. The system should allow updating the exchange rate of an existing currency.\n5. The conversion should not occur if the source and target currencies are the same.\n6. The conversion should not occur if either the source or target currency is not supported.\n7. Adding a currency should fail if the currency already exists in the system.\n8. Updating a currency's exchange rate should fail if the currency does not exist in the system.\n9. The system should return a list of all supported currencies in a predefined order.",
  "DatabaseProcessor": "Title: DatabaseProcessor\n\n1. The system shall provide functionality to create a new table in a SQLite database with specified table name and two columns named 'key1' of type TEXT and 'key2' of type INTEGER.\n2. The system shall allow insertion of multiple records into a specified table, where each record contains values for 'name' and 'age'.\n3. The system shall support searching for records in a specified table based on the 'name' field and return all matching records.\n4. The system shall enable deletion of records from a specified table based on the 'name' field.\n5. The system shall handle errors during database operations by throwing exceptions with descriptive error messages.\n6. The system shall ensure that the database connection is properly closed after each operation.\n7. The system shall use parameterized queries to prevent SQL injection attacks.\n8. The system shall be able to handle concurrent database operations without causing data corruption or inconsistencies.\n9. The system shall maintain the integrity of the database by ensuring that all transactions are completed successfully or rolled back in case of failure.\n10. The system shall be compatible with SQLite databases and utilize the winsqlite3 library for database operations.",
  "DataStatistics": "Title: DataStatistics Class\n\n1. The system shall provide a method to calculate the mean of a dataset, rounding the result to two decimal places.\n2. The system shall provide a method to calculate the median of a dataset, rounding the result to two decimal places if necessary.\n3. The system shall provide a method to determine the mode(s) of a dataset, returning all modes in a vector.\n4. The system shall throw an exception if any of the statistical methods are called with an empty dataset.\n5. The system shall handle datasets containing both positive and negative numbers accurately.\n6. The system shall maintain the integrity of the input data by not modifying the original dataset when calculating the median or mode.\n7. The system shall be able to handle large datasets efficiently without causing performance degradation.\n8. The system shall ensure that the calculated mean, median, and mode values are accurate within the specified precision.\n9. The system shall be robust against invalid inputs, such as non-numeric data, by throwing appropriate exceptions.\n10. The system shall provide clear and descriptive error messages when exceptions are thrown due to invalid operations.",
  "DataStatistics2": "Title: DataStatistics2 Class\n\n1. The system shall provide a class named `DataStatistics2` that accepts a vector of doubles as input during initialization.\n2. The system shall provide a method `get_sum` that returns the sum of all elements in the input data.\n3. The system shall provide a method `get_min` that returns the minimum value from the input data.\n4. The system shall provide a method `get_max` that returns the maximum value from the input data.\n5. The system shall provide a method `get_variance` that calculates and returns the variance of the input data, rounded to two decimal places.\n6. The system shall provide a method `get_std_deviation` that calculates and returns the standard deviation of the input data, rounded to two decimal places.\n7. The system shall provide a method `get_correlation` that calculates and returns the correlation of the input data. If the data size is less than 2, it should return 1.0.\n8. The system shall ensure that all calculations involving floating-point numbers maintain precision up to two decimal places.\n9. The system shall handle cases where the input data vector is empty or contains only one element appropriately, ensuring no division by zero occurs.\n10. The system shall not modify the input data vector after initialization.",
  "DataStatistics4": "Title: DataStatistics4 Class\n\n1. The system shall provide a method to calculate the correlation coefficient between two datasets.\n2. The system shall provide a method to calculate the skewness of a dataset.\n3. The system shall provide a method to calculate the kurtosis of a dataset.\n4. The system shall provide a method to compute the probability density function (PDF) values for a given dataset using specified mean (mu) and standard deviation (sigma).\n5. The system shall handle cases where the standard deviation is zero by returning 0 for skewness and NaN for kurtosis.\n6. The system shall ensure numerical stability and accuracy in calculations involving square roots and powers.\n7. The system shall efficiently compute statistical measures for large datasets without significant performance degradation.\n8. The system shall use a predefined constant value for pi (pai) in calculations requiring it.\n9. The system shall validate input data sizes for correlation coefficient calculation, ensuring both datasets have the same number of elements.\n10. The system shall return a vector of PDF values corresponding to each element in the input dataset.",
  "DecryptionUtils": "Title: Decryption Utilities\n\n1. The system shall provide a class named `DecryptionUtils` that initializes with a decryption key.\n2. The system shall support Caesar cipher decryption, taking a ciphertext string and an integer shift value as input, and returning the decrypted plaintext string.\n3. The system shall support Vigenère cipher decryption, taking a ciphertext string as input and using the initialized key, and returning the decrypted plaintext string.\n4. The system shall support Rail Fence cipher decryption, taking an encrypted text string and an integer number of rails as input, and returning the decrypted plaintext string.\n5. The system shall handle both uppercase and lowercase alphabetic characters during decryption processes.\n6. Non-alphabetic characters in the input strings shall remain unchanged in the output strings.\n7. The system shall correctly manage shifts in the Caesar cipher by wrapping around the alphabet when necessary.\n8. The system shall ensure that the Vigenère cipher decryption respects the case of the original letters in the ciphertext.\n9. The system shall reconstruct the plaintext from the Rail Fence pattern accurately based on the specified number of rails.",
  "DiscountStrategy": "Title: Discount Calculation System\n1. The system should accept customer information and a shopping cart as input.\n2. The system should calculate the total price of items in the shopping cart.\n3. The system should apply a discount based on the type of promotion selected (Fidelity, Bulk Item, Large Order).\n4. The system should calculate the final amount due after applying the appropriate discount.\n5. The system should support different types of promotions: Fidelity Promotion, Bulk Item Promotion, and Large Order Promotion.\n6. For Fidelity Promotion, a 5% discount should be applied if the customer's fidelity points are 1000 or more.\n7. For Bulk Item Promotion, a 10% discount should be applied to each item with a quantity of 20 or more.\n8. For Large Order Promotion, a 7% discount should be applied if there are 10 or more items in the shopping cart.\n9. If no promotion is selected, no discount should be applied.\n10. The system should handle cases where the required keys (\"quantity\", \"price\", \"fidelity\") are not present in the input data gracefully.",
  "EightPuzzle": "Title: EightPuzzle Solver\n1. The system should accept an initial state of the 8-puzzle game represented as a 3x3 matrix.\n2. The system should be able to identify the position of the blank tile (represented by 0) in the puzzle.\n3. The system should allow movement of the blank tile in four possible directions: up, down, left, and right, provided the move is within the bounds of the puzzle.\n4. The system should determine all possible valid moves from any given state of the puzzle.\n5. The system should solve the 8-puzzle game by finding a sequence of moves that transforms the initial state into the goal state, which is represented by the matrix {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}}.\n6. The system should return the sequence of moves required to solve the puzzle or an empty sequence if no solution exists.\n7. The system should handle the assignment of a new initial state to an existing EightPuzzle object using the assignment operator.",
  "EmailClient": "Title: Email Client System\n\n1. The system should allow creation of an email client with a specified email address and storage capacity.\n2. The system should enable sending emails from one email client to another, provided the recipient's inbox has enough space.\n3. The system should store each email with details including sender, receiver, content, size, timestamp, and read state.\n4. The system should allow fetching the first unread email from the inbox and mark it as read.\n5. The system should check if adding another email would exceed the storage capacity of the inbox.\n6. The system should calculate the total size of all emails currently stored in the inbox.\n7. The system should clear emails from the inbox to free up space when necessary, starting with the oldest emails first.\n8. The system should generate a timestamp for each email indicating the time it was sent.\n9. The system should handle empty inboxes gracefully by returning an empty map when attempting to fetch an email.\n10. The system should ensure that no email is sent if the recipient's inbox is full, and attempt to free up space by clearing old emails before retrying.",
  "EncryptionUtils": "Title: EncryptionUtils Class\n\n1. The class should accept a string key during initialization.\n2. The class should provide a method to encrypt a given plaintext using the Caesar cipher technique with a specified shift value.\n3. The class should provide a method to encrypt a given plaintext using the Vigenère cipher technique with the key provided during initialization.\n4. The class should provide a method to encrypt a given plaintext using the Rail Fence cipher technique with a specified number of rails.\n5. The Caesar cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n6. The Vigenère cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n7. The Rail Fence cipher method should throw an exception if the number of rails is less than or equal to zero.\n8. The Rail Fence cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n9. The encryption methods should not modify the original plaintext.\n10. The encryption methods should return the encrypted text as a string.",
  "ExcelProcessor": "Title: Excel Processor\n\n1. The system shall provide functionality to read data from an Excel file named by the user.\n2. The system shall support reading both string and integer values from the Excel file.\n3. The system shall provide functionality to write data to an Excel file named by the user.\n4. The system shall support writing both string and integer values to the Excel file.\n5. The system shall process data from an Excel file by transforming the N-th column based on specific rules.\n6. If the N-th column contains a string that does not start with a digit, the system shall convert all characters to uppercase and append the transformed string to each row.\n7. If the N-th column contains a string that starts with a digit, the system shall append only the first character of the string to each row.\n8. If the N-th column contains an integer, the system shall append the integer to each row.\n9. The processed data shall be saved in a new Excel file with the original filename appended with \"_process\".\n10. The system shall handle exceptions during file operations and return appropriate status codes.\n11. The system shall ensure that the Excel file is properly closed after reading or writing operations.\n12. The system shall validate the input parameters for file names and column indices to prevent errors.\n13. The system shall provide feedback on the success or failure of file operations through return values.\n14. The system shall maintain the integrity of the data during read, process, and write operations.",
  "ExpressionCalculator": "Title: Expression Calculator\n\n1. The system should accept a mathematical expression as a string input.\n2. The system should evaluate the given mathematical expression and return the result as a double.\n3. The system should support basic arithmetic operations including addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).\n4. The system should handle parentheses for grouping expressions.\n5. The system should correctly interpret unary minus as a negative sign.\n6. The system should ignore spaces in the input expression.\n7. The system should convert infix expressions to postfix notation before evaluation.\n8. The system should maintain operator precedence during evaluation.\n9. The system should throw an exception for invalid operators or malformed expressions.\n10. The system should handle floating-point numbers in the expression.\n11. The system should ensure that the output is accurate to at least six decimal places.\n12. The system should be efficient in terms of time complexity for evaluating expressions.\n13. The system should be robust against edge cases such as empty strings or expressions with only operators.\n14. The system should provide meaningful error messages for invalid inputs.",
  "FitnessTracker": "Title: FitnessTracker Application\n1. The system shall accept user input for height, weight, age, and sex to initialize a FitnessTracker object.\n2. The system shall calculate and provide the Body Mass Index (BMI) based on the user's height and weight.\n3. The system shall determine the user's condition relative to a standard BMI range, returning -1 if underweight, 0 if within the normal range, and 1 if overweight.\n4. The system shall calculate the daily calorie intake based on the user's sex, age, height, weight, and BMI condition.\n5. The system shall use the Mifflin-St. Jeor equation to compute Basal Metabolic Rate (BMR).\n6. The system shall adjust the calculated BMR by activity level factors to determine the daily calorie intake, with different multipliers for underweight, normal, and overweight conditions.\n7. The system shall store predefined BMI standard ranges for males and females.\n8. The system shall handle invalid inputs gracefully without causing runtime errors.\n9. The system shall ensure that all calculations are performed with sufficient precision to maintain accuracy.\n10. The system shall provide clear and understandable output for BMI, condition status, and daily calorie intake.",
  "GomokuGame": "Title: Gomoku Game Implementation\n1. The game should be initialized with a specified board size.\n2. Players should be able to make moves on the board by specifying a row and column.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and determine if there are five of the same symbols in a row horizontally, vertically, or diagonally.\n5. If a player achieves five in a row, the game should return that player as the winner.\n6. If no player has won and the board is full, the game should indicate a draw.\n7. The game should provide a method to retrieve the current state of the board.\n8. The game should handle invalid moves (e.g., placing a piece on an already occupied spot) gracefully.\n9. The game should ensure that all moves are within the bounds of the board.\n10. The game should support board sizes larger than 5x5, allowing for more complex games.",
  "Hotel": "Title: Hotel Management System\n\nFunctional Requirements:\n1. The system should allow the creation of a hotel with a specified name and initial room availability by room type.\n2. The system should provide functionality to book rooms by specifying the room type, number of rooms, and guest name. It should return \"Success!\" if the booking is successful, the number of available rooms if the requested number exceeds availability, or \"False.\" if the room type does not exist or no rooms are available.\n3. The system should allow guests to check in by specifying the room type, number of rooms, and guest name. It should verify that the guest has a valid booking and adjust the booked rooms accordingly. It should return true if the check-in is successful, otherwise false.\n4. The system should enable guests to check out by specifying the room type and number of rooms. It should increase the availability of the specified room type by the number of rooms checked out.\n5. The system should provide functionality to retrieve the number of available rooms for a specific room type.\n\nNon-Functional Requirements:\n1. The system should handle concurrent bookings and check-ins/outs efficiently.\n2. The system should ensure data integrity and consistency during booking, check-in, and check-out operations.\n3. The system should provide clear and concise feedback to users regarding the success or failure of their actions.\n4. The system should be scalable to accommodate an increasing number of hotels, room types, and guests.",
  "HRManagementSystem": "Title: HR Management System\n\n1. The system should allow adding an employee with unique employee ID, name, position, department, and salary.\n2. The system should prevent adding an employee if the employee ID already exists.\n3. The system should allow removing an employee by their unique employee ID.\n4. The system should allow updating an employee's details using their unique employee ID and a map of attributes to new values.\n5. The system should ensure that only existing attributes can be updated for an employee.\n6. The system should provide the ability to retrieve an employee's details by their unique employee ID.\n7. The system should return an empty result if an employee with the specified ID does not exist.\n8. The system should provide a function to list all employees with their details.\n9. The system should store employee details in a way that allows efficient retrieval, addition, removal, and update operations.\n10. The system should handle cases where employee information is missing or invalid during updates without corrupting the data.",
  "Interpolation": "Title: Interpolation Library\n\n1. The system shall provide a method to perform linear interpolation on a set of 1D data points.\n2. The system shall provide a method to perform bilinear interpolation on a set of 2D data points.\n3. The interpolation methods shall accept vectors of input data points and corresponding interpolated points.\n4. The output of the interpolation methods shall be a vector of interpolated values.\n5. The system shall handle cases where the interpolated point falls outside the range of the input data points by not including those points in the output.\n6. The system shall ensure that the interpolated values are calculated using linear interpolation for 1D data and bilinear interpolation for 2D data.\n7. The system shall maintain the order of interpolated points as they appear in the input vectors.\n8. The system shall be efficient in handling large datasets without significant performance degradation.\n9. The system shall be robust against invalid inputs, such as empty vectors or mismatched dimensions between input vectors.\n10. The system shall provide clear documentation on how to use the interpolation methods and the expected format of input data.",
  "IPAddress": "Title: IPAddress Class\n\n1. The class should accept an IP address as a string during initialization.\n2. It should provide a method to check if the IP address is valid.\n3. A valid IP address consists of four octets separated by dots.\n4. Each octet must be a number between 0 and 255 inclusive.\n5. Each octet must not contain leading zeros unless it is exactly \"0\".\n6. The class should provide a method to retrieve the octets of the IP address as a vector of strings if the IP address is valid.\n7. The class should provide a method to convert the IP address into its binary representation as a string if the IP address is valid.\n8. The binary representation should display each octet as an 8-bit binary number, separated by dots.\n9. If the IP address is invalid, methods that return data should return an empty container or string.",
  "IpUtil": "Title: IP Utility Functions\n\n1. Validate an IPv4 address provided as a string.\n2. Validate an IPv6 address provided as a string.\n3. Retrieve the hostname associated with a given IPv4 address.\n4. Return the local machine's hostname when the input IP address is \"0.0.0.0\".\n5. Return an empty string if the IP address does not have an associated hostname or if the hostname cannot be retrieved.\n6. The system should handle both IPv4 and IPv6 addresses correctly.\n7. The utility functions should be implemented in a class named `IpUtil`.\n8. The utility functions should be static methods within the `IpUtil` class.\n9. The utility functions should use appropriate Windows socket APIs for validation and hostname resolution.\n10. The utility functions should handle errors gracefully and provide meaningful return values.",
  "JobMarketplace": "Title: Job Marketplace System\n\n1. Users can post jobs with a title, company name, and a list of requirements.\n2. Users can remove jobs from the marketplace.\n3. Users can submit their resumes with their name, skills, and experience.\n4. Users can withdraw their submitted resumes from the marketplace.\n5. Users can search for jobs based on criteria that match either the job title or any of the job requirements.\n6. The system can retrieve a list of resumes that match the requirements of a specific job.\n7. The system checks if a resume meets all the requirements of a job by comparing the skills listed in the resume against the job requirements.\n8. Jobs and resumes are stored in separate lists within the system.\n9. Equality operators are defined for both Job and Resume structures to facilitate comparison and removal operations.",
  "JSONProcessor": "Title: JSON Processor\n\n1. The system shall provide functionality to read a JSON file from a specified file path.\n2. The system shall parse the JSON file and store the parsed data in a JSON object.\n3. The system shall return a status code indicating success, failure due to file not found, or failure due to parsing errors when reading a JSON file.\n4. The system shall provide functionality to write a JSON object to a specified file path in a formatted manner with an indentation of 4 spaces.\n5. The system shall return a status code indicating success or failure when writing a JSON file.\n6. The system shall provide functionality to process a JSON file by removing a specified key from the JSON data.\n7. The system shall read the JSON file, remove the specified key if it exists, and then write the modified JSON back to the same file.\n8. The system shall return a status code indicating success, failure due to file not found, or failure due to processing errors when processing a JSON file.",
  "KappaCalculator": "Title: Kappa Calculator\n1. The system should calculate Cohen's Kappa coefficient for a given set of test data and number of categories.\n2. The system should calculate Fleiss' Kappa coefficient for a given set of test data, number of subjects, number of categories, and number of ratings per subject.\n3. The system should accept a matrix of integers representing the test data where each row corresponds to a subject and each column corresponds to a category.\n4. The system should handle input data in the form of a vector of vectors of integers.\n5. The system should utilize the Eigen library for matrix operations.\n6. The system should compute the observed agreement (P0) by summing the diagonal elements of the data matrix and normalizing it by the total number of ratings.\n7. The system should compute the expected agreement (Pe) based on the marginal sums of the data matrix.\n8. The system should return the Cohen's Kappa coefficient as a double value.\n9. The system should return the Fleiss' Kappa coefficient as a double value.\n10. The system should ensure numerical stability during calculations, especially when computing probabilities and avoiding division by zero.\n11. The system should provide accurate results for both Cohen's and Fleiss' Kappa coefficients within a reasonable margin of error.\n12. The system should be efficient in terms of time complexity, particularly for large datasets.\n13. The system should be robust against invalid inputs, such as negative numbers or inconsistent dimensions in the input data matrix.",
  "LongestWord": "Title: Longest Word Finder\n1. The system should allow adding individual words to a list of known words.\n2. The system should be able to find the longest word in a given sentence that is also present in the list of known words.\n3. The comparison for finding the longest word should be case-insensitive.\n4. Punctuation marks should be removed from the sentence before processing.\n5. The system should return the longest word found, or an empty string if no matching words are found.\n6. The system should provide a method to retrieve the current list of known words.",
  "MahjongConnect": "Title: MahjongConnect Game\n\n1. The game initializes with a board of specified dimensions filled with randomly selected icons from a given set.\n2. Players can select two positions on the board to attempt a move.\n3. A valid move requires both positions to be within the board boundaries, not identical, and contain matching icons.\n4. A valid move also requires that there exists a path between the two positions consisting of adjacent cells with the same icon.\n5. Upon a valid move, the icons at the selected positions are removed from the board.\n6. The game checks if all icons have been removed from the board after each move to determine if the game is over.\n7. The game should handle invalid moves gracefully without altering the board state.\n8. The board size and the set of icons are provided as inputs during the initialization of the game.\n9. The game should efficiently determine the validity of moves and the existence of paths between positions.\n10. The game should provide a method to check the game's completion status.",
  "Manacher": "Title: Manacher Algorithm Implementation\n1. The system should accept a string as input.\n2. The system should identify the longest palindromic substring within the input string.\n3. The system should handle strings of varying lengths and characters.\n4. The system should return the longest palindromic substring found in the input string.\n5. The system should efficiently compute the longest palindromic substring using the Manacher's algorithm.\n6. The system should correctly handle edge cases such as empty strings or strings with no palindromic substrings.\n7. The system should maintain the integrity of the original input string during processing.\n8. The system should not modify the input string directly but work on a modified version that includes separators between characters.\n9. The system should be able to handle special characters and spaces within the input string.\n10. The system should provide a clear and concise output of the longest palindromic substring.",
  "MetricsCalculator": "Title: Metrics Calculator\n1. The system should calculate and maintain true positives, false positives, false negatives, and true negatives based on predicted and true labels.\n2. The system should provide a method to update the metrics with new sets of predicted and true labels.\n3. The system should compute the precision of predictions using the formula: Precision = True Positives / (True Positives + False Positives).\n4. The system should compute the recall of predictions using the formula: Recall = True Positives / (True Positives + False Negatives).\n5. The system should compute the F1 score of predictions using the formula: F1 Score = 2 * (Precision * Recall) / (Precision + Recall).\n6. The system should compute the accuracy of predictions using the formula: Accuracy = (True Positives + True Negatives) / Total Predictions.\n7. The system should handle cases where division by zero might occur during the calculation of precision, recall, F1 score, and accuracy by returning 0.0 in such cases.\n8. The system should ensure that the input vectors for predicted and true labels are of the same size before processing them.\n9. The system should initialize all metric counters (true positives, false positives, false negatives, true negatives) to zero upon creation of a MetricsCalculator object.",
  "MetricsCalculator2": "Title: Metrics Calculator\n\n1. The system shall provide a method to calculate the Mean Reciprocal Rank (MRR) from a dataset consisting of pairs of integer vectors and integers.\n2. The system shall provide a method to calculate the Mean Average Precision (MAP) from a dataset consisting of pairs of integer vectors and integers.\n3. The MRR calculation shall return a pair containing the average MRR value and a vector of individual MRR values for each input pair.\n4. The MAP calculation shall return a pair containing the average MAP value and a vector of individual AP values for each input pair.\n5. If the input dataset is empty, both MRR and MAP calculations shall return an average value of 0.0 and a vector containing a single element of 0.0.\n6. For each input pair, if the integer value is less than or equal to 0 or the integer vector is empty, the corresponding MRR and AP values shall be 0.0.\n7. The MRR calculation shall find the position of the first occurrence of 1 in the integer vector and compute the reciprocal of its rank (position + 1).\n8. The MAP calculation shall compute the precision at each relevant item and then average these precision values for each input pair.\n9. The system shall handle cases where the integer vector does not contain any relevant items (value of 1) by returning an AP value of 0.0 for that pair.\n10. The system shall ensure that all calculations are performed efficiently and accurately, handling edge cases such as empty vectors and invalid input values gracefully.",
  "MovieBookingSystem": "Title: Movie Booking System\n\n1. The system should allow adding a new movie with details such as name, price, start time, end time, and number of seats.\n2. The system should enable booking tickets for a specific movie by selecting seats, ensuring that the selected seats are available.\n3. The system should provide a list of movies that are available within a specified time range.\n4. The system should validate the input time format and throw an error if the time cannot be parsed correctly.\n5. The system should check if the requested movie exists before attempting to book tickets.\n6. The system should ensure that seat numbers provided for booking are within the valid range of the movie's seating arrangement.\n7. The system should mark booked seats as unavailable for future bookings.\n8. The system should return appropriate messages indicating the success or failure of ticket booking operations.\n9. The system should handle concurrent bookings efficiently to avoid race conditions.\n10. The system should maintain data integrity and consistency across all operations.",
  "MovieTicketDB": "Title: Movie Ticket Database Management\n\n1. The system shall provide functionality to manage movie tickets in a SQLite database.\n2. The system shall allow creation of a database table named 'tickets' with columns for ID, movie name, theater name, seat number, and customer name.\n3. The system shall enable insertion of new movie tickets into the 'tickets' table with details such as movie name, theater name, seat number, and customer name.\n4. The system shall support searching for movie tickets by customer name and return all matching records.\n5. The system shall provide functionality to delete a specific movie ticket from the 'tickets' table using its unique ID.\n6. The system shall ensure that all database connections are properly closed when no longer needed.\n7. The system shall handle exceptions and errors during database operations by throwing runtime errors with descriptive messages.\n8. The system shall use parameterized queries to prevent SQL injection attacks.\n9. The system shall maintain data integrity by ensuring that each ticket has a unique ID.\n10. The system shall be compatible with the Windows environment and utilize the winsqlite3 library for database operations.",
  "MusicPlayer": "Title: Music Player\n\n1. The system should allow users to add songs to the playlist.\n2. The system should allow users to remove songs from the playlist.\n3. The system should play the first song in the playlist if no song is currently playing.\n4. The system should continue playing the current song if it is already playing.\n5. The system should stop playing the current song and clear the current song reference.\n6. The system should switch to the next song in the playlist if a song is currently playing.\n7. The system should switch to the previous song in the playlist if a song is currently playing.\n8. The system should allow users to set the volume of the player, with valid volume levels ranging from 0 to 100.\n9. The system should shuffle the playlist randomly.\n10. The system should maintain a list of songs in the playlist.\n11. The system should keep track of the current song being played.\n12. The system should initialize the volume to 50 when the player is created.\n13. The system should ensure that the volume setting is within the valid range before applying it.\n14. The system should handle cases where the playlist is empty during operations like play, switch song, and previous song.",
  "NLPDataProcessor": "Title: NLP Data Processor\n\n1. The system shall provide a method to construct a predefined list of stop words.\n2. The system shall provide a method to remove stop words from a list of strings.\n3. The system shall split each string in the input list into individual words.\n4. The system shall compare each word against a predefined list of stop words and exclude any matching words.\n5. The system shall return a list of lists, where each inner list contains the words from the corresponding input string with stop words removed.\n6. The system shall provide a main processing method that constructs the stop word list and applies it to remove stop words from the input list of strings.",
  "NLPDataProcessor2": "Title: NLP Data Processor\n\n1. The system should convert all characters in the input strings to lowercase.\n2. The system should remove all non-alphabetic characters except spaces from the input strings.\n3. The system should split each processed string into individual words based on whitespace.\n4. The system should count the frequency of each word across all input strings.\n5. The system should maintain the order of first appearance for words with the same frequency.\n6. The system should return the top 5 most frequent words along with their frequencies.\n7. The system should handle multiple input strings and process them accordingly.\n8. The system should be able to handle empty strings gracefully without causing errors.\n9. The system should ensure that the output map contains no more than 5 entries.\n10. The system should be efficient in processing large volumes of text data.",
  "NumberConverter": "Title: Number Converter\n\n1. Convert a decimal number to its binary representation as a string.\n2. Convert a binary number (given as a string) to its decimal representation as an integer.\n3. Convert a decimal number to its octal representation as a string.\n4. Convert an octal number (given as a string) to its decimal representation as an integer.\n5. Convert a decimal number to its hexadecimal representation as a string.\n6. Convert a hexadecimal number (given as a string) to its decimal representation as an integer.",
  "NumberWordFormatter": "Title: NumberWordFormatter\n\n1. The system should convert an integer into its English word representation.\n2. The system should convert a double into its English word representation, including cents.\n3. The system should convert a string representation of a number into its English word representation.\n4. The system should handle null input by returning an empty string.\n5. The system should correctly format numbers in the thousands, millions, and billions.\n6. The system should append \"ONLY\" at the end of the formatted number.\n7. The system should include \"AND CENTS\" followed by the cents in words if the number has a decimal part.\n8. The system should handle numbers less than ten, teens, tens, and hundreds appropriately.\n9. The system should trim any trailing spaces from the final formatted string.\n10. The system should represent zero as \"ZERO ONLY\".",
  "NumericEntityUnescaper": "Title: NumericEntityUnescaper\n\n1. The system shall provide a method to replace numeric character references in a string with their corresponding characters.\n2. The system shall handle both decimal and hexadecimal numeric character references.\n3. The system shall ignore invalid or malformed numeric character references and return the original string up to the point of failure.\n4. The system shall process the input string from left to right, replacing valid numeric character references as they are encountered.\n5. The system shall not modify any part of the input string that does not represent a valid numeric character reference.\n6. The system shall return an empty string if the input string is empty.\n7. The system shall correctly interpret the 'x' or 'X' prefix as indicating a hexadecimal number.\n8. The system shall ensure that only valid hexadecimal digits ('0'-'9', 'a'-'f', 'A'-'F') are considered when parsing hexadecimal numbers.\n9. The system shall handle exceptions that may occur during the conversion of numeric character references to characters, returning the processed string up to the point of the exception.\n10. The system shall maintain the integrity of the input string, ensuring no unintended modifications occur outside of replacing valid numeric character references.",
  "Order": "Title: Restaurant Order Management System\n1. The system should allow adding dishes to an order from a predefined menu.\n2. Each dish in the menu has a name, price, and available count.\n3. When adding a dish to the order, the system should check if the requested quantity is available in the menu.\n4. If the requested quantity of a dish is not available, the addition should fail.\n5. If the requested quantity is available, the system should reduce the count of that dish in the menu by the requested amount.\n6. The system should maintain a list of selected dishes for the current order.\n7. The system should calculate the total cost of the selected dishes, applying any applicable sales discounts.\n8. Sales discounts are stored as a map where the key is the dish name and the value is the discount factor (e.g., 0.9 for a 10% discount).\n9. The system should provide a function to checkout the current order, which calculates the total cost, clears the list of selected dishes, and returns the total amount.\n10. If no dishes are selected when checking out, the system should return a total of zero.",
  "PageUtil": "Title: PageUtil Class\n\n1. The system shall accept a vector of integers and a page size upon initialization.\n2. The system shall provide a method to retrieve a specific page of data based on the page number.\n3. The system shall provide a method to retrieve detailed information about a specific page, including current page number, items per page, total pages, total items, whether there is a previous page, whether there is a next page, and the data for that page.\n4. The system shall provide a method to search for items containing a specific keyword within the data, returning the total number of results, total pages of results, and the results themselves.\n5. The system shall handle invalid page numbers by returning an empty result.\n6. The system shall correctly calculate the total number of pages based on the total number of items and the page size.\n7. The system shall ensure that the last page contains only the remaining items if the total number of items is not a perfect multiple of the page size.\n8. The system shall convert each integer in the data to a string to perform keyword searches.\n9. The system shall maintain the integrity of the original data and not modify it during operations.\n10. The system shall efficiently handle large datasets without significant performance degradation.",
  "PersonRequest": "Title: PersonRequest Class\n\n1. The system must accept a person's name, sex, and phone number as input.\n2. The system must validate that the name is not empty and does not exceed 33 characters.\n3. The system must validate that the sex is one of the following values: \"Man\", \"Woman\", or \"UGM\".\n4. The system must validate that the phone number is not empty, consists of exactly 11 digits, and contains only numeric characters.\n5. The system must store the validated name, sex, and phone number in the respective attributes of the `PersonRequest` class.\n6. If any validation fails, the corresponding attribute should be set to an empty string.",
  "PushBoxGame": "Title: PushBoxGame\n\n1. The game should be initialized with a map provided as a vector of strings.\n2. The game should be able to initialize itself without an initial map, setting default values.\n3. The game should provide a method to retrieve the current state of the map.\n4. The game should indicate whether the game is over.\n5. The game should provide the column position of the player.\n6. The game should provide the row position of the player.\n7. The game should provide the positions of all target locations on the map.\n8. The game should provide the positions of all boxes on the map.\n9. The game should provide the count of target locations.\n10. The game should check if the player has won by placing all boxes on target locations.\n11. The game should allow the player to move in four directions ('w', 's', 'a', 'd').\n12. The game should update the player's position based on the move, ensuring the player does not move into walls ('#').\n13. If the player moves onto a box, the box should also move in the same direction, provided there is no wall or another box blocking its path.\n14. The game should update the game state after each move, checking if the win condition is met.",
  "RegexUtils": "Title: RegexUtils Class\n\n1. The system shall provide a method to check if a given text matches a specified regex pattern.\n2. The system shall provide a method to find all occurrences of a regex pattern within a given text.\n3. The system shall provide a method to split a given text based on a specified regex pattern.\n4. The system shall provide a method to replace all occurrences of a regex pattern in a given text with a specified replacement string.\n5. The system shall provide a method to generate a regex pattern for matching email addresses.\n6. The system shall provide a method to generate a regex pattern for matching phone numbers in the format \"XXX-XXX-XXXX\".\n7. The system shall provide a method to generate a regex pattern for splitting sentences based on punctuation marks followed by spaces and an uppercase letter.\n8. The system shall provide a method to split a given text into sentences using the generated sentence split pattern.\n9. The system shall provide a method to validate if a given phone number matches the standard phone number format.\n10. The system shall provide a method to extract all email addresses from a given text using the generated email pattern.",
  "RPGCharacter": "Title: RPG Character Management System\n1. The system should allow the creation of an RPG character with attributes including name, health points (HP), attack power, defense, level, and experience points (EXP).\n2. The system should provide functionality for an RPG character to attack another character, reducing the target's HP based on the attacker's attack power and the defender's defense.\n3. The system should enable an RPG character to heal, increasing their HP by 10 points, with a maximum HP cap of 100.\n4. The system should support the accumulation of experience points for an RPG character, which can lead to leveling up.\n5. The system should automatically level up an RPG character when they accumulate enough experience points, resetting their EXP to zero and increasing their level, HP, attack power, and defense.\n6. The system should prevent an RPG character from leveling beyond level 100.\n7. The system should provide a method to check if an RPG character is still alive (i.e., their HP is greater than zero).\n8. The system should expose methods to retrieve the current values of an RPG character's HP, EXP, attack power, defense, and level.\n9. The system should allow setting a new value for an RPG character's HP directly.",
  "Server": "Title: Server Class Functionality\n\n1. The server should maintain a whitelist of addresses.\n2. The server should provide functionality to add an address to the whitelist.\n3. The server should provide functionality to remove an address from the whitelist.\n4. The server should accept incoming data packets containing an address and content.\n5. The server should reject incoming data packets if they do not contain both an address and content.\n6. The server should reject incoming data packets if the address is not in the whitelist.\n7. The server should store the address and content of accepted incoming data packets.\n8. The server should allow sending data packets with an address and content.\n9. The server should validate that outgoing data packets contain both an address and content.\n10. The server should provide functionality to retrieve the last sent data packet.\n11. The server should provide functionality to retrieve the last received data packet.\n12. The server should handle invalid operations gracefully by returning appropriate error codes or messages.",
  "ShoppingCart": "Title: ShoppingCart Management System\n1. The system should allow users to add items to a shopping cart with a specified price and quantity.\n2. The system should allow users to remove items from the shopping cart with a specified quantity, and if the quantity becomes zero or less, the item should be completely removed from the cart.\n3. The system should provide a function to view all items currently in the shopping cart along with their prices and quantities.\n4. The system should calculate and provide the total price of all items in the shopping cart.\n5. The system should handle cases where an item is added multiple times by updating the quantity and price accordingly.\n6. The system should ensure that the shopping cart can handle a large number of items efficiently.\n7. The system should maintain data integrity, ensuring that no negative quantities or prices are stored.\n8. The system should be thread-safe if accessed concurrently by multiple users or processes.",
  "SignInSystem": "Title: User Sign-In System\n1. The system should allow adding new users by their username.\n2. The system should allow signing in users by their username.\n3. The system should provide functionality to check if a specific user is signed in.\n4. The system should provide functionality to check if all users are signed in.\n5. The system should provide a list of usernames for users who are not signed in.",
  "Snake": "Title: Snake Game Implementation\n1. The game initializes with a snake of length 1 at the center of the screen.\n2. The snake can move in four directions (up, down, left, right) based on user input.\n3. When the snake moves, its head position updates according to the movement direction.\n4. If the snake's head collides with its body, the game resets.\n5. The game places food randomly on the screen, ensuring it does not overlap with the snake's body.\n6. When the snake eats the food, its length increases by one segment, and the player's score increases by 100 points.\n7. The game screen has defined width and height dimensions, and the snake wraps around the edges of the screen.\n8. The game provides functions to retrieve the current length of the snake, the positions of all segments, the player's score, the food position, and the screen dimensions.\n9. The game resets to initial conditions when the snake collides with itself or when explicitly called.\n10. The game ensures that the food position is recalculated until a valid position (not overlapping with the snake) is found.",
  "SplitSentence": "Title: Sentence Splitter and Word Counter\n1. The system shall split a given string into sentences based on punctuation marks such as periods and question marks, taking into account common abbreviations.\n2. The system shall count the number of words in a given sentence, ignoring punctuation and special characters.\n3. The system shall process a text input to determine the maximum number of words found in any single sentence within the text.\n4. The system shall handle and ignore trailing spaces at the end of each sentence after splitting.\n5. The system shall correctly identify and exclude common abbreviations from sentence boundaries during the splitting process.\n6. The system shall be able to handle large text inputs efficiently without significant performance degradation.\n7. The system shall provide accurate word counts for sentences containing mixed case letters and special characters.\n8. The system shall maintain compatibility with the Boost library for regular expression operations.\n9. The system shall ensure that no empty sentences are included in the output list of sentences.\n10. The system shall be robust against malformed or unexpected input strings, providing meaningful results or error messages where appropriate.",
  "SQLGenerator": "Title: SQLGenerator Class\n\n1. The class should generate SQL SELECT statements based on specified fields and conditions.\n2. The class should generate SQL INSERT statements based on provided data fields and their corresponding values.\n3. The class should generate SQL UPDATE statements based on provided data fields and their corresponding values, with an optional condition.\n4. The class should generate SQL DELETE statements with an optional condition.\n5. The class should generate a SQL SELECT statement to retrieve records of females under a specified age.\n6. The class should generate a SQL SELECT statement to retrieve records within a specified age range.\n7. The class should accept a table name during initialization and use it in all generated SQL queries.\n8. The class should handle empty fields and conditions gracefully, generating appropriate SQL queries without errors.\n9. The class should ensure that string values in the data maps are properly quoted in the generated SQL statements.\n10. The class should concatenate multiple fields and values correctly in the generated SQL statements, separated by commas.",
  "SQLQueryBuilder": "Title: SQL Query Builder\n\n1. The system shall provide a method to generate a SELECT SQL query with specified table, columns, and optional WHERE conditions.\n2. The system shall provide a method to generate an INSERT SQL query with specified table and data pairs.\n3. The system shall provide a method to generate a DELETE SQL query with specified table and optional WHERE conditions.\n4. The system shall provide a method to generate an UPDATE SQL query with specified table, data pairs, and optional WHERE conditions.\n5. The SELECT query shall support selecting all columns using \"*\" or specific column names.\n6. The WHERE conditions in SELECT, DELETE, and UPDATE queries shall be combined using the logical AND operator.\n7. The generated SQL queries shall use single quotes around string values in the WHERE clause and VALUES list of the INSERT statement.\n8. The system shall handle multiple columns and conditions gracefully, ensuring proper formatting of the SQL query string.\n9. The system shall not modify the input parameters during query generation.\n10. The system shall ensure that the generated SQL queries are syntactically correct according to standard SQL syntax.",
  "Statistics3": "Title: Statistics3 Class\n\nFunctional Requirements:\n1. Calculate the mean of a dataset.\n2. Calculate the median of a dataset.\n3. Determine the mode(s) of a dataset.\n4. Compute the Pearson correlation coefficient between two datasets.\n5. Generate a correlation matrix for multiple datasets.\n6. Calculate the standard deviation of a dataset.\n7. Compute the Z-scores for a dataset.\n\nNon-Functional Requirements:\n1. Handle empty datasets by returning NaN for mean, median, standard deviation, and Z-scores.\n2. Throw an exception if datasets provided for correlation calculation have different lengths.\n3. Return NaN for standard deviation and Z-scores if the dataset has fewer than two elements or if the standard deviation is zero.\n4. Ensure the correlation matrix is symmetric and has a diagonal of ones.\n5. Maintain numerical precision in calculations involving floating-point arithmetic.",
  "StockPortfolioTracker": "Title: Stock Portfolio Tracker\n\n1. The system should allow initialization of a stock portfolio tracker with a specified cash balance.\n2. The system should support adding stocks to the portfolio, updating the quantity if the stock already exists.\n3. The system should support removing stocks from the portfolio, reducing the quantity or removing the stock entirely if the quantity reaches zero.\n4. The system should support buying stocks, deducting the cost from the cash balance and adding the stock to the portfolio.\n5. The system should support selling stocks, adding the proceeds to the cash balance and removing the stock from the portfolio.\n6. The system should calculate the total value of the portfolio, including the cash balance and the value of all stocks.\n7. The system should provide a summary of the portfolio, listing each stock's name and its total value.\n8. The system should provide the value of a specific stock based on its price and quantity.\n9. The system should allow retrieval of the current portfolio as a list of stocks.\n10. The system should allow retrieval of the current cash balance.\n11. The system should allow setting a new portfolio, replacing the existing one.\n12. The system should ensure that operations involving stock quantities do not result in negative quantities.\n13. The system should ensure that buying stocks does not proceed if there is insufficient cash balance.\n14. The system should maintain data integrity by ensuring that stock names are unique within the portfolio.\n15. The system should provide consistent and accurate values for stock prices and portfolio totals.",
  "StudentDatabaseProcessor": "Title: Student Database Processor\n\n1. The system shall manage a database of students with attributes including ID, name, age, gender, and grade.\n2. The system shall create a table named \"students\" if it does not already exist in the specified SQLite database.\n3. The system shall allow insertion of new student records into the \"students\" table using a map containing student data.\n4. The system shall provide functionality to search for students by their name and return matching records as a vector of maps.\n5. The system shall enable deletion of student records from the \"students\" table based on the student's name.\n6. The system shall execute SQL queries securely using parameterized statements to prevent SQL injection.\n7. The system shall handle database connections efficiently by opening and closing connections as needed for each query execution.\n8. The system shall be compatible with SQLite databases and utilize the winsqlite3 library for database operations.\n9. The system shall ensure that all database operations are thread-safe and do not interfere with each other.\n10. The system shall provide error handling for database operations, such as connection failures or query execution errors.",
  "TextFileProcessor": "Title: Text File Processor\n\n1. The system shall provide a class named `TextFileProcessor` that handles operations on text files.\n2. The `TextFileProcessor` class shall have a constructor that accepts a filename as a parameter.\n3. The system shall include a method `read_file_as_json` that reads the content of the file and returns it as a JSON object.\n4. The system shall include a method `read_file` that reads the entire content of the file and returns it as a string.\n5. The system shall include a method `write_file` that writes a given string content to the file, overwriting any existing content.\n6. The system shall include a method `process_file` that reads the file, removes all non-alphabetic characters from the content, writes the processed content back to the file, and returns the processed content as a string.\n7. The system shall use the `nlohmann/json` library for handling JSON data.\n8. The system shall handle file operations using standard C++ file streams (`ifstream` and `ofstream`).\n9. The system shall utilize the `stringstream` class for reading file contents into a string.\n10. The system shall use the `isalpha` function to filter out non-alphabetic characters during the processing of the file content.",
  "Thermostat": "Title: Thermostat Control System\n1. The system should initialize with a current temperature, target temperature, and mode.\n2. The system should provide a method to retrieve the target temperature.\n3. The system should allow setting a new target temperature.\n4. The system should provide a method to retrieve the current mode.\n5. The system should allow setting the mode to either \"heat\" or \"cool\". Any other mode input should be rejected.\n6. The system should automatically set the mode based on the comparison between the current temperature and the target temperature.\n7. The system should check for conflicts between the current temperature and the mode. If there is a conflict, it should attempt to resolve it by adjusting the mode.\n8. The system should simulate the operation of adjusting the current temperature to match the target temperature, counting the time taken to reach the target temperature.\n9. The system should increment the current temperature when in \"heat\" mode until it matches the target temperature.\n10. The system should decrement the current temperature when in \"cool\" mode until it matches the target temperature.\n11. The system should return the time taken to adjust the current temperature to the target temperature during simulation.",
  "TicTacToe": "Title: TicTacToe Game\n\nFunctional Requirements:\n1. The game should initialize with a default board size of 3x3.\n2. Players should be able to make a move by specifying the row and column on the board.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and return the winning player's symbol ('X' or 'O') if there is one.\n5. The game should determine if the board is full and return true if no more moves can be made.\n6. The game should provide the current player's symbol at any point during the game.\n\nNon-Functional Requirements:\n1. The game should handle invalid moves (e.g., attempting to place a mark on an already occupied cell) gracefully.\n2. The game should efficiently check for a winner after each move.\n3. The game should maintain the state of the board and the current player accurately throughout the game.",
  "TimeUtils": "Title: TimeUtils Class\n\n1. The system shall provide a method to retrieve the current time in the format \"HH:MM:SS\".\n2. The system shall provide a method to retrieve the current date in the format \"YYYY-MM-DD\".\n3. The system shall provide a method to add a specified number of seconds to the current time and return the new time in the format \"HH:MM:SS\".\n4. The system shall provide a method to convert a date-time string in the format \"YYYY-MM-DD HH:MM:SS\" to a `std::tm` structure.\n5. The system shall provide a method to convert a `std::tm` structure to a date-time string in the format \"YYYY-MM-DD HH:MM:SS\".\n6. The system shall provide a method to calculate the difference in minutes between two date-time strings provided in the format \"YYYY-MM-DD HH:MM:SS\".\n7. The system shall provide a method to generate a date-time string from individual components (year, month, day, hour, minute, second) in the format \"YYYY-MM-DD HH:MM:SS\".",
  "TriCalculator": "Title: Trigonometric Calculator\n1. The system shall provide a method to calculate the cosine of an angle given in degrees.\n2. The system shall provide a method to calculate the sine of an angle given in degrees.\n3. The system shall provide a method to calculate the tangent of an angle given in degrees.\n4. The system shall use the Taylor series expansion to approximate the cosine function.\n5. The system shall use an iterative approach to calculate the sine function.\n6. The system shall handle angles by converting them from degrees to radians before computation.\n7. The system shall include a method to compute the factorial of a non-negative integer.\n8. The system shall round the results of trigonometric calculations to a specified precision.\n9. The system shall output the intermediate Taylor series result for cosine calculation.\n10. The system shall return NaN for tangent calculations when the cosine of the angle is too close to zero to avoid division by zero errors.",
  "TwentyFourPointGame": "Title: Twenty-Four Point Game\n\n1. The system should generate a set of four random integers between 1 and 9 inclusive when requested.\n2. The system should accept an arithmetic expression as input and determine if it evaluates to 24 using the generated numbers.\n3. If the input expression is \"pass\", the system should generate a new set of four random integers and return them.\n4. The system should validate that the input expression uses only the numbers provided by the system and standard arithmetic operators (+, -, *, /, ^).\n5. The system should correctly handle operator precedence in the evaluation of the arithmetic expression.\n6. The system should return a vector containing the number 1 if the expression evaluates to 24, otherwise, it should return an empty vector.\n7. The system should allow setting a custom set of four integers for evaluation purposes.\n8. The system should handle invalid expressions gracefully by returning an empty vector.\n9. The system should ensure that each number from the generated set is used exactly once in the expression.\n10. The system should provide a mechanism to retrieve the current set of four integers.",
  "URLHandler": "Title: URLHandler Class\n\n1. The system shall provide a class named `URLHandler` that takes a URL as input during initialization.\n2. The system shall allow retrieval of the scheme component from the URL.\n3. The system shall allow retrieval of the host component from the URL.\n4. The system shall allow retrieval of the path component from the URL.\n5. The system shall allow retrieval of the query parameters from the URL as a map of strings.\n6. The system shall allow retrieval of the fragment component from the URL.\n7. The system shall correctly parse URLs with or without schemes, hosts, paths, query parameters, and fragments.\n8. The system shall handle URLs where components like scheme, host, path, query parameters, and fragment are missing without throwing errors.\n9. The system shall ensure that query parameters are parsed correctly into key-value pairs, handling multiple parameters separated by '&'.\n10. The system shall handle URLs with special characters in the query parameters and fragment components appropriately.",
  "UrlPath": "Title: URL Path Parser\n\n1. The system should provide a class named `UrlPath` to handle URL paths.\n2. The `UrlPath` class should have a constructor that initializes an internal state indicating whether the path ends with a slash.\n3. The `UrlPath` class should have a method `add` to append a new segment to the path after fixing it.\n4. The `UrlPath` class should have a method `parse` to split a given path into segments based on slashes, decode each segment, and store them internally. It should also set a flag if the original path ends with a slash.\n5. The `UrlPath` class should have a static method `fix_path` to remove leading and trailing slashes from a given path.\n6. The `UrlPath` class should have a method `get_segments` to retrieve all the segments of the path.\n7. The `UrlPath` class should have a method `with_end_tag` to check if the original path ended with a slash.\n8. The system should handle UTF-8 encoded characters in the URL path segments.\n9. The system should ignore percent-encoded characters during the decoding process of URL path segments.",
  "UserLoginDB": "Title: UserLoginDB\n\n1. The system shall provide functionality to insert a new user into the database with a specified username and password.\n2. The system shall allow searching for a user by their username and return the username and password if found.\n3. The system shall enable deletion of a user from the database based on their username.\n4. The system shall validate user login credentials by checking if the provided username and password match an entry in the database.\n5. The system shall automatically create a 'users' table upon initialization if it does not already exist.\n6. The system shall handle database connection errors by throwing a runtime exception with an appropriate error message.\n7. The system shall ensure that SQLite statements are properly prepared and finalized to prevent memory leaks.\n8. The system shall close the database connection when the UserLoginDB object is destroyed.\n9. The system shall use SQLite as the underlying database management system.\n10. The system shall store usernames and passwords as text in the database.\n11. The system shall throw exceptions with descriptive error messages when operations fail.\n12. The system shall support concurrent operations on the database connection without causing data corruption or inconsistencies.",
  "VectorUtil": "Title: VectorUtil Class\n\n1. The system shall provide a method to calculate the similarity between two vectors using the dot product of their normalized forms.\n2. The system shall provide a method to calculate the cosine similarity between a single vector and a list of vectors.\n3. The system shall provide a method to calculate the similarity between the mean vectors of two lists of vectors.\n4. The system shall provide a method to compute the Inverse Document Frequency (IDF) weights for a given set of document frequencies and the total number of documents.\n5. The system shall handle vectors of fixed size specified at compile time.\n6. The system shall throw an exception if either of the input lists in the n_similarity method is empty.\n7. The system shall return a similarity value of 0.0 for vectors with zero norm in the cosine_similarities method.\n8. The system shall ensure numerical stability by avoiding division by zero during normalization.\n9. The system shall support pre-instantiation of templates for specific vector sizes (e.g., 2 and 8).\n10. The system shall maintain the order of keys when computing IDF weights from the input dictionary.",
  "VendingMachine": "Title: Vending Machine System\n\n1. The system should allow adding items with a specified name, price, and quantity.\n2. The system should accept coins and update the internal balance accordingly.\n3. The system should enable purchasing an item if it exists in the inventory, has sufficient quantity, and the user has inserted enough money. After a successful purchase, the balance should be reduced by the item's price, and the item's quantity should decrease by one.\n4. The system should support restocking an existing item by increasing its quantity.\n5. The system should provide a display of all items available in the vending machine, showing each item's name, price, and quantity.\n6. The system should allow retrieval of the current inventory state.\n7. The system should permit setting the inventory state manually.\n8. The system should allow setting the internal balance manually.",
  "Warehouse": "Title: Warehouse Management System\n\n1. The system should allow adding new products with a unique product ID, name, and initial quantity.\n2. The system should allow updating the quantity of an existing product by adding or subtracting a specified amount.\n3. The system should provide functionality to retrieve the current quantity of a product based on its product ID.\n4. The system should enable creating an order for a product if the requested quantity is available in the inventory, reducing the inventory quantity accordingly.\n5. The system should support changing the status of an order to a specified status.\n6. The system should allow tracking the status of an order using its order ID.\n7. The system should maintain and provide access to the current state of the inventory, including all products and their quantities.\n8. The system should maintain and provide access to the current state of all orders, including their statuses.\n9. The system should handle cases where a product does not exist in the inventory when attempting to update its quantity or create an order.\n10. The system should handle cases where an order does not exist when attempting to change its status or track it.",
  "WeatherSystem": "Title: Weather System\n\n1. The system should allow initialization with a city name.\n2. The system should provide a method to query weather information for the initialized city from a provided list of weather data.\n3. The system should support querying temperature in either Celsius or Fahrenheit units.\n4. The system should convert temperature units if the requested unit differs from the stored unit.\n5. The system should allow setting a new city name.\n6. The system should allow setting a new temperature value.\n7. The system should provide a method to retrieve the current city name.\n8. The system should handle cases where the city is not found in the provided weather data list by returning default values (0.0 temperature and empty weather description).\n9. The system should maintain internal state for temperature, weather description, city name, and a list of weather data.\n10. The system should perform accurate conversion between Celsius and Fahrenheit temperature units.",
  "Words2Numbers": "Title: Words2Numbers Translator\n1. The system should convert a string of English words representing numbers into their corresponding integer values.\n2. The system should handle numbers from zero to trillions.\n3. The system should recognize and process ordinal numbers such as \"first,\" \"second,\" \"third,\" etc.\n4. The system should correctly interpret hyphenated numbers like \"twenty-one\" by treating them as space-separated words.\n5. The system should validate the input string to ensure it only contains valid number words and ordinals.\n6. The system should maintain the original words in the output string followed by the translated integer value.\n7. The system should handle the word \"and\" appropriately without affecting the numerical translation.\n8. The system should be able to process and translate numbers with scales such as \"hundred,\" \"thousand,\" \"million,\" \"billion,\" and \"trillion.\"\n9. The system should correctly handle ordinal endings like \"ieth\" and \"th\" by converting them to their base form before processing.\n10. The system should be robust against invalid inputs and return an appropriate response or error message.",
  "XMLProcessor": "Title: XML Processor\n\n1. The system shall provide functionality to initialize an XML processor with a specified XML file name.\n2. The system shall be able to read an XML file from the disk and return the root element of the XML document.\n3. The system shall be capable of writing the current state of the XML document to a specified file on the disk.\n4. The system shall process XML data by converting the text content of all \"item\" elements to uppercase and then save the modified XML document to a specified file.\n5. The system shall provide a method to find all XML elements with a specified tag name within the document and return them as a list.\n6. The system shall handle errors gracefully, such as when an XML file cannot be loaded or when no root element is found in the document.\n7. The system shall ensure that the XML document is correctly formatted and saved after processing.\n8. The system shall maintain the integrity of the XML structure during processing, ensuring that only the text content of the specified elements is modified.\n9. The system shall support the use of TinyXML library for parsing and manipulating XML documents.\n10. The system shall output error messages to the standard error stream in case of failures during file operations or XML processing.",
  "ZipFileProcessor": "Title: Zip File Processor\n\n1. The system shall provide functionality to extract all files from a specified zip archive into a given output directory.\n2. The system shall provide functionality to extract a specific file from a specified zip archive into a given output directory.\n3. The system shall provide functionality to create a new zip archive containing specified files.\n4. The system shall provide functionality to read basic information about a zip file, including its path and mode.\n5. The system shall handle errors gracefully by returning false and printing an error message when operations fail.\n6. The system shall ensure that the output directory exists before attempting to extract files into it, creating it if necessary.\n7. The system shall support UTF-8 encoding for file names within the zip archive.\n8. The system shall use the Boost filesystem library for directory operations.\n9. The system shall use the libzip library for zip file operations.\n10. The system shall be able to handle large files efficiently during extraction and creation of zip archives."
}
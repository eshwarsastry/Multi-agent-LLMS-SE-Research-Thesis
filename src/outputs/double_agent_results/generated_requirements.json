{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n1. The system should filter incoming HTTP requests based on their URI and method.\n2. Requests whose URIs start with \"/api\" or \"/login\" should be automatically allowed.\n3. For requests not starting with \"/api\" or \"/login\", the system should validate a JSON Web Token (JWT) provided in the request.\n4. The JWT must contain the user's name as a prefix.\n5. The JWT must include a timestamp indicating when it was issued.\n6. The system should reject JWTs that are older than 72 hours from the current time.\n7. If the JWT is valid and the associated user has a level greater than 2, the system should log the user's name, address, and the current timestamp.\n8. The system should handle any exceptions that occur during the filtering process and return false if an error is encountered.",
  "AreaCalculator": "Title: Area Calculator\n1. The system should provide a class named `AreaCalculator` that takes a single parameter `radius` during initialization.\n2. The `AreaCalculator` class should throw a `ValueError` exception if the provided `radius` is negative.\n3. The `AreaCalculator` class should have a method `calculate_circle_area` that returns the area of a circle using the formula πr².\n4. The `AreaCalculator` class should have a method `calculate_sphere_area` that returns the surface area of a sphere using the formula 4πr².\n5. The `AreaCalculator` class should have a method `calculate_cylinder_area` that takes a parameter `height` and returns the surface area of a cylinder using the formula 2πr(r + h). This method should throw a `ValueError` exception if the provided `height` is negative.\n6. The `AreaCalculator` class should have a method `calculate_sector_area` that takes a parameter `angle` and returns the area of a sector using the formula 0.5r²θ.\n7. The `AreaCalculator` class should have a method `calculate_annulus_area` that takes two parameters `inner_radius` and `outer_radius` and returns the area of an annulus using the formula π(R² - r²). This method should throw a `ValueError` exception if `inner_radius` is greater than `outer_radius`.\n8. The system should use the `math.pi` constant for π in calculations.\n9. The system should include unit tests for each calculation method to ensure correctness, covering valid inputs and edge cases such as negative values and invalid radius relationships.",
  "ArgumentParser": "Title: Argument Parser\n1. The system should be able to parse command-line arguments provided as a single string.\n2. The system should support both long-form arguments (e.g., --key=value) and short-form arguments (e.g., -k value).\n3. The system should allow adding arguments with optional flags indicating whether they are required and their expected data type.\n4. The system should validate the presence of required arguments and return a list of missing arguments.\n5. The system should provide a method to retrieve the value of a specific argument by its key.\n6. The system should convert argument values to specified types (currently supporting int and bool).\n7. The system should handle default values for arguments that are not explicitly provided in the command string.\n8. The system should gracefully handle invalid type conversions without crashing, returning the original value if conversion fails.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should be able to initialize with a list of strings.\n2. The system should provide a static method to calculate the number of arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n3. The system should provide a static method to calculate the total number of arrangements (permutations) of n items taken from 1 to n at a time.\n4. The system should provide an instance method to generate all possible arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n5. The system should provide an instance method to generate all possible arrangements (permutations) of n items taken from 1 to n at a time.\n6. The system should include a static helper method to compute the factorial of a given integer.\n7. The system should use recursion to generate permutations internally.\n8. The system should handle edge cases such as empty input lists gracefully.\n9. The system should ensure that the output of permutations does not contain duplicate arrangements.\n10. The system should maintain the order of elements in the permutations as they appear in the input list.",
  "AssessmentSystem": "Title: Assessment System\n\n1. The system should allow adding a student with their grade and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the GPA of a specific student based on their course scores.\n4. The system should identify and return a list of all students who have failed at least one course (a failing score is below 60).\n5. The system should calculate and return the average score for a specific course across all students who have taken that course.\n6. The system should identify and return the name of the student with the highest GPA.\n7. The system should handle cases where a student does not exist or has no course scores by returning an appropriate value (None in Python).",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n1. The system should accept a string input representing guitar play text.\n2. The system should parse the input string into segments where each segment contains a chord and a tune value.\n3. Each segment should be split into two parts using a regular expression: the chord (consisting of alphabetic characters) and the tune value (consisting of numeric characters).\n4. The system should store each chord and its corresponding tune value as a PlayItem in a list.\n5. If the display flag is set to true, the system should output a formatted string for each PlayItem showing the chord and the tune value.\n6. The formatted output should follow the pattern: \"Normal Guitar Playing -- Chord: [chord], Play Tune: [tune value]\".\n7. The system should handle empty input strings by returning an empty list of PlayItems.\n8. The system should not modify the original input string during processing.",
  "AvgPartition": "Title: AvgPartition Class\n1. The class should be named `AvgPartition`.\n2. The constructor should accept a list of integers (`lst`) and an integer (`limit`).\n3. The class should have a method `set_num` that returns a tuple containing two integers: the size of each partition and the remainder when the length of the list is divided by the limit.\n4. The class should have a method `get` that accepts an integer index and returns a sublist of `lst` based on the partitioning logic defined by `limit`.\n5. The `get` method should correctly handle cases where the list cannot be evenly divided by the limit by distributing the remainder elements across the first few partitions.\n6. The `get` method should return an empty list if the index is out of bounds for the number of partitions.\n7. The class should not modify the original list `lst`.\n8. The class should handle edge cases such as an empty list or a limit of zero gracefully.",
  "BalancedBrackets": "Title: Balanced Brackets Checker\n1. The system should accept a string expression containing brackets.\n2. The system should be able to clear all non-bracket characters from the input expression.\n3. The system should verify if the brackets in the expression are balanced, meaning every opening bracket has a corresponding closing bracket in the correct order.\n4. The system should return true if the brackets are balanced and false otherwise.\n5. The system should use a list data structure to simulate a stack for checking the balance of brackets.\n6. The system should handle different types of brackets: parentheses '()', curly braces '{}', and square brackets '[]'.\n7. The system should provide a method to clear the expression of any non-bracket characters before checking for balanced brackets.",
  "BankAccount": "Title: BankAccount Class\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide a method to deposit a specified amount into the bank account, ensuring the amount is non-negative.\n3. The system should provide a method to withdraw a specified amount from the bank account, ensuring the amount is non-negative and does not exceed the current balance.\n4. The system should provide a method to view the current balance of the bank account.\n5. The system should provide a method to transfer a specified amount from one bank account to another, ensuring the amount is non-negative and does not exceed the sender's current balance.\n6. The system should raise an error if an invalid amount (negative) is provided for deposit or withdrawal operations.\n7. The system should raise an error if a withdrawal request exceeds the available balance in the account.",
  "BigNumCalculator": "Title: BigNumCalculator\n1. The system should provide functionality to add two large numbers represented as strings.\n2. The system should provide functionality to subtract two large numbers represented as strings, handling cases where the result is negative.\n3. The system should provide functionality to multiply two large numbers represented as strings.\n4. The addition function should handle numbers of different lengths by padding the shorter number with leading zeros.\n5. The subtraction function should handle numbers of different lengths by padding the shorter number with leading zeros and should correctly determine the sign of the result.\n6. The multiplication function should handle the multiplication of two large numbers and manage carrying over digits appropriately.\n7. The results of all operations should be returned as strings.\n8. The system should handle edge cases such as zero values and single-digit numbers.\n9. The system should not use built-in large integer types or libraries for arithmetic operations.\n10. The system should efficiently manage memory and avoid unnecessary computations.",
  "BinaryDataProcessor": "Title: Binary Data Processor\n1. The system should accept a binary string upon initialization.\n2. The system should remove any non-binary characters ('0' or '1') from the input string.\n3. The system should calculate the percentage of zeroes and ones in the cleaned binary string.\n4. The system should provide the bit length of the cleaned binary string.\n5. The system should convert the cleaned binary string into an ASCII string.\n6. The system should convert the cleaned binary string into a UTF-8 string, which is identical to the ASCII conversion in this context.\n7. The system should handle cases where the binary string length is not a multiple of 8 by padding the last byte with zeros to ensure it is 8 bits long.",
  "BitStatusUtil": "Title: BitStatusUtil\n1. The system should provide a method to add a status to a set of states using bitwise operations.\n2. The system should provide a method to check if a specific status is present in a set of states using bitwise operations.\n3. The system should provide a method to remove a status from a set of states using bitwise operations.\n4. The system should validate that all input arguments are non-negative integers.\n5. The system should validate that all input arguments are even integers.\n6. The system should raise an exception if any input argument does not meet the validation criteria.",
  "BlackjackGame": "Title: Blackjack Game Implementation\n1. The system should initialize a new deck of cards when a game starts.\n2. The deck should consist of 52 cards, each represented by a combination of rank and suit.\n3. The deck should be shuffled randomly at the start of the game.\n4. The system should calculate the value of a given hand of cards according to Blackjack rules.\n5. Aces should initially count as 11, but can adjust to 1 if the hand's total exceeds 21.\n6. Face cards (Jack, Queen, King) should each count as 10.\n7. The system should determine the winner based on the values of the player's and dealer's hands.\n8. If both the player and dealer exceed 21, the player wins if their hand value is less than or equal to the dealer's hand value.\n9. If only the player exceeds 21, the dealer wins.\n10. If only the dealer exceeds 21, the player wins.\n11. If neither the player nor the dealer exceeds 21, the player wins if their hand value is greater than the dealer's hand value; otherwise, the dealer wins.",
  "BookManagement": "Title: Book Management System\n1. The system should allow adding books with a specified title and quantity to the inventory. If the book already exists, the quantity should be updated by adding the new quantity.\n2. The system should allow removing a specified quantity of a book from the inventory. If the book does not exist or the specified quantity exceeds the available quantity, an error should be raised.\n3. The system should provide a way to view the entire inventory, listing all books and their respective quantities.\n4. The system should allow checking the quantity of a specific book in the inventory. If the book is not found, it should return zero.",
  "BookManagementDB": "Title: Book Management Database\n\n1. The system should be able to initialize a database connection using a specified database name.\n2. The system should create a table named 'books' with columns 'id', 'title', 'author', and 'available' if it does not already exist.\n3. The system should allow adding a new book to the 'books' table with the provided title and author, setting the book's availability to true (represented by 1).\n4. The system should allow removing a book from the 'books' table based on its unique identifier (id).\n5. The system should allow marking a book as borrowed by setting the 'available' column to false (represented by 0) for a specific book identified by its id.\n6. The system should allow marking a book as returned by setting the 'available' column to true (represented by 1) for a specific book identified by its id.\n7. The system should provide functionality to search and retrieve all books from the 'books' table, returning a list of tuples containing each book's id, title, author, and availability status.\n8. The system should ensure that all database operations are committed after execution.\n9. The system should handle and raise runtime errors if any database operation fails.\n10. The system should properly close the database connection when the object is destroyed.",
  "BoyerMooreSearch": "Title: BoyerMooreSearch Implementation in Python\n1. The system should implement the Boyer-Moore string search algorithm in Python.\n2. The system should accept two strings as input: `text` and `pattern`.\n3. The system should provide a method `match_in_pattern` to find the last occurrence of a character in the pattern.\n4. The system should provide a method `mismatch_in_text` to find the first mismatch between the pattern and the text starting from a given position.\n5. The system should implement the bad character heuristic to find all starting positions in the text where the pattern matches.\n6. The system should return a list of starting indices in the text where the pattern matches.\n7. The system should handle cases where the pattern does not exist in the text by returning an empty list.\n8. The system should efficiently skip sections of the text based on the bad character heuristic to improve search performance.",
  "Calculator": "Title: Calculator Program\n1. The program should be able to evaluate mathematical expressions provided as strings.\n2. The program should support basic arithmetic operations: addition (+), subtraction (-), multiplication (*), division (/), and exponentiation (^).\n3. The program should handle operator precedence correctly, with exponentiation having the highest precedence, followed by multiplication and division, and then addition and subtraction.\n4. The program should correctly process parentheses to override the default precedence of operators.\n5. The program should handle decimal numbers in the input expression.\n6. If the input expression is empty, the program should return 0.0.\n7. The program should raise an error or handle invalid characters gracefully (not explicitly shown in the code but implied by the logic).\n8. The program should use stacks to manage operands and operators during the evaluation process.\n9. The program should be implemented in Python, using appropriate data structures like `deque` for stack operations.\n10. The program should be efficient in terms of time complexity, processing each character of the input expression once.\n11. The program should be robust against edge cases, such as multiple consecutive operators or missing operands.",
  "CalendarUtil": "Title: Calendar Utility\n1. The system should allow adding an event with a specific date, start time, end time, and description.\n2. The system should prevent adding duplicate events based on their date, start time, end time, and description.\n3. The system should allow removing an event based on its date, start time, end time, and description.\n4. The system should provide a list of events for a specific date.\n5. The system should check if a given time slot (start time and end time) is available for scheduling a new event.\n6. The system should provide available time slots in one-hour increments for a specific date.\n7. The system should provide a list of upcoming events, limited by a specified number of events.\n8. The system should handle timestamps and convert them into datetime objects.\n9. The system should ensure that events are stored and retrieved accurately based on their date and time attributes.\n10. The system should maintain the integrity of the event data, ensuring no duplicate events are added.\n11. The system should efficiently manage and search through the list of events to provide quick responses to queries.",
  "CamelCaseMap": "Title: CamelCaseMap Implementation\n1. The system should provide a class named `CamelCaseMap` that stores key-value pairs.\n2. The keys should be converted from snake_case to camelCase format before being stored.\n3. The `CamelCaseMap` should maintain the order of insertion of keys.\n4. The class should have a method `set_item` to add or update a key-value pair in the map.\n5. The class should have a method `get_item` to retrieve the value associated with a given key.\n6. The class should have a method `del_item` to remove a key-value pair from the map.\n7. The class should have a method `len` to return the number of key-value pairs in the map.\n8. The class should support iteration over the keys in the order they were inserted.\n9. The conversion from snake_case to camelCase should handle underscores correctly by capitalizing the subsequent character and removing the underscore.\n10. The `get_item` method should raise an exception if the key does not exist in the map.",
  "ChandrasekharSieve": "Title: Chandrasekhar Sieve Algorithm Implementation\n1. The system should provide a class named `ChandrasekharSieve` that takes an integer `n` as input during initialization.\n2. The class should have a method `get_primes` that returns a list of prime numbers up to `n`.\n3. The class should internally use a method `generate_primes` to compute the list of prime numbers using the Sieve of Eratosthenes algorithm.\n4. If the input `n` is less than 2, the method `generate_primes` should return an empty list.\n5. The implementation should efficiently mark non-prime numbers in a boolean list (sieve) and collect the indices representing prime numbers.\n6. The system should ensure that the prime numbers are collected starting from 2 up to `n`.\n7. The implementation should be in Python, maintaining the same functionality and logic as the original C++ code.",
  "Chat": "Title: Chat Application\n1. The system should allow adding a new user to the chat application.\n2. The system should allow removing an existing user from the chat application.\n3. The system should allow sending a message from one user to another within the chat application.\n4. The system should provide a way to retrieve all messages for a specific user.\n5. The system should provide a way to retrieve all users in the chat application.\n6. The system should automatically generate a timestamp for each message sent, formatted as \"YYYY-MM-DD HH:MM:SS\".\n7. The system should ensure that a user cannot be added more than once.\n8. The system should ensure that a message can only be sent if both the sender and receiver exist in the chat application.\n9. The system should handle cases where a user does not exist when retrieving messages.\n10. The system should maintain a list of messages for each user, including both sent and received messages.",
  "ClassRegistrationSystem": "Title: Class Registration System\n1. The system should allow the creation of a student with a name and a major.\n2. The system should provide methods to get and set the name and major of a student.\n3. The system should ensure that two students are considered equal if they have the same name and major.\n4. The system should allow registration of a new student, ensuring no duplicate names are registered.\n5. The system should allow a student to register for a class, preventing duplicate registrations for the same class by the same student.\n6. The system should provide a list of students by a specific major.\n7. The system should provide a list of all unique majors present in the system.\n8. The system should determine the most popular class within a specific major based on the number of students enrolled.",
  "Classroom": "Title: Classroom Management System\n1. The system should manage courses with attributes including name, start time, and end time.\n2. The system should allow adding a course to a classroom if the course does not already exist in that classroom.\n3. The system should allow removing a course from a classroom if the course exists in that classroom.\n4. The system should check if a classroom is free at a specific time by comparing the given time with the scheduled courses' times.\n5. The system should check for conflicts when adding a new course by ensuring there are no overlapping times with existing courses in the classroom.\n6. The system should verify if a specific course is already scheduled in a classroom.\n7. The system should convert time strings in \"HH:MM\" format to time objects for comparison purposes.\n8. The system should handle invalid time formats by raising an appropriate error.\n9. The system should determine if there is a time conflict between two time intervals based on their start and end times.",
  "CombinationCalculator": "Title: Combination Calculator\n1. The system should be able to initialize with a list of strings.\n2. The system should provide a static method to calculate the number of combinations of n items taken m at a time using factorials.\n3. The system should provide a static method to calculate the total number of possible combinations from a set of n items, handling special cases for n < 0 and n > 63.\n4. The system should provide a method to generate all combinations of m items from the initialized list of strings.\n5. The system should provide a method to generate all possible combinations of any size from the initialized list of strings.\n6. The system should handle cases where the number of items requested for combination exceeds the size of the initialized list by returning an empty list.\n7. The system should handle cases where the number of items requested for combination is negative by returning an empty list.\n8. The system should handle cases where the total number of items is greater than 63 by returning infinity for the total number of combinations.\n9. The system should handle cases where the total number of items is less than 0 by returning NaN for the total number of combinations.\n10. The system should use recursion to generate combinations internally.\n11. The system should ensure that the intermediate results are correctly copied to avoid unintended side effects during recursion.",
  "ComplexCalculator": "Title: Complex Calculator\n1. The system should provide functionality to add two complex numbers.\n2. The system should provide functionality to subtract two complex numbers.\n3. The system should provide functionality to multiply two complex numbers.\n4. The system should provide functionality to divide two complex numbers.\n5. All operations should be performed using static methods.\n6. The system should handle complex numbers represented by their real and imaginary parts.\n7. The system should return the result of each operation as a complex number.",
  "CookiesUtil": "Title: CookiesUtil Class Functional Requirements\n1. The system should initialize with a specified cookies file path.\n2. The system should be able to extract cookies from a dictionary response and store them internally.\n3. The system should be able to load cookies from a JSON file into an internal data structure.\n4. The system should save the internally stored cookies to a JSON file, formatted with an indentation of 4 spaces.\n5. The system should handle exceptions during file operations (reading and writing) and log errors appropriately.\n6. The system should be able to format the internally stored cookies as a string suitable for inclusion in HTTP requests.\n\nRequirements Title: CookiesUtil Class Non-Functional Requirements\n1. The system should efficiently handle large cookie files without significant performance degradation.\n2. The system should maintain data integrity during file operations, ensuring that cookies are not corrupted.\n3. The system should provide clear and informative error messages when exceptions occur.\n4. The system should be compatible with JSON formatted files for storing cookies.\n5. The system should be thread-safe if accessed by multiple threads simultaneously.",
  "CSVProcessor": "Title: CSV Processor\n1. The system should be able to read a CSV file and return its header and data rows.\n2. The system should be able to write data to a CSV file.\n3. The system should process a specified column in the CSV data by converting all its entries to uppercase.\n4. The processed data should be saved in a new CSV file with a modified filename that includes \"_process\" before the file extension.\n5. The system should handle cases where the specified column index is out of bounds by returning an error code.\n6. The system should handle file not found errors gracefully when reading a CSV file.\n7. The system should handle I/O errors gracefully when writing to a CSV file.",
  "CurrencyConverter": "Title: Currency Converter\n1. The system should provide a method to convert an amount from one currency to another.\n2. The system should maintain a list of supported currencies and their exchange rates relative to a base currency.\n3. The system should allow retrieval of the list of supported currencies.\n4. The system should allow adding a new currency with its exchange rate if it does not already exist.\n5. The system should allow updating the exchange rate of an existing currency.\n6. The system should handle cases where the conversion involves the same currency by returning the original amount.\n7. The system should handle cases where the specified currency for conversion is not supported by returning `False`.\n8. The system should maintain the order of currencies as they are added or updated.",
  "DatabaseProcessor": "Title: DatabaseProcessor Class\n\n1. The class should be named `DatabaseProcessor`.\n2. The constructor should accept a single parameter `database_name` which is a string representing the name of the SQLite database file.\n3. The class should have a method `open_database` that opens the SQLite database and returns a connection object. If the database cannot be opened, it should raise a `RuntimeError`.\n4. The class should have a method `create_table` that takes three parameters: `table_name`, `key1`, and `key2`. It should create a table with the specified name and columns in the database. If the table creation fails, it should raise a `RuntimeError`.\n5. The class should have a method `insert_into_database` that takes two parameters: `table_name` and `data`. `data` is a list of dictionaries where each dictionary represents a row to be inserted into the specified table. The method should insert the data into the table and handle any errors by raising a `RuntimeError`.\n6. The class should have a method `search_database` that takes two parameters: `table_name` and `name`. It should search for rows in the specified table where the `name` column matches the provided `name` and return the results as a list of lists of strings.\n7. The class should have a method `delete_from_database` that takes two parameters: `table_name` and `name`. It should delete rows from the specified table where the `name` column matches the provided `name` and handle any errors by raising a `RuntimeError`.",
  "DataStatistics": "Title: DataStatistics Class Implementation in Python\n1. The system should provide a class named `DataStatistics` that calculates statistical measures.\n2. The `DataStatistics` class should have a method `mean` that computes the mean of a list of floating-point numbers, rounded to two decimal places.\n3. The `mean` method should raise a `ValueError` if the input list is empty.\n4. The `DataStatistics` class should have a method `median` that computes the median of a list of floating-point numbers, rounded to two decimal places.\n5. The `median` method should sort the input list before calculating the median.\n6. The `median` method should raise a `ValueError` if the input list is empty.\n7. The `DataStatistics` class should have a method `mode` that computes the mode(s) of a list of integers.\n8. The `mode` method should return a list of integers representing the mode(s).\n9. The `mode` method should raise a `ValueError` if the input list is empty.",
  "DataStatistics2": "Title: DataStatistics2 Class\n1. The class should be initialized with a list of doubles.\n2. The class should provide a method to calculate and return the sum of the data.\n3. The class should provide a method to calculate and return the minimum value in the data.\n4. The class should provide a method to calculate and return the maximum value in the data.\n5. The class should provide a method to calculate and return the variance of the data, rounded to two decimal places.\n6. The class should provide a method to calculate and return the standard deviation of the data, rounded to two decimal places.\n7. The class should provide a method to calculate and return the correlation of the data. If the data contains fewer than two elements, it should return 1.0.",
  "DataStatistics4": "Title: DataStatistics4\n1. The system shall provide a method to calculate the correlation coefficient between two datasets.\n2. The system shall provide a method to calculate the skewness of a dataset.\n3. The system shall provide a method to calculate the kurtosis of a dataset.\n4. The system shall provide a method to compute the probability density function (PDF) values for a given dataset with specified mean (mu) and standard deviation (sigma).\n5. The system shall handle cases where the standard deviation is zero by returning 0 for skewness and NaN for kurtosis.\n6. The system shall use the mathematical constant pi (π) with a precision of up to 15 decimal places in calculations.\n7. The system shall ensure that the PDF calculation uses the formula for the normal distribution.\n8. The system shall be implemented in Python and maintain the same functionality as the provided C++ code.",
  "DecryptionUtils": "Title: DecryptionUtils Class\n\n1. The class should be named `DecryptionUtils`.\n2. The class should have an initializer that takes a string `key` and stores it as an instance variable.\n3. The class should have a method `caesar_decipher` that takes a string `ciphertext` and an integer `shift`, and returns the deciphered text using the Caesar cipher technique.\n4. The class should have a method `vigenere_decipher` that takes a string `ciphertext` and returns the deciphered text using the Vigenère cipher technique, utilizing the stored `key`.\n5. The class should have a method `rail_fence_decipher` that takes a string `encrypted_text` and an integer `rails`, and returns the deciphered text using the Rail Fence cipher technique.\n6. The Caesar cipher method should handle both uppercase and lowercase letters, shifting them appropriately while leaving non-alphabetic characters unchanged.\n7. The Vigenère cipher method should handle both uppercase and lowercase letters, shifting them according to the stored `key` while leaving non-alphabetic characters unchanged.\n8. The Rail Fence cipher method should correctly reconstruct the original text from the rail fence pattern, handling cases where the number of rails is less than or equal to one by returning the input text unchanged.\n9. The methods should maintain the case of the original letters in the output, converting them back to their original case after decryption.\n10. The methods should efficiently handle strings of varying lengths and compositions, including those with special characters and spaces.",
  "DiscountStrategy": "Title: Discount Strategy Implementation\n1. The system should accept customer information and a shopping cart as input.\n2. The system should calculate the total price of items in the shopping cart.\n3. The system should apply a discount based on the type of promotion selected (Fidelity, Bulk Item, Large Order).\n4. The system should calculate the final amount due after applying the appropriate discount.\n5. The system should support different types of promotions: Fidelity Promotion, Bulk Item Promotion, Large Order Promotion, and No Promotion.\n6. For Fidelity Promotion, a 5% discount should be applied if the customer's fidelity points are 1000 or more.\n7. For Bulk Item Promotion, a 10% discount should be applied to each item with a quantity of 20 or more.\n8. For Large Order Promotion, a 7% discount should be applied if there are 10 or more items in the shopping cart.\n9. The system should handle cases where no promotion is applicable.\n10. The system should be implemented in Python.\n11. The system should use an enumeration-like structure for promotion types within the `DiscountStrategy` class.\n12. The system should safely handle missing keys in the customer dictionary by providing a default value of 0.0 for fidelity points.",
  "EightPuzzle": "Title: EightPuzzle Solver\n1. The system should initialize an 8-puzzle game with a given initial state or an empty state.\n2. The system should be able to locate the position of the blank tile (represented by 0) in the puzzle grid.\n3. The system should allow moving the blank tile in four possible directions: up, down, left, and right, provided the move is within the grid boundaries.\n4. The system should determine all possible valid moves from any given state of the puzzle.\n5. The system should solve the 8-puzzle problem using a breadth-first search algorithm, returning the sequence of moves required to reach the goal state from the initial state.\n6. The system should handle cases where no solution exists by returning an empty list.\n7. The system should support assignment of a new initial state to an existing EightPuzzle object.\n8. The system should provide equality comparison between two EightPuzzle objects based on their initial states.\n9. The system should provide inequality comparison between two EightPuzzle objects based on their initial states.\n10. The system should generate a hash value for an EightPuzzle object based on its initial state to facilitate use in data structures like sets or as dictionary keys.",
  "EmailClient": "Title: Email Client System\n1. The system should allow creation of an email client with a specified email address and storage capacity.\n2. The system should enable sending an email from one email client to another, including details such as sender, receiver, content, size, timestamp, and initial state as unread.\n3. The system should prevent sending an email if the recipient's inbox exceeds its capacity, in which case it should attempt to clear space by removing the oldest emails until there is enough room or the inbox is empty.\n4. The system should provide functionality to fetch the next unread email from the inbox, marking it as read upon retrieval.\n5. The system should track the total size of emails stored in the inbox and ensure that adding a new email does not exceed the specified capacity.\n6. The system should have the capability to clear the inbox by removing the oldest emails to free up space when necessary.\n7. The system should generate a timestamp for each email indicating the exact time it was sent.\n8. The system should maintain the state of each email (unread/read) within the inbox.\n9. The system should handle edge cases such as attempting to fetch an email from an empty inbox or clearing an already empty inbox.",
  "EncryptionUtils": "Title: EncryptionUtils Class\n1. The class should accept a string `key` during initialization.\n2. The class should provide a method `caesar_cipher` that takes a string `plaintext` and an integer `shift`, and returns the Caesar cipher encrypted text.\n3. The class should provide a method `vigenere_cipher` that takes a string `plain_text` and uses the class's `key` to return the Vigenère cipher encrypted text.\n4. The class should provide a method `rail_fence_cipher` that takes a string `plain_text` and an integer `rails`, and returns the Rail Fence cipher encrypted text.\n5. The Caesar cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n6. The Vigenère cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n7. The Rail Fence cipher method should throw an exception if the number of rails is less than or equal to zero.\n8. The Rail Fence cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.",
  "ExcelProcessor": "Title: Excel Processor\n1. The system should be able to read an Excel file and extract data from the first worksheet named \"Sheet1\".\n2. The system should handle cells containing either string or integer values.\n3. The system should be able to write data into a new Excel file with the first worksheet named \"Sheet1\".\n4. The system should process the data by modifying the N-th column of each row based on specific rules:\n   - If the value in the N-th column is a string and does not start with a digit, convert all lowercase letters to uppercase and append the modified string to the end of the row.\n   - If the value in the N-th column is a string and starts with a digit, append only the first character of the string to the end of the row.\n   - If the value in the N-th column is an integer, append the integer to the end of the row.\n5. The system should save the processed data into a new Excel file with the same name as the original file but with \"_process\" appended before the file extension.\n6. The system should return a status code indicating success or failure of the operations and the name of the new file created.\n7. The system should handle exceptions gracefully and return an empty dataset or failure status code when an error occurs during file operations.",
  "ExpressionCalculator": "Title: Expression Calculator\n1. The system should be able to evaluate mathematical expressions provided as strings.\n2. The system should support basic arithmetic operations: addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).\n3. The system should handle parentheses for grouping operations.\n4. The system should correctly interpret unary minus as a negative sign.\n5. The system should ignore spaces in the input expression.\n6. The system should convert infix expressions to postfix notation before evaluation.\n7. The system should maintain operator precedence during expression evaluation.\n8. The system should throw an error if an unexpected operator is encountered during evaluation.\n9. The system should handle floating-point numbers in the expressions.\n10. The system should ensure that the final result of the expression is returned as a floating-point number.",
  "FitnessTracker": "Title: FitnessTracker\n1. The system should accept height, weight, age, and sex as inputs to initialize a fitness tracker object.\n2. The system should calculate and provide the Body Mass Index (BMI) based on the user's height and weight.\n3. The system should determine the user's condition relative to the standard BMI range for their sex, returning -1 if below, 1 if above, and 0 if within the range.\n4. The system should calculate the daily calorie intake based on the user's sex, age, height, weight, and BMI condition.\n5. The system should use the Mifflin-St Jeor equation to calculate Basal Metabolic Rate (BMR).\n6. The system should adjust the calculated BMR by activity level factors to determine the daily calorie intake: 1.2 for above BMI range, 1.6 for below BMI range, and 1.4 for within the BMI range.\n7. The system should store standard BMI ranges for males and females for comparison.",
  "GomokuGame": "Title: Gomoku Game Implementation\n1. The game should be initialized with a specified board size.\n2. Players should be able to make moves on the board by specifying a row and column.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move by verifying if there are five of the same symbols in a row, column, or diagonal.\n5. If a player achieves five in a row, the game should return that player's symbol as the winner.\n6. If no player has won and all moves have been made, the game should indicate a draw (not explicitly handled in the provided code).\n7. The game should provide a method to retrieve the current state of the board.\n8. The game should handle invalid moves (e.g., attempting to place a symbol on an already occupied cell) gracefully.\n9. The game should ensure that all operations respect the boundaries of the board, preventing out-of-bounds errors.\n10. The game should be implemented in Python, using appropriate data structures and type annotations for clarity and correctness.",
  "Hotel": "Title: Hotel Management System\n1. The system should allow the creation of a hotel object with a name and an initial count of available rooms categorized by room type.\n2. The system should provide functionality to book rooms by specifying the room type, number of rooms, and the name of the person booking.\n3. The system should confirm successful booking or indicate failure if the requested number of rooms is not available, returning the number of available rooms if partial booking is possible.\n4. The system should allow checking in guests by verifying their booking details and reducing the booked room count accordingly.\n5. The system should allow checking out guests by increasing the count of available rooms.\n6. The system should provide a method to retrieve the number of available rooms for a specific room type.\n7. The system should handle cases where a room type does not exist in the hotel's inventory.\n8. The system should ensure that the number of rooms checked in does not exceed the number of rooms booked.\n9. The system should update the booking records appropriately when guests check in or check out.\n10. The system should maintain separate records for available rooms and booked rooms for each room type.",
  "HRManagementSystem": "Title: HR Management System\n1. The system should allow adding an employee with unique employee ID, name, position, department, and salary.\n2. The system should prevent adding an employee if the employee ID already exists.\n3. The system should allow removing an employee by their unique employee ID.\n4. The system should allow updating an employee's details using their unique employee ID and a dictionary of fields to update.\n5. The system should ensure that only existing fields can be updated for an employee.\n6. The system should provide the ability to retrieve an employee's details by their unique employee ID.\n7. The system should return None if an employee with the specified ID does not exist.\n8. The system should provide a method to list all employees with their details, including their unique employee ID.\n9. The system should store employee details in a way that allows efficient addition, removal, and retrieval operations.",
  "Interpolation": "Title: Interpolation Module\n1. The system shall provide a method to perform 1D linear interpolation given two lists of data points (x, y) and a list of x values at which to interpolate (x_interp).\n2. The system shall provide a method to perform 2D bilinear interpolation given two lists of data points (x, y), a matrix of z values corresponding to the (x, y) pairs, and lists of x and y values at which to interpolate (x_interp, y_interp).\n3. The 1D interpolation method shall calculate the interpolated y values based on the provided x values and their corresponding y values, using linear interpolation between the nearest data points.\n4. The 2D interpolation method shall calculate the interpolated z values based on the provided x and y values and their corresponding z values, using bilinear interpolation between the nearest data points in the grid.\n5. The methods shall handle cases where the interpolation points fall outside the range of the provided data points by not including those points in the output.\n6. The methods shall return a list of interpolated values corresponding to the input interpolation points.\n7. The system shall be implemented in Python, maintaining the functionality of the original C++ code.",
  "IPAddress": "Title: IPAddress Class\n\n1. The class should accept an IP address as a string during initialization.\n2. The class should provide a method to check if the IP address is valid.\n3. A valid IP address must consist of exactly four octets separated by dots.\n4. Each octet must be a number between 0 and 255 inclusive.\n5. Each octet must not contain leading zeros unless it is \"0\".\n6. The class should provide a method to retrieve the octets of the IP address as a list of strings if the IP address is valid.\n7. If the IP address is invalid, the method to retrieve octets should return an empty list.\n8. The class should provide a method to convert the IP address to its binary representation as a string if the IP address is valid.\n9. The binary representation should have each octet represented by an 8-bit binary number, with leading zeros if necessary.\n10. The binary octets should be separated by dots in the output string.\n11. If the IP address is invalid, the method to retrieve the binary representation should return an empty string.",
  "IpUtil": "Title: IP Utility Functions\n1. The system should provide a method to validate whether a given string is a valid IPv4 address.\n2. The system should provide a method to validate whether a given string is a valid IPv6 address.\n3. The system should provide a method to retrieve the hostname associated with a given IP address.\n4. If the input IP address is \"0.0.0.0\", the system should return the local machine's hostname.\n5. The system should handle errors gracefully by returning an empty string if the IP address is invalid or if the hostname cannot be retrieved.",
  "JobMarketplace": "Title: Job Marketplace System\n1. The system should allow users to post jobs with details such as job title, company, and requirements.\n2. The system should allow users to remove jobs from the marketplace.\n3. The system should allow users to submit resumes with details such as name, skills, and experience.\n4. The system should allow users to withdraw their resumes from the marketplace.\n5. The system should provide a functionality to search for jobs based on a given criteria that can match either the job title or any of the job requirements.\n6. The system should provide a functionality to retrieve a list of resumes that match the requirements of a specific job.\n7. The system should ensure that two jobs are considered equal if they have the same job title, company, and requirements.\n8. The system should ensure that two resumes are considered equal if they have the same name, skills, and experience.\n9. The system should verify if a resume meets all the requirements of a job by checking if all the job requirements are present in the resume's skills.\n10. The system should maintain a list of job listings and a list of submitted resumes.",
  "JSONProcessor": "Title: JSON Processor\n1. The system should be able to read a JSON file from a specified file path.\n2. The system should handle errors when attempting to open a file for reading, returning an appropriate status code.\n3. The system should parse the JSON content from the file into a JSON object and handle any parsing errors, returning an appropriate status code.\n4. The system should be able to write a JSON object to a specified file path in a formatted manner with an indentation of 4 spaces.\n5. The system should handle errors when attempting to open a file for writing, returning an appropriate status code.\n6. The system should be able to process a JSON file by removing a specified key if it exists in the JSON object.\n7. The system should return a status code indicating success or failure after attempting to read, modify, and write the JSON file.",
  "KappaCalculator": "Title: Kappa Calculator\n1. The system should provide a method to calculate Cohen's Kappa coefficient given a matrix of test data and the number of categories.\n2. The system should provide a method to calculate Fleiss' Kappa coefficient given a matrix of test data, the number of subjects, the number of categories, and the number of ratings per subject.\n3. The input data for both methods should be a list of lists representing the test data matrix.\n4. The system should handle the conversion of the input data into a numerical format suitable for calculations.\n5. The system should compute the observed agreement (P0) by summing the diagonal elements of the data matrix for Cohen's Kappa.\n6. The system should compute the expected agreement (Pe) based on the marginal sums of the data matrix for Cohen's Kappa.\n7. The system should compute the observed agreement (P0) for Fleiss' Kappa by iterating over each subject's ratings and applying a specific formula.\n8. The system should compute the expected agreement (Pe) for Fleiss' Kappa based on the column sums of the data matrix normalized by the total sum of all ratings.\n9. The system should return the calculated Cohen's Kappa coefficient as a floating-point number.\n10. The system should return the calculated Fleiss' Kappa coefficient as a floating-point number.\n11. The system should handle potential division by zero errors gracefully when calculating the Kappa coefficients.\n12. The system should be implemented in Python using the NumPy library for numerical operations.",
  "LongestWord": "Title: Longest Word Finder\n1. The system should have a class named `LongestWord` that can manage a list of words.\n2. The `LongestWord` class should provide a method to add words to its internal list.\n3. The `LongestWord` class should provide a method to find the longest word in a given sentence that is also present in the internal list of words.\n4. The method to find the longest word should ignore punctuation and be case-insensitive.\n5. The `LongestWord` class should provide a method to retrieve the current list of words stored internally.",
  "MahjongConnect": "Title: MahjongConnect Game\n\n1. The game initializes with a board of specified dimensions filled with randomly selected icons from a given set.\n2. A valid move consists of selecting two positions on the board that contain the same icon and are connected by a path of adjacent cells with the same icon.\n3. The game checks if the selected positions are within the board boundaries.\n4. The game ensures that the two selected positions are not the same.\n5. The game verifies that the icons at the two selected positions are identical.\n6. The game determines if there exists a path between the two selected positions consisting of adjacent cells with the same icon.\n7. Upon a valid move, the icons at the two selected positions are removed from the board.\n8. The game checks if the game is over by verifying if all positions on the board are empty.\n9. The game provides functionality to determine if a move is valid.\n10. The game provides functionality to remove icons from the board after a valid move.\n11. The game provides functionality to check if the game is over.",
  "Manacher": "Title: Manacher Algorithm Implementation in Python\n1. The system should accept a string as input.\n2. The system should be able to calculate the length of the longest palindromic substring centered at a given position with a specified difference.\n3. The system should transform the input string by inserting a delimiter between each character to handle even-length palindromes.\n4. The system should find the longest palindromic substring in the transformed string.\n5. The system should extract and return the longest palindromic substring from the original input string based on the findings from the transformed string.\n6. The system should not modify the original input string during processing.\n7. The system should handle edge cases such as empty strings or strings with no palindromic substrings.\n8. The system should provide the longest palindromic substring efficiently, minimizing unnecessary computations.",
  "MetricsCalculator": "Title: MetricsCalculator\n1. The system should initialize four counters: true_positives, false_positives, false_negatives, and true_negatives to zero upon creation of an instance.\n2. The system should provide a method to update the counters based on the comparison between predicted labels and true labels.\n3. The system should calculate and return the precision score based on the updated counters.\n4. The system should calculate and return the recall score based on the updated counters.\n5. The system should calculate and return the F1 score based on the precision and recall scores.\n6. The system should calculate and return the accuracy score based on the updated counters.\n7. The system should handle cases where division by zero might occur during the calculation of precision, recall, F1 score, and accuracy by returning 0.0 in such scenarios.",
  "MetricsCalculator2": "Title: Metrics Calculator\n1. The system should provide a method to calculate the Mean Reciprocal Rank (MRR) from a dataset consisting of pairs of integer lists and integers.\n2. The system should provide a method to calculate the Mean Average Precision (MAP) from a dataset consisting of pairs of integer lists and integers.\n3. The MRR calculation should return a tuple containing the average MRR value and a list of individual MRR values for each input pair.\n4. The MAP calculation should return a tuple containing the average MAP value and a list of individual AP values for each input pair.\n5. If the input dataset is empty, both MRR and MAP methods should return an average value of 0.0 and a list containing a single element of 0.0.\n6. For each input pair, if the integer value is less than or equal to 0 or the integer list is empty, the corresponding MRR and AP values should be 0.0.\n7. The MRR for each input pair should be calculated as the reciprocal of the rank of the first occurrence of the integer 1 in the list, or 0.0 if 1 is not found.\n8. The AP for each input pair should be calculated as the sum of precision at each relevant item divided by the number of relevant items, where precision is the number of relevant items up to that point divided by the rank of the item.\n9. The system should handle cases where the integer list contains only zeros, resulting in an AP value of 0.0 for that input pair.\n10. The system should ensure that all calculations are performed accurately and efficiently, maintaining performance even with large datasets.",
  "MovieBookingSystem": "Title: Movie Booking System\n1. The system should allow adding movies with details such as name, price, start time, end time, and number of seats.\n2. The system should parse time strings in the format \"HH:MM\" and convert them into a time object.\n3. The system should check if a given time falls within a specified range.\n4. The system should allow booking tickets for specific seats in a movie, ensuring that the seats are available.\n5. The system should return a success message if the booking is successful, otherwise it should return a failure message.\n6. The system should provide a list of movies that are available within a specified time range.\n7. The system should handle errors gracefully, such as invalid time formats or attempts to book unavailable seats.",
  "MovieTicketDB": "Title: Movie Ticket Database Management System\n\n1. The system should be able to connect to a SQLite database using a provided database name.\n2. Upon initialization, the system should create a table named 'tickets' if it does not already exist, with columns for id (primary key), movie_name, theater_name, seat_number, and customer_name.\n3. The system should provide functionality to insert a new ticket record into the 'tickets' table with details such as movie name, theater name, seat number, and customer name.\n4. The system should allow searching for tickets by customer name and return all matching records.\n5. The system should support deleting a ticket record from the 'tickets' table based on a unique ticket ID.\n6. The system should ensure that all database connections are properly closed when the object is destroyed or explicitly requested.\n7. The system should handle exceptions and errors during database operations, such as failing to open the database, create a table, prepare statements, execute SQL commands, or bind parameters, by throwing appropriate runtime errors with descriptive messages.\n8. The system should commit changes to the database after inserting or deleting records to ensure data integrity.\n9. The system should fetch all rows from the database query results and convert them into a list of lists for easy handling and return them as search results.",
  "MusicPlayer": "Title: Music Player\n1. The system should allow adding songs to the playlist.\n2. The system should allow removing songs from the playlist.\n3. The system should be able to play the current song or the first song in the playlist if no song is currently playing.\n4. The system should be able to stop playing the current song.\n5. The system should be able to switch to the next song in the playlist.\n6. The system should be able to switch to the previous song in the playlist.\n7. The system should allow setting the volume of the player, with a valid range of 0 to 100.\n8. The system should be able to shuffle the playlist randomly.\n9. The system should initialize with a default volume of 50.\n10. The system should handle cases where the playlist is empty during operations like play, switch_song, and previous_song.\n11. The system should ensure that the current song is updated correctly when switching songs or stopping playback.\n12. The system should validate the volume input before setting it.",
  "NLPDataProcessor": "Title: NLP Data Processor\n1. The system should provide a method to construct a predefined list of stop words.\n2. The system should provide a method to remove stop words from a list of strings, returning a list of lists where each sublist contains the words from the corresponding input string with stop words removed.\n3. The system should provide a method to process a list of strings by first constructing a stop word list and then removing the stop words from each string in the list.\n4. The system should handle input strings by splitting them into individual words using whitespace as the delimiter before processing.\n5. The system should maintain the order of words as they appear in the original strings after stop words removal.\n6. The system should be able to handle an empty list of input strings and return an empty list of lists.\n7. The system should be able to handle input strings that do not contain any stop words and return them unchanged within a list.\n8. The system should be able to handle input strings that consist entirely of stop words and return empty sublists.\n9. The system should be case-sensitive in identifying and removing stop words.\n10. The system should be efficient in processing large lists of strings and stop words.",
  "NLPDataProcessor2": "Title: NLPDataProcessor2\n1. The system should process a list of strings by converting each string to lowercase and removing all non-alphabetic characters except spaces.\n2. The system should split each processed string into individual words based on whitespace and store these words in a nested list structure.\n3. The system should calculate the frequency of each word across all processed strings.\n4. The system should maintain the order of first appearance for words with the same frequency.\n5. The system should return the top 5 most frequent words along with their frequencies.\n6. The system should provide a method to process the data and return the top 5 word frequencies in one step.",
  "NumberConverter": "Title: Number Converter\n1. Convert a decimal number to its binary representation as a string.\n2. Convert a binary number (given as a string) to its decimal representation as an integer.\n3. Convert a decimal number to its octal representation as a string.\n4. Convert an octal number (given as a string) to its decimal representation as an integer.\n5. Convert a decimal number to its hexadecimal representation as a string.\n6. Convert a hexadecimal number (given as a string) to its decimal representation as an integer.",
  "NumberWordFormatter": "Title: NumberWordFormatter\n1. The system should convert an integer into its corresponding English words representation.\n2. The system should convert a floating-point number into its corresponding English words representation, including cents.\n3. The system should convert a string representation of a number into its corresponding English words representation.\n4. The system should handle null values by returning an empty string.\n5. The system should correctly format numbers with thousands, millions, and billions.\n6. The system should append \"AND CENTS\" followed by the decimal part in words if the number has a fractional part.\n7. The system should return \"ZERO ONLY\" if the input number is zero.\n8. The system should strip any trailing spaces from the final formatted string before returning it.\n9. The system should handle numbers up to billions accurately.\n10. The system should use predefined arrays for number words (units, teens, tens, and large number suffixes) to build the word representation.",
  "NumericEntityUnescaper": "Title: NumericEntityUnescaper\n1. The system should provide a method to replace numeric character references in a string with their corresponding characters.\n2. The system should handle both decimal and hexadecimal numeric character references.\n3. The system should ignore malformed or incomplete numeric character references.\n4. The system should not modify parts of the string that do not represent numeric character references.\n5. The system should be able to process an empty input string and return an empty output string.\n6. The system should correctly interpret the '#' symbol as the start of a numeric character reference when preceded by '&'.\n7. The system should correctly interpret 'x' or 'X' as indicators of a hexadecimal number following the '#' symbol.\n8. The system should correctly parse the numeric part of the character reference up to the ';' symbol.\n9. The system should convert the parsed numeric value to its corresponding ASCII character and append it to the output string.\n10. The system should handle exceptions during the conversion process and return the current state of the output string if an exception occurs.",
  "Order": "Title: Restaurant Order Management System\n1. The system should allow the creation of a Dish object with attributes for the name of the dish, its price, and the available count.\n2. The system should allow the creation of an Order object that can manage a menu, selected dishes, and sales discounts.\n3. The system should provide a method to add a dish to an order, ensuring that the requested quantity does not exceed the available count in the menu.\n4. The system should calculate the total cost of the selected dishes, applying any applicable sales discounts.\n5. The system should provide a checkout function that clears the selected dishes after calculating the total cost and returns the total amount due.\n6. The system should handle cases where no dishes are selected during checkout by returning a total of zero.\n7. The system should maintain the state of the menu, updating the count of dishes as they are added to an order.",
  "PageUtil": "Title: PageUtil Class in Python\n1. The system should provide a class named `PageUtil` that handles pagination and searching of integer data.\n2. The `PageUtil` class should accept a list of integers and a page size during initialization.\n3. The `PageUtil` class should have a method `get_page` that returns a specific page of data based on the provided page number.\n4. The `PageUtil` class should have a method `get_page_info` that returns detailed information about a specific page, including current page number, items per page, total pages, total items, and navigation flags (has previous/next).\n5. The `PageUtil` class should have a method `search` that searches for items containing a specified keyword and returns the results along with pagination details.\n6. The `get_page` method should return an empty list if the requested page number is out of bounds.\n7. The `get_page_info` method should return an empty dictionary if the requested page number is out of bounds.\n8. The `search` method should convert each integer in the data list to a string to perform keyword matching.\n9. The `search` method should calculate the total number of pages for the search results based on the page size.\n10. The `PageUtil` class should maintain attributes for the data list, page size, total items, and total pages.",
  "PersonRequest": "Title: PersonRequest Class\n1. The class should accept three parameters during initialization: name, sex, and phone_number.\n2. The name attribute should be validated to ensure it is not empty and does not exceed 33 characters in length.\n3. The sex attribute should be validated to ensure it is one of the specified values: \"Man\", \"Woman\", or \"UGM\".\n4. The phone_number attribute should be validated to ensure it is not empty, exactly 11 characters long, and consists only of digits.\n5. The validation methods should return an empty string if the input does not meet the criteria.\n6. The class should have private methods for validating the name, sex, and phone number.\n7. The class should have a static method to check if a string consists entirely of digits.",
  "PushBoxGame": "Title: PushBoxGame\n1. The game should be initialized with a map represented as a list of strings, or an empty map if no map is provided.\n2. The game should provide a method to retrieve the current map.\n3. The game should provide a method to check if the game is over.\n4. The game should provide a method to retrieve the player's column position.\n5. The game should provide a method to retrieve the player's row position.\n6. The game should provide a method to retrieve the list of target positions.\n7. The game should provide a method to retrieve the list of box positions.\n8. The game should provide a method to retrieve the count of targets.\n9. The game should initialize the player's position, targets, and boxes based on the map provided.\n10. The game should check if all boxes are on target positions to determine if the game is won.\n11. The game should allow the player to move in four directions ('w', 's', 'a', 'd').\n12. The game should update the player's and box positions based on valid moves.\n13. The game should prevent movement into walls ('#') and invalid box movements.",
  "RegexUtils": "Title: RegexUtils Class\n\n1. The system should provide a method to check if a given text matches a specified regex pattern.\n2. The system should provide a method to find all occurrences of a regex pattern within a given text.\n3. The system should provide a method to split a given text based on a specified regex pattern.\n4. The system should provide a method to replace all occurrences of a regex pattern in a given text with a specified replacement string.\n5. The system should provide a method to generate a regex pattern for matching email addresses.\n6. The system should provide a method to generate a regex pattern for matching phone numbers in the format \"XXX-XXX-XXXX\".\n7. The system should provide a method to generate a regex pattern for splitting sentences based on punctuation marks followed by spaces and an uppercase letter.\n8. The system should provide a method to split a given text into sentences using the sentence-splitting regex pattern.\n9. The system should provide a method to validate if a given phone number matches the phone number regex pattern.\n10. The system should provide a method to extract all email addresses from a given text using the email regex pattern.",
  "RPGCharacter": "Title: RPG Character Management System\n1. The system should allow creation of an RPG character with attributes including name, health points (HP), attack power, defense, level, and experience points (EXP).\n2. The system should provide functionality for one character to attack another, reducing the target's HP based on the attacker's attack power and the target's defense.\n3. The system should include a healing function that increases a character's HP by 10 points, with a cap at 100 HP.\n4. The system should allow characters to gain experience points, which can lead to leveling up.\n5. When a character gains enough experience points to level up, their level should increase, their experience points should reset, and their HP, attack power, and defense should be increased.\n6. The system should prevent characters from leveling beyond level 100.\n7. The system should provide a method to check if a character is still alive (i.e., has more than 0 HP).\n8. The system should allow retrieval of a character's current HP, EXP, attack power, defense, and level.\n9. The system should allow setting a character's HP directly.",
  "Server": "Title: Server Class Functionality\n1. The server should maintain a whitelist of addresses.\n2. The server should provide a method to add an address to the whitelist, returning the updated whitelist if successful, or an empty list if the address already exists.\n3. The server should provide a method to remove an address from the whitelist, returning the updated whitelist if successful, or an empty list if the address does not exist.\n4. The server should accept a map (dictionary) containing 'addr' and 'content' keys for receiving data. If either key is missing, it should return -1.\n5. The server should check if the received address is in the whitelist before processing the data. If not, it should return 0.\n6. If the address is in the whitelist, the server should store the received data in a map (dictionary) and return 1.\n7. The server should accept a map (dictionary) containing 'addr' and 'content' keys for sending data. If either key is missing, it should return a message indicating the structure is incorrect.\n8. The server should store the send data in a map (dictionary) and return an empty string upon successful storage.\n9. The server should provide a method to display the stored send or receive data based on the type specified ('send' or 'receive'). If an invalid type is provided, it should return an empty dictionary.",
  "ShoppingCart": "Title: ShoppingCart Implementation\n1. The system should allow users to create an instance of a shopping cart.\n2. The system should provide a method to add an item to the shopping cart with its price and optional quantity (default quantity is 1).\n3. The system should provide a method to remove an item from the shopping cart with an optional quantity (default quantity is 1). If the quantity becomes zero or less, the item should be removed entirely from the cart.\n4. The system should provide a method to view all items in the shopping cart along with their prices and quantities.\n5. The system should provide a method to calculate and return the total price of all items in the shopping cart.",
  "SignInSystem": "Title: SignInSystem\n1. The system should allow adding a new user with a unique username.\n2. The system should allow signing in an existing user by their username.\n3. The system should be able to check if a specific user is signed in.\n4. The system should be able to determine if all users are signed in.\n5. The system should provide a list of all users who are not signed in.",
  "Snake": "Title: Snake Game Implementation\n1. The game should initialize with a snake of length 1 at the center of the screen.\n2. The game should have a method to move the snake in a specified direction.\n3. The snake should grow in length and increase the score by 100 when it eats food.\n4. The game should randomly place food on the screen, ensuring it does not overlap with the snake's body.\n5. If the snake collides with its own body, the game should reset to its initial state.\n6. The game should provide methods to retrieve the current length of the snake, the positions of the snake's segments, the current score, the position of the food, and the dimensions of the screen and block size.\n7. The snake's movement should wrap around the screen edges, allowing it to reappear on the opposite side when it moves off-screen.\n8. The game should use a random number generator to ensure different food positions on each run.",
  "SplitSentence": "Title: Sentence Splitter and Word Counter\n1. The system should split a given string into sentences based on punctuation marks (periods and question marks), ensuring that abbreviations and acronyms are not mistakenly treated as sentence boundaries.\n2. The system should count the number of words in a given sentence, considering only alphabetic characters and ignoring punctuation.\n3. The system should process a text string to find the maximum number of words in any single sentence within the string.\n4. The system should handle and ignore leading and trailing whitespace in each sentence.\n5. The system should be able to handle and clean sentences by removing non-alphabetic characters except spaces before counting words.",
  "SQLGenerator": "Title: SQLGenerator Class\n\n1. The system should provide a class named `SQLGenerator` that takes a table name as input during initialization.\n2. The `SQLGenerator` class should have a method `select` that generates a SELECT SQL query based on optional fields and a condition.\n3. The `SQLGenerator` class should have a method `insert` that generates an INSERT SQL query based on provided data in the form of key-value pairs.\n4. The `SQLGenerator` class should have a method `update` that generates an UPDATE SQL query based on provided data in the form of key-value pairs and a condition.\n5. The `SQLGenerator` class should have a method `delete_query` that generates a DELETE SQL query based on a condition.\n6. The `SQLGenerator` class should have a method `select_female_under_age` that generates a SELECT SQL query to retrieve records of females under a specified age.\n7. The `SQLGenerator` class should have a method `select_by_age_range` that generates a SELECT SQL query to retrieve records within a specified age range.\n8. All generated SQL queries should be properly formatted with appropriate SQL syntax and end with a semicolon.\n9. The `select` method should default to selecting all fields (`*`) if no specific fields are provided.\n10. The `insert` and `update` methods should handle string values by enclosing them in single quotes.\n11. The `select_female_under_age` and `select_by_age_range` methods should utilize the `select` method internally to generate their respective queries.",
  "SQLQueryBuilder": "Title: SQLQueryBuilder Class\n\n1. The class should provide static methods for constructing SQL queries.\n2. The `select` method should generate a SELECT SQL statement with optional columns and WHERE clause.\n3. The `insert` method should generate an INSERT SQL statement with specified table and data.\n4. The `delete_` method should generate a DELETE SQL statement with optional WHERE clause.\n5. The `update` method should generate an UPDATE SQL statement with specified table, data, and optional WHERE clause.\n6. The generated SQL statements should use single quotes around string values.\n7. The WHERE clause should combine multiple conditions using the AND operator.\n8. The SELECT method should handle the special case of selecting all columns using \"*\".\n9. The methods should concatenate parts of the SQL query using spaces to ensure proper syntax.\n10. The methods should accept parameters for table name, columns, data, and conditions as lists or dictionaries as appropriate.",
  "Statistics3": "Title: Statistics3 Class Methods\n\n1. Calculate the mean of a list of integers.\n2. Calculate the median of a list of integers.\n3. Determine the mode(s) of a list of integers.\n4. Compute the Pearson correlation coefficient between two lists of integers.\n5. Generate a correlation matrix from a matrix of integers.\n6. Calculate the standard deviation of a list of integers.\n7. Compute the Z-scores for a list of integers based on their mean and standard deviation.\n8. Return NaN for mean, median, standard deviation, and Z-scores when the input list is empty or invalid.\n9. Throw an exception if the input vectors for correlation calculation have different lengths.\n10. Handle cases where the standard deviation is zero by returning NaN for Z-scores.\n11. Ensure that the correlation matrix returns NaN for invalid or empty input data.",
  "StockPortfolioTracker": "Title: Stock Portfolio Tracker\n\n1. The system should allow the creation of a stock portfolio tracker with an initial cash balance.\n2. The system should support adding stocks to the portfolio. If a stock with the same name already exists, its quantity should be increased.\n3. The system should support removing stocks from the portfolio. If the quantity to remove matches the existing quantity, the stock should be completely removed from the portfolio.\n4. The system should support buying stocks, which decreases the cash balance by the total cost of the stocks purchased. If there is insufficient cash, the purchase should fail.\n5. The system should support selling stocks, which increases the cash balance by the total revenue from the stocks sold. If the stock does not exist or the quantity to sell exceeds the available quantity, the sale should fail.\n6. The system should calculate the total value of the portfolio, including the cash balance and the value of all stocks held.\n7. The system should provide a summary of the portfolio, listing each stock's name and its total value, along with the total portfolio value.\n8. The system should allow retrieval of the current cash balance.\n9. The system should allow setting a new portfolio, replacing the existing one.\n10. The system should ensure that stock objects can be compared for equality based on their name, price, and quantity.\n11. The system should ensure that stock summary objects can be compared for equality based on their name and value.",
  "StudentDatabaseProcessor": "Title: Student Database Processor\n1. The system should be able to initialize a database connection using a specified database name.\n2. The system should create a table named \"students\" with columns for id, name, age, gender, and grade if it does not already exist.\n3. The system should allow insertion of new student records into the \"students\" table with fields for name, age, gender, and grade.\n4. The system should provide functionality to search for students by their name and return all matching records.\n5. The system should allow deletion of student records from the \"students\" table based on the student's name.\n6. The system should execute SQL queries with parameters to prevent SQL injection.\n7. The system should handle the opening and closing of database connections appropriately.\n8. The system should retrieve query results and map them to a structured format for further processing.\n9. The system should be compatible with SQLite as the underlying database engine.\n10. The system should commit changes to the database after executing queries that modify data.\n11. The system should handle errors that may occur during database operations gracefully.",
  "TextFileProcessor": "Title: TextFileProcessor\n1. The system should be able to initialize with a filename.\n2. The system should provide a method to read the contents of a file and parse it as JSON.\n3. The system should provide a method to read the raw contents of a file as a string.\n4. The system should provide a method to write a given string content to a file.\n5. The system should provide a method to process the file by removing all non-alphabetic characters from its content and then writing the processed content back to the file.\n6. The system should handle file operations safely, ensuring files are properly opened and closed.\n7. The system should be able to handle files in a way that preserves the original file's content until the write operation is explicitly called.",
  "Thermostat": "Title: Thermostat System\n1. The system should initialize with a current temperature, target temperature, and mode.\n2. The system should provide a method to retrieve the target temperature.\n3. The system should provide a method to set a new target temperature.\n4. The system should provide a method to retrieve the current mode.\n5. The system should provide a method to set a new mode, which can only be \"heat\" or \"cool\". If an invalid mode is provided, the method should return false; otherwise, it should return true.\n6. The system should automatically set the mode based on the current and target temperatures: \"heat\" if the current temperature is below the target temperature, and \"cool\" if the current temperature is above the target temperature.\n7. The system should check for conflicts between the current temperature and the mode. If there is a conflict (e.g., the current temperature is higher than the target temperature but the mode is \"heat\"), it should attempt to resolve the conflict by setting the appropriate mode and return false. If no conflict exists, it should return true.\n8. The system should simulate the operation of adjusting the current temperature to match the target temperature, incrementing or decrementing the current temperature by 1 degree per unit time until the target is reached, and return the total time taken to reach the target temperature.",
  "TicTacToe": "Title: TicTacToe Game Implementation\n1. The game should be initialized with a default board size of 3x3 or a specified size N.\n2. Players should be able to make a move by specifying the row and column on the board.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move and return the winning player ('X' or 'O') if there is one.\n5. The game should check if the board is full and return a boolean indicating whether it is full or not.\n6. The game should provide a method to retrieve the current player's symbol ('X' or 'O').",
  "TimeUtils": "Title: TimeUtils Class\n1. The system should provide a method to get the current time in the format \"HH:MM:SS\".\n2. The system should provide a method to get the current date in the format \"YYYY-MM-DD\".\n3. The system should provide a method to add a specified number of seconds to the current time and return the new time in the format \"HH:MM:SS\".\n4. The system should provide a method to convert a date-time string in the format \"YYYY-MM-DD HH:MM:SS\" to a `datetime` object.\n5. The system should provide a method to convert a `datetime` object to a date-time string in the format \"YYYY-MM-DD HH:MM:SS\".\n6. The system should provide a method to calculate the difference in minutes between two date-time strings provided in the format \"YYYY-MM-DD HH:MM:SS\".\n7. The system should provide a method to generate a date-time string from individual components (year, month, day, hour, minute, second) in the format \"YYYY-MM-DD HH:MM:SS\".",
  "TriCalculator": "Title: TriCalculator\n1. The system should provide a method to calculate the cosine of an angle using a Taylor series approximation.\n2. The system should provide a method to calculate the sine of an angle using an iterative approach until the term is less than 1e-15.\n3. The system should provide a method to calculate the tangent of an angle by dividing the sine by the cosine, with a check to avoid division by zero when the cosine is too close to zero.\n4. The system should include a method to compute the factorial of a given integer.\n5. The system should include a method to round a floating-point number to a specified precision.\n6. The system should convert angles from degrees to radians before performing trigonometric calculations.\n7. The system should output the Taylor series result for cosine calculation.\n8. The system should handle invalid inputs gracefully, such as negative numbers for factorial and angles that would result in undefined tangent values.\n9. The system should use a constant value for π (pi) in its calculations.\n10. The system should be implemented in Python and maintain the same functionality as the original C++ code.",
  "TwentyFourPointGame": "Title: TwentyFourPointGame and Calculator\n\n### Functional Requirements:\n1. The system should generate a set of four random integers between 1 and 9.\n2. The system should accept an arithmetic expression as input and determine if it evaluates to 24 using the generated integers.\n3. If the input expression is \"pass\", the system should generate a new set of four random integers.\n4. The system should validate that the input expression uses only the generated integers and valid arithmetic operators (+, -, *, /, ^).\n5. The system should correctly evaluate the arithmetic expression according to standard mathematical precedence rules.\n6. The system should return a list containing the integer 1 if the expression evaluates to 24, otherwise, it should return an empty list.\n7. The system should allow setting a custom set of four integers for evaluation.\n\n### Non-Functional Requirements:\n1. The system should handle invalid expressions gracefully without crashing.\n2. The system should ensure that the random number generation is sufficiently random.\n3. The system should provide clear and concise error messages when an invalid expression is encountered.\n4. The system should be efficient in evaluating expressions, especially those with complex nested operations.\n5. The system should maintain consistency in the use of data structures for expression evaluation, such as stacks for operands and operators.\n6. The system should be robust against edge cases, such as division by zero or invalid characters in the expression.",
  "URLHandler": "Title: URLHandler Class\n1. The class should be able to initialize with a URL string.\n2. The class should provide a method to retrieve the scheme (protocol) part of the URL.\n3. The class should provide a method to retrieve the host (domain) part of the URL.\n4. The class should provide a method to retrieve the path part of the URL.\n5. The class should provide a method to retrieve the query parameters as a dictionary where each key is a parameter name and each value is the corresponding parameter value.\n6. The class should provide a method to retrieve the fragment (anchor) part of the URL.",
  "UrlPath": "Title: URL Path Parser\n1. The system should be able to initialize an empty URL path object.\n2. The system should allow adding individual segments to the URL path.\n3. The system should parse a full URL path string into its constituent segments, considering a specified character set.\n4. The system should remove leading and trailing slashes from each segment during parsing.\n5. The system should identify if the original URL path ends with a slash and store this information.\n6. The system should provide a method to retrieve all parsed segments of the URL path.\n7. The system should provide a method to check if the original URL path ended with a slash.\n8. The system should handle percent-encoded characters in the URL path by decoding them appropriately.\n9. The system should maintain the order of segments as they appear in the original URL path.",
  "UserLoginDB": "Title: UserLoginDB Class for User Management\n\n1. The system should provide functionality to insert a new user into the database with a username and password.\n2. The system should allow searching for a user by their username and return their username and password if found.\n3. The system should support deleting a user from the database using their username.\n4. The system should validate user login credentials by checking if the provided username and password match an entry in the database.\n5. The system should automatically create a table named 'users' with columns 'username' and 'password' if it does not already exist.\n6. The system should handle database connections and ensure that they are properly closed when no longer needed.\n7. The system should manage SQLite statements efficiently by preparing them before execution and finalizing them afterward.\n8. The system should raise exceptions or errors if any database operations fail, providing meaningful error messages.\n9. The system should be implemented in Python and utilize the sqlite3 library for database interactions.\n10. The system should ensure that all database changes are committed after executing insert, update, or delete operations.",
  "VectorUtil": "Title: VectorUtil Class Functionality\n\n1. The system shall provide a method to calculate the norm of a vector.\n2. The system shall provide a method to normalize a vector, ensuring that the norm of the resulting vector is 1.\n3. The system shall provide a method to calculate the similarity between two vectors using the cosine similarity formula.\n4. The system shall provide a method to calculate the cosine similarity between a vector and a list of vectors, returning a list of similarities.\n5. The system shall provide a method to calculate the similarity between the mean vectors of two lists of vectors.\n6. The system shall provide a method to compute the Inverse Document Frequency (IDF) weights for a given dictionary of term counts and the total number of documents.\n7. The system shall handle cases where the norm of a vector is zero by returning a similarity of zero.\n8. The system shall throw an exception if either of the input lists in the n_similarity method is empty.\n\nRequirements Title: Performance and Error Handling\n\n1. The system shall efficiently compute norms and normalizations of vectors to ensure fast similarity calculations.\n2. The system shall handle division by zero gracefully by returning a similarity of zero when the norm of a vector is zero.\n3. The system shall throw an appropriate exception with a descriptive message if the input lists for n_similarity are empty, ensuring robust error handling.\n4. The system shall maintain precision in floating-point arithmetic operations to ensure accurate similarity calculations.\n5. The system shall use tuples to represent fixed-size vectors, ensuring type safety and immutability.\n6. The system shall use lists to represent collections of vectors, allowing dynamic resizing and efficient iteration.",
  "VendingMachine": "Title: Vending Machine System\n1. The system should allow adding items with a specified name, price, and quantity.\n2. The system should accept coins and update the balance accordingly.\n3. The system should allow purchasing an item if it exists, has a positive quantity, and the balance is sufficient; it should then deduct the item's price from the balance and decrease the item's quantity by one.\n4. The system should support restocking an existing item by increasing its quantity.\n5. The system should display all items with their prices and quantities in a formatted string.\n6. The system should provide access to the current inventory.\n7. The system should allow setting a new inventory.\n8. The system should allow setting a new balance.",
  "Warehouse": "Title: Warehouse Management System\n1. The system should allow adding products with a unique product ID, name, and initial quantity.\n2. The system should allow updating the quantity of an existing product by adding or subtracting a specified amount.\n3. The system should provide functionality to retrieve the current quantity of a product based on its product ID.\n4. The system should enable creating an order for a product if the requested quantity is available in the inventory, reducing the inventory quantity accordingly.\n5. The system should allow changing the status of an order to a new status.\n6. The system should provide functionality to track the status of an order based on its order ID.\n7. The system should maintain and provide access to a list of all orders with their details.\n8. The system should maintain and provide access to the current inventory with product details.",
  "WeatherSystem": "Title: Weather System\n1. The system should be able to store and manage weather information for different cities.\n2. The system should provide functionality to query the weather information for a specific city, including temperature and weather conditions.\n3. The system should allow setting the city for which the weather information is being managed.\n4. The system should allow setting the temperature for the current city.\n5. The system should convert temperatures between Celsius and Fahrenheit as needed when querying weather information.\n6. The system should return the temperature in the requested unit (Celsius or Fahrenheit) when querying weather information.\n7. If the city is not found in the weather list, the system should return default values of 0.0 for temperature and an empty string for weather conditions.\n8. The system should maintain the state of the current city and its associated weather information.",
  "Words2Numbers": "Title: Words2Numbers Translator\n1. Convert textual numbers into their integer equivalents.\n2. Handle ordinal words such as \"first\", \"second\", \"third\", etc., converting them to their respective numeric values.\n3. Recognize and process number words including units (zero to nineteen), tens (twenty to ninety), and scales (hundred, thousand, million, billion, trillion).\n4. Accept hyphenated number words by replacing hyphens with spaces before processing.\n5. Validate input strings to ensure they contain only valid number words or ordinal words.\n6. Return the converted number appended to any remaining non-numeric words in the input string.\n7. Maintain case insensitivity for input words.\n8. Ensure the program can handle large numbers up to trillions accurately.\n9. Provide a method to check if the input string is valid without performing the conversion.",
  "XMLProcessor": "Title: XML Processor\n1. The system should be able to initialize with an XML file name.\n2. The system should provide a method to read an XML file and return the root element of the XML document.\n3. The system should handle errors when loading an XML file and print an error message if the file cannot be loaded.\n4. The system should provide a method to write the current state of the XML document to a specified file name.\n5. The system should provide a method to process XML data by converting the text of all 'item' elements to uppercase and then writing the modified XML back to a specified file.\n6. The system should handle cases where there is no root element in the XML document during processing and print an error message.\n7. The system should provide a method to find all elements with a specified tag name within the XML document.\n8. The system should return an empty list if no elements with the specified tag name are found.\n9. The system should maintain the state of the XML document between method calls.\n10. The system should use Python's `xml.etree.ElementTree` module for parsing and manipulating XML documents.",
  "ZipFileProcessor": "Title: Zip File Processor\n\n### Functional Requirements:\n1. The system should be able to initialize with a given path to a zip file.\n2. The system should provide functionality to extract all files from the zip archive to a specified output directory.\n3. The system should provide functionality to extract a specific file from the zip archive to a specified output directory.\n4. The system should provide functionality to create a new zip file containing specified files.\n5. The system should be able to read basic information about the zip file, such as its path and mode (read-only).\n\n### Non-Functional Requirements:\n1. The system should handle errors gracefully, providing meaningful error messages when operations fail.\n2. The system should ensure that the output directory exists before attempting to extract files, creating it if necessary.\n3. The system should support UTF-8 encoding for file names within the zip archive.\n4. The system should efficiently read and write files, using buffered I/O to minimize memory usage.\n5. The system should be robust against invalid input, such as empty output directories or non-existent files within the zip archive."
}
{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n1. The system should filter requests based on their URI and method.\n2. Requests starting with \"/api\" or \"/login\" should be allowed without further checks.\n3. For other requests, the system should validate a JWT token included in the request.\n4. The JWT token must contain the user's name at the beginning.\n5. The JWT token must include a timestamp that is not older than 72 hours from the current time.\n6. If the JWT token is valid and the user's level is greater than 2, the system should log the user's name, address, and the current timestamp.\n7. The system should handle exceptions during JWT validation and return false if any exception occurs.\n8. The system should support logging output to the console.",
  "AreaCalculator": "Title: Area Calculator\n1. The system should provide a class named `AreaCalculator` that initializes with a single parameter `radius`.\n2. The `AreaCalculator` class should throw an exception if the provided `radius` is negative.\n3. The `AreaCalculator` class should have a method `calculate_circle_area` that returns the area of a circle given the radius.\n4. The `AreaCalculator` class should have a method `calculate_sphere_area` that returns the surface area of a sphere given the radius.\n5. The `AreaCalculator` class should have a method `calculate_cylinder_area` that takes an additional parameter `height` and returns the surface area of a cylinder given the radius and height. This method should throw an exception if the provided `height` is negative.\n6. The `AreaCalculator` class should have a method `calculate_sector_area` that takes an additional parameter `angle` and returns the area of a sector given the radius and angle.\n7. The `AreaCalculator` class should have a method `calculate_annulus_area` that takes two additional parameters `inner_radius` and `outer_radius` and returns the area of an annulus given the inner and outer radii. This method should throw an exception if the `inner_radius` is greater than the `outer_radius`.\n8. The system should use the value of Ï€ as 3.14159265358979323846 for calculations.\n9. The system should include unit tests for each method in the `AreaCalculator` class using a testing framework similar to Google Test (gtest).",
  "ArgumentParser": "Title: Argument Parser\n1. The system should be able to parse command-line arguments provided as a single string.\n2. The system should support both long-form arguments (starting with \"--\") and short-form arguments (starting with \"-\").\n3. The system should allow adding arguments with optional flags indicating whether they are required and their expected data type.\n4. The system should validate the presence of required arguments and return a list of missing arguments.\n5. The system should convert argument values to their specified types using predefined conversion functions.\n6. The system should handle default values for arguments that are not explicitly provided in the command string.\n7. The system should provide a method to retrieve the value of a specific argument by its key.\n8. The system should support basic type conversions such as converting strings to integers and booleans.\n9. The system should gracefully handle errors during type conversion without crashing.\n10. The system should maintain a mapping of argument keys to their values, types, and required status.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should be able to initialize with a list of strings.\n2. The system should provide a method to calculate the number of arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n3. The system should provide a method to calculate the total number of arrangements (permutations) of n items taken from 1 to n at a time.\n4. The system should provide a method to generate all possible arrangements (permutations) of n items taken m at a time, where m defaults to n if not specified.\n5. The system should provide a method to generate all possible arrangements (permutations) of n items taken from 1 to n at a time.\n6. The system should include a helper method to compute the factorial of a given integer.\n7. The system should handle recursive generation of permutations internally.\n8. The system should maintain the input list of strings as a private member variable.\n9. The system should support default values for parameters where applicable.\n10. The system should ensure that the output of permutation generation is a list of lists containing the permutations.",
  "AssessmentSystem": "Title: Assessment System in Python\n1. The system should be able to add a student with attributes including their name, grade, and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the Grade Point Average (GPA) for a given student, where GPA is the average of all course scores.\n4. The system should identify and return a list of students who have failed any course (a failing score is less than 60).\n5. The system should compute and return the average score for a specific course across all students who have taken that course.\n6. The system should determine and return the name of the student with the highest GPA.\n7. The system should handle cases where data might not be available (e.g., no scores for a student or no students taking a particular course) by returning an appropriate indication (e.g., None or an empty list).",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n\n1. The system should accept a string input representing guitar play text.\n2. The system should parse the input string into segments where each segment contains a chord and a tune value.\n3. Each segment should be split into two parts: the chord (consisting of alphabetic characters) and the tune value (the remaining part of the segment).\n4. The system should store each chord and its corresponding tune value as a PlayItem in a list.\n5. If the display flag is set to true, the system should output a formatted string for each PlayItem showing the chord and the tune value.\n6. The formatted output should follow the pattern: \"Normal Guitar Playing -- Chord: [chord], Play Tune: [tune value]\".\n7. The system should handle empty input strings by returning an empty list of PlayItems.\n8. The system should not modify the original input string during processing.",
  "AvgPartition": "Title: AvgPartition Class Translation\n1. The system shall provide a class named `AvgPartition` that accepts a list of integers and a limit as input.\n2. The system shall have a method `set_num` that calculates and returns a pair of integers representing the size of each partition and the remainder when the list is divided by the limit.\n3. The system shall have a method `get` that takes an index as input and returns a sublist of integers from the original list based on the calculated partition size and remainder.\n4. The system shall ensure that the sublists are distributed as evenly as possible, with the first few sublists containing one more element if the list size is not perfectly divisible by the limit.\n5. The system shall be implemented in Python, maintaining the functionality of the original C++ code.",
  "BalancedBrackets": "Title: Balanced Brackets Checker\n1. The system should accept a string expression containing brackets.\n2. The system should provide a method to check if the brackets in the expression are balanced.\n3. The system should have a method to clear all non-bracket characters from the expression.\n4. The system should use a stack data structure to assist in checking the balance of brackets.\n5. The system should correctly identify matching pairs of brackets: '()' '{}', '[]'.\n6. The system should return true if the brackets in the expression are balanced, otherwise false.\n7. The system should handle empty expressions by returning true, as there are no unbalanced brackets.\n8. The system should be able to process expressions with mixed types of brackets.\n9. The system should maintain the integrity of the original expression after checking for balanced brackets.",
  "BankAccount": "Title: BankAccount Class\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide a method to deposit a specified amount into the bank account, ensuring that the amount is not negative.\n3. The system should provide a method to withdraw a specified amount from the bank account, ensuring that the amount is not negative and does not exceed the current balance.\n4. The system should provide a method to view the current balance of the bank account.\n5. The system should provide a method to transfer a specified amount from one bank account to another, ensuring that the amount is not negative and does not exceed the sender's balance.\n6. The system should throw an exception if an invalid amount (negative) is provided for deposit or withdrawal operations.\n7. The system should throw an exception if a withdrawal request exceeds the available balance in the account.",
  "BigNumCalculator": "Title: BigNumCalculator\n1. The system should provide functionality to add two large numbers represented as strings.\n2. The system should provide functionality to subtract two large numbers represented as strings.\n3. The system should provide functionality to multiply two large numbers represented as strings.\n4. The addition function should handle numbers of different lengths by padding the shorter number with leading zeros.\n5. The subtraction function should handle cases where the first number is smaller than the second number by swapping them and indicating the result as negative.\n6. The multiplication function should correctly handle the carry-over during the multiplication process.\n7. The results of all operations should be returned as strings.\n8. Leading zeros in the result should be removed unless the result is zero.\n9. The system should handle edge cases such as adding, subtracting, or multiplying zero.\n10. The system should ensure that the operations are performed accurately without overflow issues, even for very large numbers."
}
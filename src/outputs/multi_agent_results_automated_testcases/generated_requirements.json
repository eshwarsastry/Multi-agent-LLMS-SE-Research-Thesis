{
  "AccessGatewayFilter": "Title: Access Gateway Filter\n\n1. The system should filter incoming requests based on specific criteria.\n2. Requests starting with \"/api\" or \"/login\" should automatically pass the filter.\n3. For other requests, the system should validate a JWT token included in the request.\n4. The JWT token must contain the user's name at the beginning.\n5. The JWT token must include a timestamp indicating when it was issued.\n6. The system should reject JWT tokens that are older than 72 hours.\n7. If the JWT token is valid and the user's level is greater than 2, the system should log the user's name, address, and the current timestamp.\n8. The system should handle exceptions gracefully and return false if any error occurs during the filtering process.",
  "AreaCalculator": "Title: Area Calculator\n1. The system shall provide a class named `AreaCalculator` that calculates areas of various geometric shapes.\n2. The `AreaCalculator` class shall accept a single parameter, `radius`, during initialization and throw an exception if the radius is negative.\n3. The `AreaCalculator` class shall have a method `calculate_circle_area` that returns the area of a circle using the formula πr².\n4. The `AreaCalculator` class shall have a method `calculate_sphere_area` that returns the surface area of a sphere using the formula 4πr².\n5. The `AreaCalculator` class shall have a method `calculate_cylinder_area` that accepts a parameter `height` and returns the surface area of a cylinder using the formula 2πr(r + h), throwing an exception if the height is negative.\n6. The `AreaCalculator` class shall have a method `calculate_sector_area` that accepts a parameter `angle` and returns the area of a sector using the formula 0.5r²θ.\n7. The `AreaCalculator` class shall have a method `calculate_annulus_area` that accepts parameters `inner_radius` and `outer_radius` and returns the area of an annulus using the formula π(R² - r²), throwing an exception if the inner radius is greater than the outer radius.\n8. The system shall define the constant π as 3.14159265358979323846 if it is not already defined.\n9. The system shall use Google Test (gtest) for unit testing the functionality of the `AreaCalculator` class.",
  "ArgumentParser": "Title: Command Line Argument Parser\n1. The system should parse command line arguments provided as a single string.\n2. The parser should support both long-form (--key=value) and short-form (-k value) arguments.\n3. The parser should handle arguments without values by assigning a default value of \"1\".\n4. The system should allow adding arguments with optional flags indicating whether they are required.\n5. The parser should validate argument types and convert them accordingly (e.g., converting strings to integers or booleans).\n6. The system should provide a method to retrieve the value of a specific argument by its key.\n7. The parser should identify and report any missing required arguments.\n8. The system should support basic data types such as integer and boolean for argument conversion.\n9. The parser should maintain a list of all parsed arguments and their values.\n10. The system should be extensible to support additional data types and conversion functions.",
  "ArrangementCalculator": "Title: Arrangement Calculator\n1. The system should calculate the number of arrangements (permutations) of a given set of strings.\n2. The system should provide functionality to calculate the number of arrangements for selecting 'm' items from 'n' items, where 'm' can default to the total number of items if not specified.\n3. The system should provide functionality to calculate the total number of arrangements for all possible selections from 1 to 'n' items.\n4. The system should generate all possible arrangements (permutations) of a given set of strings.\n5. The system should generate all possible arrangements for selecting 'm' items from the set of strings, where 'm' can default to the total number of items if not specified.\n6. The system should generate all possible arrangements for all selections from 1 to the total number of items in the set.\n7. The system should compute the factorial of a given number, which is used in calculating the number of arrangements.\n8. The system should handle input data as a vector of strings.\n9. The system should maintain the integrity of the input data during arrangement calculations.\n10. The system should efficiently handle recursive operations for generating permutations without causing stack overflow or excessive memory usage.",
  "AssessmentSystem": "Title: Assessment System\n\n1. The system should allow adding a student with their grade and major.\n2. The system should allow adding a course score for a specific student.\n3. The system should calculate and return the GPA of a specific student based on their course scores.\n4. The system should identify and return a list of all students who have failed any course (defined as scoring below 60).\n5. The system should calculate and return the average score for a specific course across all students who have taken it.\n6. The system should identify and return the name of the student with the highest GPA.\n7. The system should handle cases where data is not available by returning an appropriate optional value (e.g., `std::nullopt`).\n\nNon-Functional Requirements:\n1. The system should efficiently handle operations on a large number of students and courses.\n2. The system should ensure data integrity and consistency when adding or updating student information.\n3. The system should provide clear and understandable error messages or indicators when data is missing or invalid.\n4. The system should maintain a clean and organized code structure for future maintenance and scalability.",
  "AutomaticGuitarSimulator": "Title: Automatic Guitar Simulator\n\n1. The system shall accept a string input representing guitar play instructions.\n2. The system shall parse the input string into segments, where each segment contains a chord and a corresponding tune value.\n3. The system shall store each parsed segment as a `PlayItem` object containing the chord and tune value.\n4. The system shall provide a method to interpret the input string and generate a list of `PlayItem` objects.\n5. If the `display` flag is set to true during interpretation, the system shall output a formatted string for each `PlayItem` showing the chord and tune value.\n6. The formatted output string shall follow the pattern: \"Normal Guitar Playing -- Chord: [chord], Play Tune: [tune]\".\n7. The system shall handle empty input strings by returning an empty list of `PlayItem` objects.\n8. The system shall correctly identify and separate chords (composed of alphabetic characters) from tune values in each segment of the input string.",
  "AvgPartition": "Title: AvgPartition Class\n\n1. The class should accept a list of integers and a limit as input during initialization.\n2. It should provide a method to determine the number of partitions and the remainder when dividing the list by the limit.\n3. It should provide a method to retrieve a specific partition of the list based on an index, adjusting for the remainder to ensure even distribution of elements.",
  "BalancedBrackets": "Title: Balanced Brackets Checker\n1. The system should accept a string expression containing various types of brackets.\n2. The system should determine whether the brackets in the expression are balanced.\n3. The system should ignore any characters in the expression that are not brackets.\n4. The system should support three types of brackets: parentheses '()', curly braces '{}', and square brackets '[]'.\n5. The system should return true if the brackets in the expression are balanced, otherwise false.\n6. The system should provide a method to clear non-bracket characters from the expression before checking for balance.\n7. The system should use a stack data structure to assist in checking the balance of brackets.\n8. The system should handle nested brackets correctly.\n9. The system should be efficient in terms of time complexity, ideally O(n), where n is the length of the input string.\n10. The system should be robust against invalid inputs, such as null or empty strings.",
  "BankAccount": "Title: BankAccount Management System\n1. The system should allow the creation of a bank account with an optional initial balance.\n2. The system should provide functionality to deposit a specified amount into the bank account, ensuring that the deposit amount is not negative.\n3. The system should provide functionality to withdraw a specified amount from the bank account, ensuring that the withdrawal amount is not negative and does not exceed the current balance.\n4. The system should provide functionality to view the current balance of the bank account.\n5. The system should provide functionality to transfer a specified amount from one bank account to another, ensuring that the transfer amount is not negative and does not exceed the sender's balance.\n6. The system should handle invalid operations by throwing exceptions with appropriate error messages.",
  "BigNumCalculator": "Title: BigNumCalculator\n\n1. The system shall provide functionality to add two large numbers represented as strings.\n2. The system shall provide functionality to subtract two large numbers represented as strings, handling cases where the result is negative.\n3. The system shall provide functionality to multiply two large numbers represented as strings.\n4. The system shall handle input strings of varying lengths by padding shorter strings with leading zeros.\n5. The system shall correctly manage carry-over during addition operations.\n6. The system shall correctly manage borrowing during subtraction operations.\n7. The system shall remove leading zeros from the result of subtraction operations, except when the result is zero.\n8. The system shall handle multiplication by correctly placing digits in their respective positions and managing carry-over.\n9. The system shall return \"0\" as the result if the multiplication of two numbers results in zero.\n10. The system shall ensure that the output of all operations is a string representing the correct numerical result.",
  "BinaryDataProcessor": "Title: Binary Data Processor\n1. The system should accept a binary string as input.\n2. The system should remove any non-binary characters ('0' or '1') from the input string.\n3. The system should calculate the percentage of zeroes and ones in the cleaned binary string.\n4. The system should calculate the total bit length of the cleaned binary string.\n5. The system should convert the cleaned binary string into an ASCII string by processing each 8-bit segment as a byte.\n6. The system should provide a method to convert the cleaned binary string into a UTF-8 string, which currently behaves the same as converting to ASCII.\n7. The system should handle exceptions or errors gracefully, such as when the binary string length is not a multiple of 8 during conversion to ASCII/UTF-8.",
  "BitStatusUtil": "Title: BitStatusUtil Class\n\n1. The system shall provide functionality to add a status to a set of states using bitwise operations.\n2. The system shall provide functionality to check if a specific status is present in a set of states using bitwise operations.\n3. The system shall provide functionality to remove a status from a set of states using bitwise operations.\n4. The system shall validate that all input arguments are non-negative integers.\n5. The system shall validate that all input arguments are even numbers.\n6. The system shall throw an exception if any input argument does not meet the validation criteria.\n7. The system shall ensure that the operations do not modify the original set of states unless explicitly required by the operation.\n8. The system shall handle multiple input arguments for validation purposes.\n9. The system shall maintain the integrity of the state information throughout the operations.\n10. The system shall be designed to handle integer overflow gracefully during bitwise operations.",
  "BlackjackGame": "Title: Blackjack Game Implementation\n1. The system shall initialize a standard 52-card deck with cards represented as strings in the format \"RankSuit\".\n2. The system shall shuffle the deck randomly at the start of each game.\n3. The system shall calculate the value of a given hand of cards according to Blackjack rules, where face cards (J, Q, K) are worth 10 points, an Ace can be worth either 1 or 11 points, and number cards are worth their face value.\n4. The system shall determine the winner of a game between a player and a dealer based on the values of their hands, with the following rules:\n   a. If both the player and dealer exceed 21, the player wins if their hand value is less than or equal to the dealer's hand value.\n   b. If only the player exceeds 21, the dealer wins.\n   c. If only the dealer exceeds 21, the player wins.\n   d. If neither the player nor the dealer exceeds 21, the player wins if their hand value is greater than the dealer's hand value.",
  "BookManagement": "Title: Book Management System\n\n1. The system should allow adding books to the inventory with an optional quantity parameter, defaulting to 1 if not specified.\n2. The system should allow removing a specified quantity of a book from the inventory, and throw an error if the book does not exist or the quantity to remove exceeds the available stock.\n3. The system should provide a function to view the entire inventory, returning a mapping of book titles to their respective quantities.\n4. The system should provide a function to check the quantity of a specific book in the inventory, returning 0 if the book is not found.",
  "BookManagementDB": "Title: Book Management Database\n\n1. The system shall manage a database of books using SQLite.\n2. The system shall allow the creation of a table named 'books' with columns for book ID, title, author, and availability status.\n3. The system shall provide functionality to add a new book to the database with a specified title and author, setting its availability status to true.\n4. The system shall provide functionality to remove a book from the database based on its unique identifier.\n5. The system shall provide functionality to mark a book as borrowed by updating its availability status to false based on its unique identifier.\n6. The system shall provide functionality to mark a book as returned by updating its availability status to true based on its unique identifier.\n7. The system shall provide functionality to search and retrieve all books in the database, returning their details including ID, title, author, and availability status.\n8. The system shall handle database connection errors by throwing a runtime exception with an appropriate error message.\n9. The system shall ensure that all SQLite statements are properly prepared, executed, and finalized to prevent memory leaks and other issues.\n10. The system shall maintain a single SQLite database connection throughout its lifecycle, opening it upon initialization and closing it upon destruction.",
  "BoyerMooreSearch": "Title: BoyerMooreSearch Implementation\n1. The system shall provide a class named `BoyerMooreSearch` that initializes with a given text and pattern.\n2. The system shall include a method `match_in_pattern` that returns the index of a character in the pattern from the end to the beginning, or -1 if the character does not exist in the pattern.\n3. The system shall include a method `mismatch_in_text` that identifies the first mismatch between the pattern and the text starting from the end of the pattern, or -1 if there is no mismatch.\n4. The system shall implement the `bad_character_heuristic` method to find all starting positions in the text where the pattern matches using the Boyer-Moore algorithm's bad character rule.\n5. The system shall handle cases where the pattern does not exist in the text by returning an empty list of positions.\n6. The system shall efficiently skip sections of the text based on mismatches to reduce unnecessary comparisons.\n7. The system shall ensure that the pattern and text are stored as private members within the `BoyerMooreSearch` class.\n8. The system shall maintain the lengths of the text and pattern as private member variables for internal use.\n9. The system shall provide a constructor that initializes the text, pattern, and their respective lengths.\n10. The system shall be designed to handle edge cases such as an empty pattern or text gracefully.",
  "Calculator": "Title: Expression Calculator\n1. The system should evaluate mathematical expressions provided as strings.\n2. Supported operations include addition (+), subtraction (-), multiplication (*), division (/), and exponentiation (^).\n3. The system should handle operator precedence correctly, with exponentiation having the highest precedence, followed by multiplication and division, and then addition and subtraction.\n4. Parentheses should be used to group operations and alter the order of evaluation.\n5. The system should return a double value representing the result of the evaluated expression.\n6. The system should handle empty input strings by returning 0.0.\n7. The system should throw an exception or handle errors gracefully for invalid expressions (e.g., division by zero, malformed syntax).\n8. The system should support floating-point numbers in the expressions.\n9. The system should ignore spaces within the input expression string.\n10. The system should maintain internal state using stacks to manage operands and operators during evaluation.",
  "CalendarUtil": "Title: Calendar Utility\n\n1. The system should allow adding an event with a specific date, start time, end time, and description.\n2. The system should allow removing an event based on its exact match of date, start time, end time, and description.\n3. The system should provide a list of all events scheduled for a specific date.\n4. The system should check if a given time slot (defined by start and end times) is available for scheduling a new event.\n5. The system should generate a list of available time slots (each one hour long) for a specific date where no events are scheduled.\n6. The system should retrieve a specified number of upcoming events that have not yet started.\n7. Events should be stored in a way that allows efficient addition, removal, and querying based on date and time.\n8. The system should handle timestamps and convert them into `std::chrono::system_clock::time_point` for internal use.\n9. The system should ensure that all operations involving time comparisons are accurate and consistent across different systems and time zones.\n10. The system should maintain data integrity, ensuring that no duplicate events are added and that events can be accurately removed.",
  "CamelCaseMap": "Title: CamelCaseMap\n\n1. The system shall provide a mapping functionality that converts keys from snake_case to camelCase.\n2. The system shall allow setting a key-value pair in the map where the key is automatically converted to camelCase.\n3. The system shall allow retrieving the value associated with a given key, converting the key to camelCase before lookup.\n4. The system shall allow deleting a key-value pair from the map using the original key format, which will be converted to camelCase internally.\n5. The system shall maintain the order of insertion of keys.\n6. The system shall provide a method to get the number of items stored in the map.\n7. The system shall support iteration over the keys in the order they were inserted.\n8. The system shall handle duplicate keys by updating the existing value rather than adding a new entry.\n9. The system shall throw an exception or return an error when attempting to retrieve a non-existent key.\n10. The system shall ensure efficient storage and retrieval operations using hash-based data structures.",
  "ChandrasekharSieve": "Title: Chandrasekhar Sieve Algorithm\n\nFunctional Requirements:\n1. The system should accept an integer input `n` which represents the upper limit up to which prime numbers are to be found.\n2. The system should generate a list of all prime numbers less than or equal to `n`.\n3. The system should provide a method to retrieve the list of generated prime numbers.\n\nNon-Functional Requirements:\n1. The algorithm should efficiently handle large values of `n` without excessive memory usage.\n2. The algorithm should execute within a reasonable time frame even for large inputs.\n3. The system should not crash or produce incorrect results for invalid inputs such as negative numbers or zero.",
  "Chat": "Title: Chat System\n1. The system should allow adding a new user by their username.\n2. The system should allow removing an existing user by their username.\n3. The system should allow sending a message from one user to another, including the sender's name, receiver's name, message content, and a timestamp.\n4. The system should provide a list of messages for a specific user.\n5. The system should provide a list of all users along with their respective messages.\n6. The system should generate a timestamp in the format \"YYYY-MM-DD HH:MM:SS\" for each message sent.\n7. The system should ensure that a user cannot be added if they already exist.\n8. The system should ensure that a message cannot be sent if either the sender or receiver does not exist.",
  "ClassRegistrationSystem": "Title: Class Registration System\n\n1. The system should allow the registration of new students with their name and major.\n2. The system should prevent duplicate student registrations based on the student's name.\n3. The system should allow students to register for classes by providing their name and the class name.\n4. The system should prevent a student from registering for the same class more than once.\n5. The system should provide a list of students enrolled in a specific major.\n6. The system should provide a list of all unique majors present in the system.\n7. The system should determine and return the most popular class within a specific major based on the number of students registered for each class.\n8. The system should maintain the integrity of student data, including their names and majors, which can be retrieved or updated.\n9. The system should efficiently handle operations such as student registration, class registration, and data retrieval to ensure smooth user experience.\n10. The system should be scalable to accommodate a growing number of students and classes without significant performance degradation.",
  "Classroom": "Title: Classroom Management System\n\n1. The system should manage courses in a classroom.\n2. Each course should have a unique combination of name, start time, and end time.\n3. The system should allow adding a course to a classroom only if the course does not already exist in that classroom.\n4. The system should allow removing a course from a classroom if the course exists in that classroom.\n5. The system should check if a classroom is free at a specific time by comparing the given time with the scheduled courses' times.\n6. The system should check for conflicts when adding a new course by ensuring there are no overlapping times with existing courses.\n7. The system should verify if a specific course is already scheduled in the classroom.\n8. The system should convert time strings in the format \"HH:MM\" to `std::tm` structure for further processing.\n9. The system should convert `std::tm` structures to `std::time_t` for time comparison.\n10. The system should detect time conflicts between two time intervals represented by `std::tm` structures.\n11. The system should handle invalid time formats by throwing an exception.\n12. The system should handle errors during time conversion by throwing an exception.\n13. The system should output error messages to standard error stream in case of conversion failures.",
  "CombinationCalculator": "Title: Combination Calculator\n1. The system should accept a list of strings as input data.\n2. The system should provide a method to calculate the number of combinations of selecting `m` items from `n` items.\n3. The system should provide a method to calculate the total number of possible combinations of all subsets from the input data.\n4. The system should provide a method to generate all possible combinations of selecting `m` items from the input data.\n5. The system should provide a method to generate all possible combinations of all subsets from the input data.\n6. The system should handle cases where `m` is less than 0 or greater than the size of the input data by returning an empty result.\n7. The system should handle cases where the number of items exceeds 63 by returning infinity for the total number of combinations.\n8. The system should handle invalid input gracefully, such as negative numbers for combination calculations, by returning NaN or infinity as appropriate.\n9. The system should ensure that the generated combinations do not contain duplicate entries.\n10. The system should maintain the order of elements in the combinations as they appear in the input data.",
  "ComplexCalculator": "Title: Complex Number Calculator\n1. The system shall provide functionality to add two complex numbers.\n2. The system shall provide functionality to subtract two complex numbers.\n3. The system shall provide functionality to multiply two complex numbers.\n4. The system shall provide functionality to divide two complex numbers.\n5. The system shall handle complex numbers using the `std::complex<double>` data type from the C++ Standard Library.\n6. The system shall ensure that division by zero is handled gracefully when dividing two complex numbers.\n7. The system shall maintain precision in calculations involving complex numbers.\n8. The system shall be implemented as a class named `ComplexCalculator` with all methods being static.\n9. The system shall not modify the input complex numbers during operations.\n10. The system shall return a new complex number as the result of each arithmetic operation.",
  "CookiesUtil": "Title: Cookies Management Utility\n1. The system shall provide a utility class named `CookiesUtil` for managing cookies stored in a JSON file.\n2. The `CookiesUtil` class shall be initialized with a path to a cookies file.\n3. The system shall have a method `get_cookies` that extracts cookies from a JSON response and saves them to the cookies file.\n4. The system shall have a method `load_cookies` that reads cookies from the cookies file and returns them as a JSON object.\n5. The system shall have a private method `_save_cookies` that writes the current cookies to the cookies file in a formatted JSON structure.\n6. The system shall have a method `set_cookies` that sets the cookies in a JSON request by formatting them into a string.\n7. The system shall handle exceptions during file operations and print error messages to standard error.\n8. The cookies data shall be stored in an unordered map within the `CookiesUtil` class.\n9. The cookies file shall be formatted as a JSON file.\n10. The cookies in the JSON request shall be formatted as a single string with each cookie separated by a semicolon and space.",
  "CSVProcessor": "Title: CSV Processor\n\n1. The system should read a CSV file and return its header and data as separate entities.\n2. The system should write data to a CSV file, where each row of data is written on a new line and columns are separated by commas.\n3. The system should process a specified column in a CSV file by converting all its entries to uppercase and save the modified data to a new CSV file with a \"_process\" suffix before the file extension.\n4. The system should handle cases where the specified column index does not exist in the CSV file by returning an error code.\n5. The system should handle file opening errors gracefully by returning appropriate error codes or messages.\n6. The system should ensure that the output CSV file maintains the correct format with commas separating values and each row on a new line.\n7. The system should preserve the original CSV file and only create a new processed file.\n8. The system should be able to handle large CSV files efficiently without consuming excessive memory or processing time.",
  "CurrencyConverter": "Title: Currency Converter\n1. The system should provide functionality to convert an amount from one currency to another.\n2. The system should maintain a list of supported currencies and their exchange rates relative to a base currency.\n3. The system should allow users to retrieve a list of all supported currencies.\n4. The system should enable the addition of new currency rates to the existing list.\n5. The system should allow updating the exchange rate of an existing currency.\n6. The system should handle cases where the source and target currencies are the same by returning the original amount.\n7. The system should return an error or indication when attempting to convert between unsupported currencies.\n8. The system should prevent adding a duplicate currency rate.\n9. The system should ensure that the currency order list is updated when a new currency is added.",
  "DatabaseProcessor": "Title: DatabaseProcessor\n\n1. The system shall provide functionality to create a new table in a SQLite database with specified table name and two columns named 'key1' of type TEXT and 'key2' of type INTEGER.\n2. The system shall allow insertion of multiple records into a specified table, where each record consists of a 'name' and an 'age'.\n3. The system shall enable searching for records in a specified table based on the 'name' field, returning all matching records.\n4. The system shall support deletion of records from a specified table based on the 'name' field.\n5. The system shall handle errors during database operations by throwing exceptions with descriptive error messages.\n6. The system shall ensure that the database connection is properly closed after each operation.\n7. The system shall use parameterized queries to prevent SQL injection attacks.\n8. The system shall be able to handle concurrent database operations without causing data corruption or inconsistencies.\n9. The system shall maintain the integrity of the database by ensuring that all transactions are completed successfully or rolled back in case of failure.\n10. The system shall be compatible with the SQLite database engine and utilize its API for database operations.",
  "DataStatistics": "Title: DataStatistics Class\n\n1. The system shall provide a method to calculate the mean of a dataset, rounded to two decimal places.\n2. The system shall provide a method to calculate the median of a dataset.\n3. The system shall provide a method to determine the mode(s) of a dataset.\n4. The system shall throw an exception if the input dataset is empty when calculating the mean.\n5. The system shall throw an exception if the input dataset is empty when calculating the median.\n6. The system shall throw an exception if the input dataset is empty when determining the mode(s).\n7. The system shall handle datasets containing both positive and negative numbers.\n8. The system shall handle datasets with duplicate values correctly when determining the mode(s).",
  "DataStatistics2": "Title: DataStatistics2 Class\n\n1. The system shall provide a class named `DataStatistics2` that accepts a vector of doubles as input data.\n2. The system shall provide a method `get_sum` that returns the sum of all elements in the input data.\n3. The system shall provide a method `get_min` that returns the minimum value from the input data.\n4. The system shall provide a method `get_max` that returns the maximum value from the input data.\n5. The system shall provide a method `get_variance` that calculates and returns the variance of the input data, rounded to two decimal places.\n6. The system shall provide a method `get_std_deviation` that calculates and returns the standard deviation of the input data, rounded to two decimal places.\n7. The system shall provide a method `get_correlation` that calculates and returns the correlation of the input data. If the data size is less than 2, it should return 1.0.\n8. The system shall ensure that all calculations involving floating-point numbers maintain precision up to two decimal places.\n9. The system shall handle cases where the input data vector is empty or contains only one element appropriately.\n10. The system shall not modify the input data vector during any operations.",
  "DataStatistics4": "Title: DataStatistics4 Class\n\n1. The system shall provide a method to calculate the correlation coefficient between two sets of numerical data.\n2. The system shall provide a method to calculate the skewness of a set of numerical data.\n3. The system shall provide a method to calculate the kurtosis of a set of numerical data.\n4. The system shall provide a method to compute the probability density function (PDF) values for a given set of numerical data based on specified mean (mu) and standard deviation (sigma).\n5. The system shall handle cases where the standard deviation is zero by returning 0 for skewness and NaN for kurtosis.\n6. The system shall ensure that the PDF calculation uses the mathematical constant pi with sufficient precision.\n7. The system shall process input data efficiently, minimizing computational overhead during statistical calculations.\n8. The system shall maintain accuracy in floating-point arithmetic operations to ensure reliable statistical results.\n9. The system shall be robust against invalid inputs, such as mismatched vector sizes for correlation coefficient calculation.\n10. The system shall document the expected behavior and limitations of each statistical method provided.",
  "DecryptionUtils": "Title: Decryption Utilities\n\n1. The system shall provide a class named `DecryptionUtils` that accepts a decryption key during initialization.\n2. The system shall support Caesar cipher decryption, taking a ciphertext string and an integer shift value as input, and returning the decrypted plaintext string.\n3. The system shall support Vigenère cipher decryption, taking a ciphertext string as input and using the provided decryption key to return the decrypted plaintext string.\n4. The system shall support Rail Fence cipher decryption, taking an encrypted text string and an integer number of rails as input, and returning the decrypted plaintext string.\n5. The system shall handle both uppercase and lowercase alphabetic characters in the input strings, preserving their case in the output.\n6. The system shall leave non-alphabetic characters unchanged in the output.\n7. The system shall correctly handle shifts in the Caesar cipher that exceed the alphabet length by wrapping around.\n8. The system shall use the Vigenère cipher decryption method by repeating the key over the length of the ciphertext.\n9. The system shall reconstruct the original plaintext from the Rail Fence cipher by simulating the zigzag pattern used in encryption.\n10. The system shall ensure that the Rail Fence decryption process correctly handles edge cases such as a single rail or no rails specified.",
  "DiscountStrategy": "Title: Discount Calculation System\n1. The system should accept customer information and a shopping cart as input.\n2. The system should calculate the total price of items in the shopping cart.\n3. The system should apply a discount based on the type of promotion selected (Fidelity, Bulk Item, Large Order).\n4. The system should calculate the final amount due after applying the appropriate discount.\n5. The system should support different types of promotions: Fidelity Promotion, Bulk Item Promotion, and Large Order Promotion.\n6. For Fidelity Promotion, a 5% discount should be applied if the customer's fidelity points are 1000 or more.\n7. For Bulk Item Promotion, a 10% discount should be applied to each item with a quantity of 20 or more.\n8. For Large Order Promotion, a 7% discount should be applied if the number of items in the cart is 10 or more.\n9. If no promotion is selected, no discount should be applied.\n10. The system should handle cases where the required keys (\"quantity\", \"price\", \"fidelity\") are not present in the input data gracefully.",
  "EightPuzzle": "Title: EightPuzzle Solver\n1. The system should accept an initial state of the 8-puzzle game as a 3x3 matrix.\n2. The system should be able to identify the position of the blank tile (represented by 0) in the puzzle.\n3. The system should allow movement of the blank tile in four possible directions: up, down, left, and right, provided the move is within the bounds of the puzzle.\n4. The system should determine all possible valid moves from any given state of the puzzle.\n5. The system should solve the 8-puzzle game by finding a sequence of moves that transforms the initial state into the goal state, which is represented by the matrix {{1, 2, 3}, {4, 5, 6}, {7, 8, 0}}.\n6. The system should return the sequence of moves required to solve the puzzle or an empty sequence if no solution exists.\n7. The system should support reinitialization of the puzzle with a new initial state using the assignment operator.\n8. The system should handle invalid states gracefully without crashing or producing incorrect results.\n9. The system should efficiently manage memory usage during the solving process to avoid excessive resource consumption.\n10. The system should provide a clear and understandable interface for users to interact with the puzzle-solving functionality.",
  "EmailClient": "Title: Email Client System\n\n1. The system should allow creation of an email client with a specified email address and storage capacity.\n2. The system should enable sending emails from one email client to another, provided the recipient's inbox has enough space.\n3. The system should store each email with details including sender, receiver, content, size, timestamp, and read state.\n4. The system should allow fetching the first unread email from the inbox and mark it as read.\n5. The system should check if adding another email would exceed the storage capacity of the inbox.\n6. The system should calculate the total size of all emails currently stored in the inbox.\n7. The system should clear emails from the inbox to free up space when necessary, starting with the oldest emails first.\n8. The system should generate a timestamp for each email indicating the time it was sent.\n9. The system should handle empty inboxes gracefully by returning an empty map when attempting to fetch an email.\n10. The system should ensure that no email is sent if the recipient's inbox is full, and attempt to free up space by clearing old emails before retrying.",
  "EncryptionUtils": "Title: EncryptionUtils Class\n\n1. The class should accept a string key during initialization.\n2. The class should provide a method to encrypt a given plaintext using the Caesar cipher technique with a specified shift value.\n3. The class should provide a method to encrypt a given plaintext using the Vigenère cipher technique with the key provided during initialization.\n4. The class should provide a method to encrypt a given plaintext using the Rail Fence cipher technique with a specified number of rails.\n5. The Caesar cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n6. The Vigenère cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n7. The Rail Fence cipher method should throw an exception if the number of rails is less than or equal to zero.\n8. The Rail Fence cipher method should handle both uppercase and lowercase letters, preserving their case, and leave non-alphabetic characters unchanged.\n9. The encryption methods should not modify the original plaintext.\n10. The encryption methods should return the encrypted text as a string.",
  "ExcelProcessor": "Title: Excel Processor\n\n1. The system shall provide functionality to read data from an Excel file named by the user.\n2. The system shall support reading both string and integer values from the Excel file.\n3. The system shall provide functionality to write data to an Excel file named by the user.\n4. The system shall support writing both string and integer values to the Excel file.\n5. The system shall process data from an Excel file by transforming the N-th column based on specific rules.\n6. If the N-th column contains a string that does not start with a digit, the system shall convert all characters to uppercase and append the transformed string to the end of each row.\n7. If the N-th column contains a string that starts with a digit, the system shall append only the first character of the string to the end of each row.\n8. If the N-th column contains an integer, the system shall append the integer to the end of each row.\n9. The processed data shall be saved in a new Excel file with the original filename appended with \"_process\".\n10. The system shall handle exceptions during file operations and return appropriate status codes.\n11. The system shall ensure that the Excel file is properly closed after reading or writing operations.\n12. The system shall validate the input parameters for file names and column index to prevent errors.\n13. The system shall maintain the integrity of the data during read, process, and write operations.\n14. The system shall provide feedback on the success or failure of file operations.\n15. The system shall be able to handle large Excel files efficiently without excessive memory usage.",
  "ExpressionCalculator": "Title: Expression Calculator\n\n1. The system should accept a mathematical expression as a string input.\n2. The system should evaluate the given mathematical expression and return the result as a double.\n3. The system should support basic arithmetic operations including addition (+), subtraction (-), multiplication (*), division (/), and modulus (%).\n4. The system should handle parentheses for grouping expressions.\n5. The system should correctly interpret unary minus as a negative sign.\n6. The system should ignore spaces in the input expression.\n7. The system should convert infix expressions to postfix notation before evaluation.\n8. The system should maintain operator precedence during evaluation.\n9. The system should throw an exception if an unexpected operator is encountered during evaluation.\n10. The system should handle floating-point numbers in the expression.\n11. The system should ensure that the input expression is syntactically correct before attempting to evaluate it.\n12. The system should be able to process expressions with scientific notation (e.g., 1.23E-4).\n13. The system should not allow division by zero and should handle such cases gracefully.\n14. The system should provide accurate results for valid mathematical expressions within the limits of double precision.\n15. The system should be efficient in terms of time complexity for evaluating expressions.\n16. The system should be robust against malformed or invalid input expressions.",
  "FitnessTracker": "Title: FitnessTracker Application\n1. The system shall accept user input for height, weight, age, and sex to initialize a FitnessTracker object.\n2. The system shall calculate and provide the Body Mass Index (BMI) based on the user's height and weight.\n3. The system shall determine the user's condition relative to a standard BMI range based on their sex, returning -1 if underweight, 0 if within the normal range, and 1 if overweight.\n4. The system shall calculate the recommended daily calorie intake based on the user's BMR (Basal Metabolic Rate) and their condition (underweight, normal, or overweight).\n5. The system shall use the Mifflin-St. Jeor equation to calculate BMR for males and females.\n6. The system shall adjust the calculated BMR by activity level factors of 1.2, 1.4, and 1.6 for underweight, normal, and overweight conditions, respectively.\n7. The system shall store predefined BMI standard ranges for males and females in an unordered map.\n8. The system shall ensure that all calculations are performed using double precision for accuracy.\n9. The system shall handle invalid inputs gracefully without causing runtime errors.\n10. The system shall maintain encapsulation by keeping member variables private and providing public methods to interact with them.",
  "GomokuGame": "Title: Gomoku Game Implementation\n1. The game should be initialized with a specified board size.\n2. Players should be able to make moves on the board by specifying a row and column.\n3. The game should alternate between two players ('X' and 'O') after each valid move.\n4. The game should check for a winner after each move by determining if there are five of the same symbols in a row, column, or diagonal.\n5. The game should provide a method to retrieve the current state of the board.\n6. The game should handle invalid moves (e.g., placing a piece on an already occupied spot) gracefully.\n7. The game should indicate when there is no winner after a move.\n8. The game should support board sizes larger than 5x5, allowing for more complex games.\n9. The game should ensure that all moves are within the bounds of the board.\n10. The game should not allow any player to win unless they have exactly five consecutive symbols.",
  "Hotel": "Title: Hotel Management System\n\nFunctional Requirements:\n1. The system should allow the creation of a hotel object with a specified name and initial room availability.\n2. The system should provide functionality to book rooms by specifying the room type, number of rooms, and guest name.\n3. The system should allow guests to check-in by specifying the room type, number of rooms, and guest name.\n4. The system should enable guests to check-out by specifying the room type and number of rooms.\n5. The system should provide the ability to query the number of available rooms for a specific room type.\n\nNon-Functional Requirements:\n1. The system should handle concurrent booking and check-in/check-out operations efficiently.\n2. The system should ensure data consistency and integrity during booking and check-in/check-out processes.\n3. The system should provide clear and concise feedback to users regarding the success or failure of their actions.\n4. The system should be scalable to accommodate an increasing number of hotels and guests.\n5. The system should maintain high performance even when handling a large volume of transactions.",
  "HRManagementSystem": "Title: HR Management System\n\n1. The system should allow adding an employee with unique employee ID, name, position, department, and salary.\n2. The system should prevent adding an employee if the employee ID already exists.\n3. The system should allow removing an employee by their unique employee ID.\n4. The system should allow updating an employee's details using their unique employee ID and a map of attributes to update.\n5. The system should ensure that only existing attributes can be updated for an employee.\n6. The system should provide the ability to retrieve an employee's details by their unique employee ID.\n7. The system should return an empty result if an employee with the specified ID does not exist.\n8. The system should provide a function to list all employees with their details.\n9. The system should store employee details in a way that allows efficient retrieval and modification.\n10. The system should handle cases where employee data might be missing or invalid gracefully.",
  "Interpolation": "Title: Interpolation Class\n\n1. The system shall provide a method to perform linear interpolation on a set of 1D data points.\n2. The system shall provide a method to perform bilinear interpolation on a set of 2D data points.\n3. The interpolation methods shall accept vectors of input data points and corresponding interpolated points.\n4. The output of the interpolation methods shall be a vector of interpolated values.\n5. The system shall handle cases where the interpolated point falls outside the range of the input data points by not including those points in the output.\n6. The system shall ensure that the interpolation calculations are accurate and consistent with linear and bilinear interpolation formulas.\n7. The system shall be efficient in terms of computational resources, minimizing unnecessary calculations and memory usage.\n8. The system shall be robust against invalid inputs, such as empty vectors or mismatched dimensions between input vectors.\n9. The system shall maintain the order of interpolated points in the output vector corresponding to the order of input interpolated points.\n10. The system shall be thread-safe, allowing concurrent calls to the interpolation methods without affecting the results.",
  "IPAddress": "Title: IPAddress Class\n\n1. The class should accept an IP address as a string during initialization.\n2. It should provide a method to check if the IP address is valid.\n3. A valid IP address consists of four octets separated by dots.\n4. Each octet must be a number between 0 and 255 inclusive.\n5. Each octet must not contain leading zeros unless it is exactly \"0\".\n6. The class should provide a method to retrieve the octets of the IP address as a vector of strings if the IP address is valid.\n7. The class should provide a method to convert the IP address into its binary representation as a string, with each octet represented by an 8-bit binary number separated by dots if the IP address is valid.\n8. If the IP address is invalid, methods that return data (octets or binary representation) should return an empty container or string.",
  "IpUtil": "Title: IP Utility Functions\n1. Validate an IPv4 address provided as a string.\n2. Validate an IPv6 address provided as a string.\n3. Retrieve the hostname associated with a given IPv4 address.\n4. Return the local machine's hostname when the input IP address is \"0.0.0.0\".\n5. Return an empty string if the IP address is invalid or if the hostname cannot be retrieved.",
  "JobMarketplace": "Title: Job Marketplace System\n1. Users can post jobs with details including job title, company name, and a list of requirements.\n2. Users can remove jobs from the marketplace.\n3. Users can submit their resumes with details including name, skills, and experience.\n4. Users can withdraw their submitted resumes from the marketplace.\n5. Users can search for jobs based on criteria that match either the job title or any of the job requirements.\n6. The system can retrieve a list of resumes that match the requirements of a specific job.\n7. The system checks if a resume meets all the requirements of a job by comparing the skills listed in the resume against the job requirements.\n8. The system maintains a list of job listings and submitted resumes.\n9. Job listings and resumes can be compared for equality based on their respective attributes.\n10. The system should efficiently handle operations such as adding, removing, and searching for jobs and resumes.",
  "JSONProcessor": "Title: JSON Processor\n\n1. The system shall provide functionality to read a JSON file from a specified file path and store its contents in a JSON object.\n2. The system shall provide functionality to write a JSON object to a specified file path in a formatted manner with an indentation of 4 spaces.\n3. The system shall provide functionality to process a JSON file by removing a specified key if it exists within the JSON structure.\n4. The system shall return a status code indicating success or failure when reading a JSON file.\n5. The system shall return a status code indicating success or failure when writing a JSON file.\n6. The system shall return a status code indicating whether the specified key was successfully removed from the JSON file during processing.\n7. The system shall handle exceptions that may occur during file operations and JSON parsing/serialization.\n8. The system shall ensure that the JSON file is properly closed after reading or writing operations.\n9. The system shall not modify the JSON file if the specified key does not exist during processing.\n10. The system shall use the `nlohmann::json` library for JSON handling.",
  "KappaCalculator": "Title: Kappa Calculator\n1. The system should calculate Cohen's Kappa coefficient given a matrix of test data and the number of categories.\n2. The system should calculate Fleiss' Kappa coefficient given a matrix of test data, the number of subjects, the number of categories, and the number of ratings per subject.\n3. The system should handle input data in the form of a two-dimensional vector of integers.\n4. The system should utilize the Eigen library for matrix operations.\n5. The system should compute the observed agreement (P0) by summing the diagonal elements of the data matrix and normalizing it by the total number of observations.\n6. The system should compute the expected agreement (Pe) based on the marginal sums of the data matrix.\n7. The system should return the Cohen's Kappa coefficient as the difference between observed and expected agreements normalized by one minus the expected agreement.\n8. The system should compute Fleiss' Kappa by considering the proportion of all ratings that agree for each subject and averaging these proportions across all subjects.\n9. The system should ensure numerical stability during calculations, especially when dealing with small sample sizes or high category counts.\n10. The system should provide accurate results for both Cohen's and Fleiss' Kappa coefficients within a reasonable time frame for typical input sizes.",
  "LongestWord": "Title: Longest Word Finder\n1. The system should allow adding individual words to a list of known words.\n2. The system should be able to find the longest word in a given sentence that is also present in the list of known words.\n3. The comparison for finding the longest word should be case-insensitive.\n4. Punctuation marks should be removed from the sentence before processing.\n5. The system should return the longest word found in the sentence that matches any word in the list.\n6. The system should provide a method to retrieve the current list of known words.",
  "MahjongConnect": "Title: Mahjong Connect Game\n\n1. The game initializes with a board of specified dimensions filled with randomly selected icons from a given set.\n2. Players can select two positions on the board to attempt a move.\n3. A valid move requires both positions to contain the same icon and there must be a path connecting them consisting of only the same icon type.\n4. If a valid move is made, the icons at the selected positions are removed from the board.\n5. The game checks if all icons have been removed after each move to determine if the game is over.\n6. The board size and the set of icons are provided as inputs when the game starts.\n7. The game ensures that no moves are made outside the boundaries of the board.\n8. The game prevents selecting the same position twice in a single move.\n9. The game uses a depth-first search algorithm to check for a valid path between two positions.\n10. The game updates the board state after each valid move by replacing the matched icons with an empty space (' ').",
  "Manacher": "Title: Manacher Algorithm Implementation\n1. The system should accept a string as input.\n2. The system should identify the longest palindromic substring within the input string.\n3. The system should handle strings of varying lengths and characters.\n4. The system should return the longest palindromic substring found in the input string.\n5. The system should efficiently compute the longest palindromic substring using the Manacher's algorithm.\n6. The system should correctly handle edge cases such as empty strings or strings with no palindromic substrings.\n7. The system should maintain the integrity of the original input string during processing.\n8. The system should not modify the input string directly but work on a modified version that includes separators between characters.\n9. The system should be able to handle special characters and spaces within the input string.\n10. The system should provide a clear and concise output of the longest palindromic substring.",
  "MetricsCalculator": "Title: Metrics Calculator\n1. The system should calculate and maintain true positives, false positives, false negatives, and true negatives based on predicted and true labels.\n2. The system should provide a method to update the metrics with new sets of predicted and true labels.\n3. The system should compute the precision of predictions using the formula: Precision = True Positives / (True Positives + False Positives).\n4. The system should compute the recall of predictions using the formula: Recall = True Positives / (True Positives + False Negatives).\n5. The system should compute the F1 score of predictions using the formula: F1 Score = 2 * (Precision * Recall) / (Precision + Recall).\n6. The system should compute the accuracy of predictions using the formula: Accuracy = (True Positives + True Negatives) / Total Predictions.\n7. The system should handle cases where division by zero might occur during the calculation of precision, recall, F1 score, and accuracy by returning 0.0 in such scenarios.\n8. The system should ensure that the input vectors for predicted and true labels are of the same size before processing them.\n9. The system should initialize all metric counters (true positives, false positives, false negatives, true negatives) to zero upon creation of a MetricsCalculator object.",
  "MetricsCalculator2": "Title: Metrics Calculator\n\n1. The system shall provide a method to calculate the Mean Reciprocal Rank (MRR) from a dataset of integer vectors and associated integer values.\n2. The system shall provide a method to calculate the Mean Average Precision (MAP) from a dataset of integer vectors and associated integer values.\n3. The MRR calculation shall return a pair consisting of the average MRR value and a vector of individual MRR values for each input vector.\n4. The MAP calculation shall return a pair consisting of the average MAP value and a vector of individual AP values for each input vector.\n5. If the input dataset is empty, both MRR and MAP calculations shall return an average value of 0.0 and a vector containing a single element of 0.0.\n6. For each input vector in the dataset, if the associated integer value (k) is less than or equal to 0 or the vector is empty, the corresponding MRR value shall be 0.0.\n7. The MRR for a given vector shall be calculated as the reciprocal of the rank of the first occurrence of the integer 1 in the vector, with ranks starting at 1.\n8. The MAP for a given vector shall be calculated as the average precision score, which is the sum of the precision at each relevant item divided by the number of relevant items.\n9. The system shall handle cases where there are no relevant items (integer 1) in the input vector by returning an AP value of 0.0 for that vector.\n10. The system shall ensure that all calculations are performed efficiently and accurately, handling edge cases such as empty vectors and invalid input values gracefully.",
  "MovieBookingSystem": "Title: Movie Booking System\n\n1. The system should allow adding a new movie with details such as name, price, start time, end time, and number of seats.\n2. The system should enable booking tickets for a specific movie by selecting seats, ensuring that the selected seats are available.\n3. The system should provide a list of movies that are available within a specified time range.\n4. The system should validate the input time format and throw an error if the time cannot be parsed correctly.\n5. The system should check if the requested movie exists before attempting to book tickets.\n6. The system should ensure that seat numbers provided for booking are within the valid range of the movie's seating arrangement.\n7. The system should mark booked seats as unavailable for future bookings.\n8. The system should return appropriate messages indicating success or failure of ticket booking operations.\n9. The system should handle concurrent booking requests without interfering with each other.\n10. The system should maintain data integrity and consistency across all operations.",
  "MovieTicketDB": "Title: Movie Ticket Database Management\n\n1. The system shall provide functionality to manage movie tickets in a SQLite database.\n2. The system shall allow creation of a database table named 'tickets' with columns for id, movie_name, theater_name, seat_number, and customer_name.\n3. The system shall enable insertion of new movie tickets into the 'tickets' table with details such as movie name, theater name, seat number, and customer name.\n4. The system shall support searching for movie tickets by customer name and return all matching records.\n5. The system shall provide functionality to delete a specific movie ticket from the 'tickets' table using its unique identifier.\n6. The system shall ensure that all database connections are properly closed upon termination or destruction of the MovieTicketDB object.\n7. The system shall handle exceptions and errors during database operations by throwing runtime errors with descriptive messages.\n8. The system shall maintain data integrity and consistency throughout all database operations.\n9. The system shall be compatible with the SQLite database engine.\n10. The system shall use parameterized queries to prevent SQL injection attacks.",
  "MusicPlayer": "Title: Music Player\n\n1. The system should allow users to add songs to the playlist.\n2. The system should allow users to remove songs from the playlist.\n3. The system should play the first song in the playlist if no song is currently playing.\n4. The system should continue playing the current song if it is already playing.\n5. The system should stop playing the current song and clear the current song reference.\n6. The system should switch to the next song in the playlist if a song is currently playing.\n7. The system should switch to the previous song in the playlist if a song is currently playing.\n8. The system should allow users to set the volume of the player, with valid volume levels ranging from 0 to 100.\n9. The system should shuffle the playlist randomly.\n10. The system should maintain a list of songs in the playlist.\n11. The system should keep track of the currently playing song.\n12. The system should initialize the volume to 50 when the player is created.\n13. The system should ensure that the volume level is within the valid range before setting it.",
  "NLPDataProcessor": "Title: NLP Data Processor\n\n1. The system shall provide a method to construct a predefined list of stop words.\n2. The system shall provide a method to remove stop words from a list of strings.\n3. The system shall split each string in the input list into individual words.\n4. The system shall compare each word against a predefined list of stop words and exclude any matching words.\n5. The system shall return a list of lists, where each inner list contains the words from the corresponding input string with stop words removed.\n6. The system shall provide a main processing method that constructs the stop word list and applies it to remove stop words from the input list of strings.",
  "NLPDataProcessor2": "Title: NLP Data Processor\n\n1. The system should convert all characters in the input strings to lowercase.\n2. The system should remove all non-alphabetic characters except spaces from the input strings.\n3. The system should split each processed string into individual words based on whitespace.\n4. The system should count the frequency of each word across all input strings.\n5. The system should maintain the order of first appearance for words with the same frequency.\n6. The system should return the top 5 most frequent words along with their frequencies.\n7. The system should handle multiple input strings and process them accordingly.\n8. The system should be able to handle empty strings gracefully without causing errors.\n9. The system should ensure that the output map contains no more than 5 entries.\n10. The system should be efficient in processing large volumes of text data.",
  "NumberConverter": "Title: NumberConverter Class\n\n1. Convert a decimal number to its binary representation as a string.\n2. Convert a binary number (given as a string) to its decimal representation as an integer.\n3. Convert a decimal number to its octal representation as a string.\n4. Convert an octal number (given as a string) to its decimal representation as an integer.\n5. Convert a decimal number to its hexadecimal representation as a string.\n6. Convert a hexadecimal number (given as a string) to its decimal representation as an integer.",
  "NumberWordFormatter": "Title: NumberWordFormatter\n\n1. The system should convert an integer into its English word representation.\n2. The system should convert a double into its English word representation, including cents.\n3. The system should convert a string representation of a number into its English word representation.\n4. The system should handle null values by returning an empty string.\n5. The system should correctly format numbers in the thousands, millions, billions, etc., with appropriate suffixes.\n6. The system should handle numbers less than 1000 correctly, converting them into words without unnecessary suffixes.\n7. The system should append \"AND CENTS\" followed by the word representation of the decimal part when formatting a double.\n8. The system should return \"ZERO ONLY\" if the input number is zero.\n9. The system should trim any trailing spaces from the final formatted string before returning it.",
  "NumericEntityUnescaper": "Title: NumericEntityUnescaper\n\n1. The system shall provide a method to replace numeric character references in a string with their corresponding characters.\n2. The system shall handle both decimal and hexadecimal numeric character references.\n3. The system shall ignore malformed or incomplete numeric character references.\n4. The system shall not modify parts of the string that do not represent numeric character references.\n5. The system shall return an empty string if the input string is empty.\n6. The system shall correctly interpret the '#' symbol as the start of a numeric character reference following an '&' symbol.\n7. The system shall correctly interpret 'x' or 'X' as indicators of a hexadecimal numeric character reference.\n8. The system shall correctly parse and convert numeric strings to integer values, considering both decimal and hexadecimal formats.\n9. The system shall append the converted character to the output string upon successful parsing of a numeric character reference.\n10. The system shall maintain the integrity of the original string except for the replaced numeric character references.",
  "Order": "Title: Restaurant Order Management System\n1. The system should allow adding dishes to an order from a predefined menu.\n2. Each dish in the menu has a name, price, and available count.\n3. When adding a dish to the order, the system should check if the requested quantity is available in the menu.\n4. If the requested quantity is not available, the system should not add the dish to the order and return an error.\n5. If the requested quantity is available, the system should reduce the count of the dish in the menu by the requested quantity.\n6. The system should calculate the total cost of the selected dishes, applying any applicable sales discounts.\n7. Sales discounts are stored as a percentage reduction for each dish and can be applied during the total calculation.\n8. The system should provide a method to checkout the order, which calculates the total cost, clears the selected dishes, and returns the total amount.\n9. If no dishes are selected when checking out, the system should return a total of zero.\n10. The system should maintain a list of all dishes available in the menu and a separate list of dishes that have been selected for the current order.",
  "PageUtil": "Title: PageUtil Class\n\n1. The system shall accept a vector of integers and a page size upon initialization.\n2. The system shall provide a method to retrieve a specific page of data based on the page number.\n3. The system shall ensure that page numbers outside the valid range return an empty vector.\n4. The system shall provide a method to retrieve detailed information about a specific page, including current page number, items per page, total pages, total items, availability of previous and next pages, and the data for the current page.\n5. The system shall ensure that page information requests for invalid page numbers return an empty map.\n6. The system shall provide a search functionality that allows searching for items containing a specified keyword within the data.\n7. The search results shall include the keyword used, total number of results, total pages of results, and the list of matching items.\n8. The system shall handle cases where no items match the search keyword by returning zero results.\n9. The system shall maintain the integrity of the original data and not modify it during operations.\n10. The system shall efficiently handle large datasets without significant performance degradation.",
  "PersonRequest": "Title: PersonRequest Class\n\n1. The system must accept a person's name, sex, and phone number as input.\n2. The system must validate that the name is not empty and does not exceed 33 characters.\n3. The system must validate that the sex is one of the following values: \"Man\", \"Woman\", or \"UGM\".\n4. The system must validate that the phone number is not empty, consists of exactly 11 digits, and contains only numeric characters.\n5. The system must store the validated name, sex, and phone number in the respective attributes of the `PersonRequest` class.\n6. If any validation fails, the corresponding attribute should be set to an empty string.",
  "PushBoxGame": "Title: PushBoxGame\n\n1. The game should be initialized with a map provided as a vector of strings.\n2. The game should be able to initialize without a map, setting default values.\n3. The game should provide a method to retrieve the current state of the map.\n4. The game should indicate whether the game is over.\n5. The game should provide the column position of the player.\n6. The game should provide the row position of the player.\n7. The game should provide the positions of all target locations on the map.\n8. The game should provide the positions of all boxes on the map.\n9. The game should provide the count of target locations.\n10. The game should check if the game has been won by verifying if all boxes are on target locations.\n11. The game should allow the player to move in four directions ('w', 's', 'a', 'd') and update the game state accordingly.\n12. The game should not allow movement into walls represented by '#' on the map.\n13. When the player moves onto a box, the box should move in the same direction if the space ahead of the box is not a wall.\n14. The game should update the player's position after a valid move.\n15. The game should automatically check for a win condition after each move.",
  "RegexUtils": "Title: RegexUtils Class\n\n1. The system shall provide a method to check if a given text matches a specified regex pattern.\n2. The system shall provide a method to find all occurrences of a regex pattern within a given text.\n3. The system shall provide a method to split a given text based on a specified regex pattern.\n4. The system shall provide a method to replace all occurrences of a regex pattern in a given text with a specified replacement string.\n5. The system shall provide a method to generate a regex pattern for matching email addresses.\n6. The system shall provide a method to generate a regex pattern for matching phone numbers in the format \"XXX-XXX-XXXX\".\n7. The system shall provide a method to generate a regex pattern for splitting sentences based on punctuation marks followed by spaces and an uppercase letter.\n8. The system shall provide a method to split a given text into sentences using the generated sentence split pattern.\n9. The system shall provide a method to validate if a given phone number matches the standard phone number format.\n10. The system shall provide a method to extract all email addresses from a given text using the generated email pattern.",
  "RPGCharacter": "Title: RPG Character Management System\n1. The system should allow the creation of an RPG character with attributes including name, health points (HP), attack power, defense, level, and experience points (EXP).\n2. The system should provide functionality for an RPG character to attack another character, reducing the target's HP based on the attacker's attack power and the defender's defense.\n3. The system should enable an RPG character to heal, increasing their HP by 10 points, with a maximum HP cap of 100.\n4. The system should support the accumulation of experience points for an RPG character, which can lead to leveling up.\n5. The system should automatically level up an RPG character when they accumulate enough experience points, resetting their EXP and increasing their HP, attack power, and defense.\n6. The system should prevent an RPG character from leveling beyond level 100.\n7. The system should provide a method to check if an RPG character is still alive based on their HP.\n8. The system should expose methods to retrieve the current values of HP, EXP, attack power, defense, and level for an RPG character.\n9. The system should allow setting a new value for an RPG character's HP directly.",
  "Server": "Title: Server Class Functionality\n\n1. The server should maintain a whitelist of addresses.\n2. The server should allow adding an address to the whitelist, ensuring no duplicates.\n3. The server should allow removing an address from the whitelist.\n4. The server should receive data containing an address and content, and check if the address is in the whitelist.\n5. If the received address is in the whitelist, the server should store the received data.\n6. If the received address is not in the whitelist, the server should ignore the data.\n7. The server should validate that the received data contains both \"addr\" and \"content\" fields.\n8. The server should allow sending data with an address and content, storing it internally.\n9. The server should validate that the sent data contains both \"addr\" and \"content\" fields.\n10. The server should provide functionality to retrieve either the last sent or received data based on the type specified (\"send\" or \"receive\").\n11. The server should return an error message if the sent data does not contain the required fields.\n12. The server should return an empty result if the address to be added or removed is not found in the whitelist.\n13. The server should return specific codes upon receiving data: -1 for missing fields, 0 for address not in whitelist, and 1 for successful reception.",
  "ShoppingCart": "Title: ShoppingCart Management System\n1. The system should allow users to add items to a shopping cart with a specified price and quantity.\n2. The system should allow users to remove items from the shopping cart with a specified quantity, and if the quantity becomes zero or less, the item should be completely removed from the cart.\n3. The system should provide a functionality to view all items currently in the shopping cart along with their prices and quantities.\n4. The system should calculate and provide the total price of all items in the shopping cart.\n5. The system should handle cases where an item is added multiple times by updating the quantity and price accordingly.\n6. The system should ensure that the shopping cart can handle a large number of items efficiently.\n7. The system should maintain data integrity, ensuring that no negative quantities or prices are stored.\n8. The system should be thread-safe if accessed concurrently by multiple users or processes.",
  "SignInSystem": "Title: User Sign-In System\n1. The system should allow adding new users by their username.\n2. The system should allow signing in users by their username.\n3. The system should provide functionality to check if a specific user is signed in.\n4. The system should provide functionality to check if all users are signed in.\n5. The system should provide a list of usernames for users who are not signed in.",
  "Snake": "Title: Snake Game Implementation\n1. The game initializes with a snake of length 1 positioned at the center of the screen.\n2. The game screen dimensions (width and height) and block size are configurable.\n3. The snake can move in four directions (up, down, left, right) based on user input.\n4. When the snake moves, its head position updates according to the movement direction and wraps around the screen edges.\n5. The snake grows in length by one unit and the score increases by 100 points when it eats food.\n6. Food appears randomly on the screen at positions that are not occupied by the snake.\n7. If the snake's head collides with any part of its body, the game resets.\n8. The game provides methods to retrieve the current length of the snake, its positions on the screen, the current score, the food position, and the screen dimensions.\n9. The game ensures that the food does not appear on the same position as the snake's body.\n10. The game state resets to initial conditions when the snake collides with itself, including repositioning the snake at the center and generating new food.",
  "SplitSentence": "Title: Sentence Splitter and Word Counter\n1. The system shall split a given string into sentences based on punctuation marks such as periods and question marks, taking care not to split abbreviations or acronyms.\n2. The system shall count the number of words in a given sentence, considering only alphabetic characters and ignoring punctuation and spaces.\n3. The system shall process a text input to determine the maximum number of words found in any single sentence within the text.\n4. The system shall handle and ignore trailing spaces at the end of each sentence after splitting.\n5. The system shall be able to handle and process large text inputs efficiently without significant performance degradation.\n6. The system shall maintain compatibility with the Boost library for regular expression operations.\n7. The system shall provide a clear and concise interface for splitting sentences, counting words, and processing text files.",
  "SQLGenerator": "Title: SQLGenerator Class\n\n1. The class should generate SQL SELECT statements based on specified fields and conditions.\n2. The class should generate SQL INSERT statements based on provided data fields and their corresponding values.\n3. The class should generate SQL UPDATE statements based on provided data fields and their corresponding values, along with a condition.\n4. The class should generate SQL DELETE statements based on a given condition.\n5. The class should generate a SQL SELECT statement to retrieve records of females under a specified age.\n6. The class should generate a SQL SELECT statement to retrieve records within a specified age range.\n7. The class should accept a table name during initialization and use it in all generated SQL queries.\n8. The class should handle empty fields and conditions gracefully, generating appropriate SQL queries without errors.\n9. The class should ensure that all string values in the generated SQL queries are properly quoted to prevent SQL injection vulnerabilities.\n10. The class should maintain immutability of its state after initialization, ensuring that all methods do not modify the internal state of the object.",
  "SQLQueryBuilder": "Title: SQL Query Builder\n\n1. The system shall provide a method to generate a SELECT SQL query with specified table, columns, and optional WHERE conditions.\n2. The system shall provide a method to generate an INSERT SQL query with specified table and data pairs.\n3. The system shall provide a method to generate a DELETE SQL query with specified table and optional WHERE conditions.\n4. The system shall provide a method to generate an UPDATE SQL query with specified table, data pairs, and optional WHERE conditions.\n5. The SELECT query shall include all columns if no specific columns are provided.\n6. The WHERE conditions in SELECT, DELETE, and UPDATE queries shall be combined using the AND operator.\n7. The generated SQL queries shall use single quotes around string values in the WHERE clause.\n8. The INSERT query shall format column names and values correctly within parentheses.\n9. The UPDATE query shall format column assignments correctly separated by commas.\n10. The system shall handle empty WHERE conditions gracefully without adding unnecessary SQL syntax.",
  "Statistics3": "Title: Statistics3 Class\n\nFunctional Requirements:\n1. Calculate the mean of a dataset.\n2. Calculate the median of a dataset.\n3. Determine the mode(s) of a dataset.\n4. Compute the Pearson correlation coefficient between two datasets.\n5. Generate a correlation matrix for multiple datasets.\n6. Calculate the standard deviation of a dataset.\n7. Compute the Z-scores for a dataset.\n\nNon-Functional Requirements:\n1. Handle empty datasets gracefully by returning NaN for mean, median, standard deviation, and Z-scores.\n2. Throw an exception if datasets provided for correlation calculation have different lengths.\n3. Return NaN for standard deviation and Z-scores if the dataset has fewer than two elements or if the standard deviation is zero.\n4. Ensure efficient computation of statistical measures, especially for large datasets.\n5. Maintain numerical precision in calculations involving floating-point arithmetic.",
  "StockPortfolioTracker": "Title: Stock Portfolio Tracker\n\n1. The system should allow initialization of a stock portfolio tracker with a specified cash balance.\n2. The system should support adding stocks to the portfolio, updating the quantity if the stock already exists.\n3. The system should support removing stocks from the portfolio, reducing the quantity or removing the stock entirely if the quantity reaches zero.\n4. The system should allow buying stocks, deducting the cost from the cash balance and adding the stock to the portfolio.\n5. The system should allow selling stocks, adding the proceeds to the cash balance and removing the stock from the portfolio.\n6. The system should calculate the total value of the portfolio, including the cash balance and the value of all stocks.\n7. The system should provide a summary of the portfolio, listing each stock's name and its total value.\n8. The system should provide the value of a specific stock based on its price and quantity.\n9. The system should allow retrieval of the current portfolio as a list of stocks.\n10. The system should allow retrieval of the current cash balance.\n11. The system should allow setting a new portfolio, replacing the existing one.\n12. The system should ensure that operations involving stock quantities do not result in negative quantities.\n13. The system should ensure that buying stocks does not proceed if there is insufficient cash balance.\n14. The system should maintain data integrity by ensuring that stock names are unique within the portfolio.\n15. The system should provide consistent and accurate values for stock prices and portfolio totals.",
  "StudentDatabaseProcessor": "Title: Student Database Processor\n\n1. The system shall provide functionality to create a table named \"students\" with columns for id, name, age, gender, and grade if it does not already exist.\n2. The system shall allow insertion of student data into the \"students\" table using a map containing keys for name, age, gender, and grade.\n3. The system shall enable searching for students by their name and return a list of matching students with all their details.\n4. The system shall support deletion of students from the \"students\" table based on their name.\n5. The system shall use SQLite as the underlying database management system.\n6. The system shall handle SQL queries securely by using parameterized queries to prevent SQL injection attacks.\n7. The system shall manage database connections efficiently by opening and closing connections as needed for each query execution.\n8. The system shall be able to handle multiple student entries with the same name without overwriting existing records.\n9. The system shall ensure that the student data is stored and retrieved accurately, maintaining data integrity.\n10. The system shall provide error handling for database operations such as connection failures or query execution errors.",
  "TextFileProcessor": "Title: Text File Processor\n\n1. The system shall provide functionality to read a text file and convert its contents into a JSON object.\n2. The system shall provide functionality to read the entire content of a text file as a string.\n3. The system shall provide functionality to write a given string content to a text file, overwriting any existing content.\n4. The system shall provide functionality to process a text file by removing all non-alphabetic characters from its content and then writing the processed content back to the same file.\n5. The system shall handle files using their filenames provided during the instantiation of the TextFileProcessor class.\n6. The system shall ensure that the operations on files do not throw exceptions and handle any potential errors gracefully.\n7. The system shall maintain the integrity of the file data during read and write operations.\n8. The system shall be able to handle large text files efficiently without consuming excessive memory.\n9. The system shall be compatible with UTF-8 encoded text files.\n10. The system shall provide a consistent interface for reading, writing, and processing text files.",
  "Thermostat": "Title: Thermostat Control System\n1. The system should initialize with a current temperature, target temperature, and mode.\n2. The system should provide a method to retrieve the target temperature.\n3. The system should allow setting a new target temperature.\n4. The system should provide a method to retrieve the current mode.\n5. The system should allow setting the mode to either \"heat\" or \"cool\". Any other mode input should be rejected.\n6. The system should automatically set the mode based on the comparison between the current temperature and the target temperature.\n7. The system should check for conflicts between the current temperature and the mode. If there is a conflict, it should attempt to resolve it by adjusting the mode.\n8. The system should simulate the operation of adjusting the current temperature to match the target temperature, counting the time taken to reach the target temperature.\n9. The system should increment the current temperature when in \"heat\" mode until it matches the target temperature.\n10. The system should decrement the current temperature when in \"cool\" mode until it matches the target temperature.\n11. The system should return the time taken to adjust the temperature to the target temperature during simulation.",
  "TicTacToe": "Title: TicTacToe Game Implementation\n1. The game should support a board of size N x N, with a default size of 3x3.\n2. Players should be able to make moves by specifying a row and column on the board.\n3. The game should alternate between two players, 'X' and 'O', after each valid move.\n4. The game should check for a winner after each move and return the winning player ('X' or 'O') if there is one.\n5. The game should determine if the board is full and no more moves can be made.\n6. The game should provide the identity of the current player at any point in time.\n7. The game should only allow a move if the specified cell is empty.\n8. The game should correctly identify winning conditions for rows, columns, and diagonals.\n9. The game should not allow moves outside the bounds of the board.\n10. The game should reset the current player to 'X' when a new game is started.",
  "TimeUtils": "Title: TimeUtils Class\n\n1. The system shall provide a method to retrieve the current time in \"HH:MM:SS\" format.\n2. The system shall provide a method to retrieve the current date in \"YYYY-MM-DD\" format.\n3. The system shall provide a method to add a specified number of seconds to the current time and return the new time in \"HH:MM:SS\" format.\n4. The system shall provide a method to convert a date-time string in \"YYYY-MM-DD HH:MM:SS\" format to a `std::tm` structure.\n5. The system shall provide a method to convert a `std::tm` structure to a date-time string in \"YYYY-MM-DD HH:MM:SS\" format.\n6. The system shall provide a method to calculate the difference in minutes between two date-time strings provided in \"YYYY-MM-DD HH:MM:SS\" format.\n7. The system shall provide a method to generate a date-time string in \"YYYY-MM-DD HH:MM:SS\" format from individual year, month, day, hour, minute, and second values.\n8. The system shall initialize the `datetime` member variable with the current local date and time upon instantiation of the `TimeUtils` class.",
  "TriCalculator": "Title: Trigonometric Calculator\n1. The system shall provide a method to calculate the cosine of an angle given in degrees.\n2. The system shall provide a method to calculate the sine of an angle given in degrees.\n3. The system shall provide a method to calculate the tangent of an angle given in degrees.\n4. The system shall use the Taylor series expansion to approximate the cosine function.\n5. The system shall compute the factorial of a non-negative integer.\n6. The system shall round the results of trigonometric calculations to a specified precision.\n7. The system shall handle angles in degrees and convert them to radians for calculations.\n8. The system shall output the intermediate Taylor series result for cosine calculation.\n9. The system shall return NaN for tangent calculations when the cosine of the angle is too close to zero to avoid division by zero errors.\n10. The system shall ensure that the sine calculation stops when the absolute value of the current term is less than 1e-15.",
  "TwentyFourPointGame": "Title: Twenty-Four Point Game\n\n1. The system should generate a set of four random integers between 1 and 9 inclusive when requested.\n2. The system should accept an arithmetic expression as input and determine if it evaluates to 24 using the generated integers.\n3. If the input expression is \"pass\", the system should generate a new set of four random integers and return them.\n4. The system should validate that the input expression uses only the generated integers and valid arithmetic operators (+, -, *, /, ^).\n5. The system should correctly handle operator precedence in the evaluation of the arithmetic expression.\n6. The system should return a vector containing the integer 1 if the expression evaluates to 24, otherwise, it should return an empty vector.\n7. The system should allow setting a custom set of four integers for evaluation purposes.\n8. The system should handle invalid expressions gracefully by returning an empty vector.\n9. The system should ensure that each digit in the input expression corresponds to one of the four generated integers and is used no more times than it appears in the generated set.\n10. The system should provide a mechanism to retrieve the current set of four integers.",
  "URLHandler": "Title: URLHandler Class\n\n1. The system shall provide a class named `URLHandler` that takes a URL as input during initialization.\n2. The system shall allow retrieval of the scheme component from the URL.\n3. The system shall allow retrieval of the host component from the URL.\n4. The system shall allow retrieval of the path component from the URL.\n5. The system shall allow retrieval of the query parameters from the URL, returning them as a map where keys are parameter names and values are parameter values.\n6. The system shall allow retrieval of the fragment component from the URL.\n7. The system shall handle URLs without a scheme by returning an empty string for the scheme.\n8. The system shall handle URLs without a path by returning an empty string for the path.\n9. The system shall handle URLs without query parameters by returning an empty map for the query parameters.\n10. The system shall handle URLs without a fragment by returning an empty string for the fragment.\n11. The system shall correctly parse and separate query parameters even if they are URL-encoded.\n12. The system shall not modify the original URL provided during initialization.",
  "UrlPath": "Title: URL Path Parser\n\n1. The system should provide a class named `UrlPath` to handle URL paths.\n2. The `UrlPath` class should have a method `add` to append a segment to the URL path after fixing it.\n3. The `UrlPath` class should have a method `parse` to parse a given URL path string based on a specified character set and split it into segments.\n4. The `UrlPath` class should have a static method `fix_path` to remove leading and trailing slashes from a path segment.\n5. The `UrlPath` class should have a method `get_segments` to retrieve all parsed segments of the URL path.\n6. The `UrlPath` class should have a method `with_end_tag` to check if the original URL path ended with a slash.\n7. The `parse` method should decode percent-encoded characters in each segment of the URL path.\n8. The `parse` method should handle UTF-8 encoded characters in the URL path.\n9. The `UrlPath` class should maintain the order of segments as they appear in the URL path.\n10. The `UrlPath` class should not modify the original URL path string during parsing.",
  "UserLoginDB": "Title: UserLoginDB\n\n1. The system shall provide functionality to insert a new user into the database with a specified username and password.\n2. The system shall allow searching for a user by their username and return the username and password if found.\n3. The system shall enable deletion of a user from the database based on their username.\n4. The system shall validate user login credentials by checking if the provided username and password match an entry in the database.\n5. The system shall automatically create a 'users' table upon initialization if it does not already exist.\n6. The system shall handle database connection errors by throwing a runtime exception with an appropriate error message.\n7. The system shall ensure that SQLite statements are properly prepared and finalized to prevent memory leaks.\n8. The system shall close the database connection when the UserLoginDB object is destroyed.\n9. The system shall use parameterized queries to prevent SQL injection attacks.\n10. The system shall store usernames and passwords as text in the 'users' table.",
  "VectorUtil": "Title: VectorUtil Class\n\n1. The system shall provide a method to calculate the similarity between two vectors of fixed size using the dot product of their normalized forms.\n2. The system shall provide a method to calculate the cosine similarities between a single vector and a list of vectors of fixed size.\n3. The system shall provide a method to calculate the similarity between the mean vectors of two lists of vectors of fixed size.\n4. The system shall provide a method to compute the Inverse Document Frequency (IDF) weights for a given dictionary of term counts and the total number of documents.\n5. The system shall handle cases where the norm of a vector is zero by returning a similarity of zero.\n6. The system shall throw an exception if either of the input lists in the n_similarity method is empty.\n7. The system shall support vectors of sizes 2 and 8.\n8. The system shall ensure that all operations involving floating-point arithmetic are performed with precision and accuracy.\n9. The system shall maintain the integrity of input data and not modify the original vectors during computations.\n10. The system shall be efficient in terms of time complexity, especially when dealing with large lists of vectors.",
  "VendingMachine": "Title: Vending Machine System\n\n1. The system should allow adding items with a specified name, price, and quantity.\n2. The system should accept coins and update the internal balance accordingly.\n3. The system should enable purchasing an item if it exists in the inventory, has sufficient quantity, and the user has inserted enough money; it should then deduct the item's price from the balance and decrease the item's quantity by one.\n4. The system should support restocking an existing item by increasing its quantity.\n5. The system should provide a display of all items available in the vending machine, showing their names, prices, and quantities.\n6. The system should allow retrieval of the current inventory state.\n7. The system should permit setting the inventory state externally.\n8. The system should allow setting the internal balance externally.",
  "Warehouse": "Title: Warehouse Management System\n\n1. The system should allow adding products with a unique product ID, name, and initial quantity to the inventory.\n2. The system should allow updating the quantity of an existing product in the inventory.\n3. The system should provide functionality to retrieve the current quantity of a product based on its product ID.\n4. The system should enable creating an order for a product if the requested quantity is available in the inventory, reducing the inventory quantity accordingly.\n5. The system should allow changing the status of an existing order.\n6. The system should provide functionality to track the status of an order using its order ID.\n7. The system should expose the current state of the inventory, including all products and their quantities.\n8. The system should expose the current state of all orders, including their statuses.",
  "WeatherSystem": "Title: Weather System\n\n1. The system should allow initialization with a city name.\n2. The system should provide functionality to query weather information for the initialized city from a provided list of weather data.\n3. The system should support querying temperature in either Celsius or Fahrenheit units.\n4. The system should convert temperatures between Celsius and Fahrenheit as needed.\n5. The system should allow updating the city name.\n6. The system should allow setting the temperature manually.\n7. The system should provide the ability to retrieve the current city name.\n8. The system should handle cases where the city is not found in the provided weather data list by returning default values.\n9. The system should maintain internal state for the city, temperature, and weather conditions.\n10. The system should be able to store and utilize a map of weather information for different cities.",
  "Words2Numbers": "Title: Words2Numbers Translator\n\n1. The system should convert a string containing English words representing numbers into their corresponding integer values.\n2. The system should handle numbers from zero to trillions.\n3. The system should recognize and process ordinal numbers such as \"first,\" \"second,\" \"third,\" etc.\n4. The system should correctly interpret hyphenated words by replacing hyphens with spaces before processing.\n5. The system should validate the input string to ensure all words represent valid numbers or ordinals.\n6. The system should maintain the original words in the output string followed by the translated number.\n7. The system should handle cases where multiple numbers are present in the input string, summing them appropriately.\n8. The system should ignore the word \"and\" when processing the input string.\n9. The system should correctly interpret words like \"twenty-one,\" \"thirty-two,\" etc., by combining the tens and units.\n10. The system should handle large numbers by recognizing scale words such as \"hundred,\" \"thousand,\" \"million,\" etc.",
  "XMLProcessor": "Title: XML Processor\n\n1. The system shall provide functionality to initialize an XML processor with a specified XML file name.\n2. The system shall be able to read an XML file from the disk and return the root element of the XML document.\n3. The system shall be capable of writing the current state of the XML document to a specified file on the disk.\n4. The system shall process XML data by converting the text content of all \"item\" elements to uppercase and then save the modified XML document to a specified file.\n5. The system shall provide a method to find all XML elements with a specified tag name within the document and return them as a list.\n6. The system shall handle errors gracefully, such as when an XML file cannot be loaded or when no root element is found in the document.\n7. The system shall ensure that the XML document is correctly formatted and saved after processing.\n8. The system shall maintain the integrity of the XML structure during processing, ensuring that only the text content of the specified elements is modified.\n9. The system shall support the use of TinyXML library for parsing and manipulating XML documents.\n10. The system shall output error messages to the standard error stream in case of failures during file operations or XML processing.",
  "ZipFileProcessor": "Title: Zip File Processor\n\n1. The system shall provide functionality to extract all files from a specified zip file into a given output directory.\n2. The system shall provide functionality to extract a specific file from a specified zip file into a given output directory.\n3. The system shall provide functionality to create a new zip file containing specified files.\n4. The system shall provide functionality to read basic information about a zip file, including its path and mode.\n5. The system shall handle errors gracefully by returning false and printing an error message when operations fail.\n6. The system shall ensure that the output directory exists before attempting to extract files into it, creating it if necessary.\n7. The system shall use UTF-8 encoding for file names within the zip file.\n8. The system shall support reading from and writing to zip files using the libzip library.\n9. The system shall handle large files efficiently during extraction by reading and writing in chunks.\n10. The system shall maintain the integrity of the zip file structure during creation and extraction processes."
}